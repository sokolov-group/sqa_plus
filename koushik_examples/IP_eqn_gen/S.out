terms=   (   1.00000) cre(A) des(J) des(I)   (   1.00000) cre(K) cre(L) des(B)
overlap S[+1]
 (   1.00000) kdelta(A,B) kdelta(I,K) kdelta(J,L)
 (  -1.00000) kdelta(A,B) kdelta(I,L) kdelta(J,K)
################ Construct Einsum ################
S_p2 = np.einsum('AB, IK, JL->YXWZ', np.identity(nextern_so), np.identity(ncore_so), np.identity(ncore_so), optimize = True)
S_p2 -= np.einsum('AB, IL, JK->YXWZ', np.identity(nextern_so), np.identity(ncore_so), np.identity(ncore_so), optimize = True)


terms=   (   1.00000) cre(A) des(X) des(I)   (   1.00000) cre(J) cre(Y) des(B)
overlap S[+1]
 (   1.00000) kdelta(A,B) kdelta(I,J) cre(Y) des(X) 
################ Construct Einsum ################
S_p2 = np.einsum('AB, IJ, YX->YXWZ', np.identity(nextern_so), np.identity(ncore_so), rdm_ca_so, optimize = True)


terms=   (   1.00000) cre(A) des(X) des(Y)   (   1.00000) cre(W) cre(Z) des(B)
overlap S[+1]
 (   1.00000) kdelta(A,B) cre(W) cre(Z) des(X) des(Y) 
################ Construct Einsum ################
S_p2 = np.einsum('AB, WZXY->YXWZ', np.identity(nextern_so), rdm_ccaa_so, optimize = True)


terms=   (   1.00000) cre(X) des(J) des(I)   (   1.00000) cre(K) cre(L) des(Y)
overlap S[+1]
 (   1.00000) kdelta(I,K) kdelta(J,L) kdelta(X,Y) 
 (  -1.00000) kdelta(I,L) kdelta(J,K) kdelta(X,Y) 
 (  -1.00000) kdelta(I,K) kdelta(J,L) cre(X) des(Y) 
 (   1.00000) kdelta(I,L) kdelta(J,K) cre(X) des(Y) 
################ Construct Einsum ################
S_p2 = np.einsum('IK, JL, XY->YXWZ', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), optimize = True)
S_p2 -= np.einsum('IL, JK, XY->YXWZ', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), optimize = True)
S_p2 -= np.einsum('IK, JL, XY->YXWZ', np.identity(ncore_so), np.identity(ncore_so), rdm_ca_so, optimize = True)
S_p2 += np.einsum('IL, JK, XY->YXWZ', np.identity(ncore_so), np.identity(ncore_so), rdm_ca_so, optimize = True)


terms=   (   1.00000) cre(X) des(Y) des(I)   (   1.00000) cre(J) cre(W) des(Z)
overlap S[+1]
 (   1.00000) kdelta(I,J) kdelta(X,Z) cre(W) des(Y)
 (   1.00000) kdelta(I,J) cre(W) cre(X) des(Y) des(Z)
################ Construct Einsum ################
S_p2 = np.einsum('IJ, XZ, WY->YXWZ', np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
S_p2 += np.einsum('IJ, WXYZ->YXWZ', np.identity(ncore_so), rdm_ccaa_so, optimize = True)







