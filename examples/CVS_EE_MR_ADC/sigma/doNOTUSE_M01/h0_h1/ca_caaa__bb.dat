
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


---------------------------- Spin-Adapted CVS-EE: Sigma H1 CAAA_CA (bb) ----------------------------


## Generating operators ...


## Left operator terms:
 (   0.50000) X_aaaa(i,x,y,z) cre(i) cre(x) des(z) des(y) 
 (   1.00000) X_abab(i,x,y,z) cre(i) cre(x) des(z) des(y) 
 (  -1.00000) X_abab(i,x,z,y) cre(i) cre(x) des(z) des(y) 
 (   0.50000) X_bbbb(i,x,y,z) cre(i) cre(x) des(z) des(y) 
 (   1.00000) X_baba(i,x,y,z) cre(i) cre(x) des(z) des(y) 
 (  -1.00000) X_baba(i,x,z,y) cre(i) cre(x) des(z) des(y) 

## Right operator terms:
 (   1.00000) cre(W) des(K) 

----------------------------------------- Hamiltonian (1) ------------------------------------------

Commutation: Done ...
Done ...
----------------------------------------------------------------------------------------------------
## Calculating the commutator [H(1), h(0)^\dag] ...

## Calculating [h(1), [H(1), h(0)^\dag]] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) X_aaaa(k,x,w,z) v(k,W,K,w) cre(x) des(z) 
 (   2.00000) X_abab(k,x,w,W) v(k,u,K,w) cre(x) des(u) 
 (  -2.00000) X_abab(k,x,w,y) v(k,W,K,w) cre(x) des(y) 
 (  -2.00000) X_baba(k,x,W,w) v(k,u,K,w) cre(x) des(u) 
 (  -2.00000) X_baba(k,x,w,y) v(k,W,K,w) cre(x) des(y) 
 (  -1.00000) X_bbbb(k,x,W,w) v(k,u,K,w) cre(x) des(u) 
 (  -1.00000) X_bbbb(k,x,w,z) v(k,W,K,w) cre(x) des(z) 
 (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) rdm(w,u) cre(x) des(y) 
 (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) rdm(w,u) cre(x) des(y) 
 (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) rdm(w,u) cre(x) des(z) 
 (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) rdm(w,u) cre(x) des(z) 
 (   1.00000) X_aaaa(k,x,w,z) v(k,u,K,w) cre(W) cre(x) des(z) des(u) 
 (   0.50000) X_aaaa(i,x,y,z) v(i,W,K,w) cre(x) cre(w) des(y) des(z) 
 (   2.00000) X_abab(k,x,w,y) v(k,u,K,w) cre(W) cre(x) des(y) des(u) 
 (  -2.00000) X_abab(k,x,z,W) v(k,w,K,u) cre(x) cre(u) des(z) des(w) 
 (   2.00000) X_abab(i,x,z,y) v(i,W,K,w) cre(x) cre(w) des(z) des(y) 
 (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) cre(x) cre(u) des(y) des(w) 
 (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) cre(x) cre(u) des(y) des(w) 
 (   2.00000) X_baba(k,x,w,y) v(k,u,K,w) cre(W) cre(x) des(y) des(u) 
 (  -2.00000) X_baba(k,x,z,w) v(k,u,K,w) cre(W) cre(x) des(z) des(u) 
 (   2.00000) X_baba(i,x,z,y) v(i,W,K,w) cre(x) cre(w) des(z) des(y) 
 (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) cre(x) cre(u) des(z) des(w) 
 (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) cre(x) cre(u) des(z) des(w) 
 (   1.00000) X_bbbb(k,x,w,z) v(k,u,K,w) cre(W) cre(x) des(z) des(u) 
 (   0.50000) X_bbbb(i,x,y,z) v(i,W,K,w) cre(x) cre(w) des(y) des(z) 
 (   2.00000) X_baba(i,x,z,y) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(z) des(y) 
 (   2.00000) X_baba(i,x,z,y) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(z) des(y) 
 (   0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(y) des(z) 
 (   0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(y) des(z) 
 (  -0.50000) X_aaaa(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w) 
 (  -2.00000) X_abab(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w) 
 (  -2.00000) X_baba(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w) 
 (  -2.00000) X_baba(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w) 
 (  -0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w) 
 (  -0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w) 

Total terms : 35
SQA automation time :  46.656 seconds
Converting Sigma vector to spin-adapted formulation ...
----------------------------------------------------------------------------------------------------
Converting custom vector to spin-adapted formulation...

<<<  (  -1.00000) X_aaaa(k,x,w,z) v(k,W,K,w) cre(x) des(z) 
-->  (  -1.00000) X_aaaa(k,x,w,z) v(k,W,K,w) cre(x) des(z)  (factor = 1.00000)

<<<  (   2.00000) X_abab(k,x,w,W) v(k,u,K,w) cre(x) des(u) 
-->  (   2.00000) X_abab(k,x,w,W) v(k,u,K,w) cre(x) des(u)  (factor = 1.00000)

<<<  (  -2.00000) X_abab(k,x,w,y) v(k,W,K,w) cre(x) des(y) 
-->  (  -2.00000) X_abab(k,x,w,y) v(k,W,K,w) cre(x) des(y)  (factor = 1.00000)

<<<  (  -2.00000) X_baba(k,x,W,w) v(k,u,K,w) cre(x) des(u) 
-->  (  -2.00000) X_baba(k,x,W,w) v(k,u,K,w) cre(x) des(u)  (factor = 1.00000)

<<<  (  -2.00000) X_baba(k,x,w,y) v(k,W,K,w) cre(x) des(y) 
-->  (  -2.00000) X_baba(k,x,w,y) v(k,W,K,w) cre(x) des(y)  (factor = 1.00000)

<<<  (  -1.00000) X_bbbb(k,x,W,w) v(k,u,K,w) cre(x) des(u) 
-->  (  -1.00000) X_bbbb(k,x,W,w) v(k,u,K,w) cre(x) des(u)  (factor = 1.00000)

<<<  (  -1.00000) X_bbbb(k,x,w,z) v(k,W,K,w) cre(x) des(z) 
-->  (  -1.00000) X_bbbb(k,x,w,z) v(k,W,K,w) cre(x) des(z)  (factor = 1.00000)

<<<  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) rdm(w,u) cre(x) des(y) 
-->  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) rdm(w,u) cre(x) des(y)  (factor = 1.00000)

<<<  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) rdm(w,u) cre(x) des(y) 
-->  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) rdm(w,u) cre(x) des(y)  (factor = 1.00000)

<<<  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) rdm(w,u) cre(x) des(z) 
-->  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) rdm(w,u) cre(x) des(z)  (factor = 1.00000)

<<<  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) rdm(w,u) cre(x) des(z) 
-->  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) rdm(w,u) cre(x) des(z)  (factor = 1.00000)

<<<  (   1.00000) X_aaaa(k,x,w,z) v(k,u,K,w) cre(W) cre(x) des(z) des(u) 
-->  (   1.00000) X_aaaa(k,x,w,z) v(k,u,K,w) cre(W) cre(x) des(z) des(u)  (factor = 1.00000)

<<<  (   0.50000) X_aaaa(i,x,y,z) v(i,W,K,w) cre(x) cre(w) des(y) des(z) 
-->  (   0.50000) X_aaaa(i,x,y,z) v(i,W,K,w) cre(x) cre(w) des(y) des(z)  (factor = 1.00000)

<<<  (   2.00000) X_abab(k,x,w,y) v(k,u,K,w) cre(W) cre(x) des(y) des(u) 
-->  (   2.00000) X_abab(k,x,w,y) v(k,u,K,w) cre(W) cre(x) des(y) des(u)  (factor = 1.00000)

<<<  (  -2.00000) X_abab(k,x,z,W) v(k,w,K,u) cre(x) cre(u) des(z) des(w) 
-->  (  -2.00000) X_abab(k,x,z,W) v(k,w,K,u) cre(x) cre(u) des(z) des(w)  (factor = 1.00000)

<<<  (   2.00000) X_abab(i,x,z,y) v(i,W,K,w) cre(x) cre(w) des(z) des(y) 
-->  (   2.00000) X_abab(i,x,z,y) v(i,W,K,w) cre(x) cre(w) des(z) des(y)  (factor = 1.00000)

<<<  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) cre(x) cre(u) des(y) des(w) 
-->  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) cre(x) cre(u) des(y) des(w)  (factor = 1.00000)

<<<  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) cre(x) cre(u) des(y) des(w) 
-->  (   2.00000) X_baba(k,x,W,y) v(k,w,K,u) cre(x) cre(u) des(y) des(w)  (factor = 1.00000)

<<<  (   2.00000) X_baba(k,x,w,y) v(k,u,K,w) cre(W) cre(x) des(y) des(u) 
-->  (   2.00000) X_baba(k,x,w,y) v(k,u,K,w) cre(W) cre(x) des(y) des(u)  (factor = 1.00000)

<<<  (  -2.00000) X_baba(k,x,z,w) v(k,u,K,w) cre(W) cre(x) des(z) des(u) 
-->  (  -2.00000) X_baba(k,x,z,w) v(k,u,K,w) cre(W) cre(x) des(z) des(u)  (factor = 1.00000)

<<<  (   2.00000) X_baba(i,x,z,y) v(i,W,K,w) cre(x) cre(w) des(z) des(y) 
-->  (   2.00000) X_baba(i,x,z,y) v(i,W,K,w) cre(x) cre(w) des(z) des(y)  (factor = 1.00000)

<<<  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) cre(x) cre(u) des(z) des(w) 
-->  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) cre(x) cre(u) des(z) des(w)  (factor = 1.00000)

<<<  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) cre(x) cre(u) des(z) des(w) 
-->  (   1.00000) X_bbbb(k,x,W,z) v(k,w,K,u) cre(x) cre(u) des(z) des(w)  (factor = 1.00000)

<<<  (   1.00000) X_bbbb(k,x,w,z) v(k,u,K,w) cre(W) cre(x) des(z) des(u) 
-->  (   1.00000) X_bbbb(k,x,w,z) v(k,u,K,w) cre(W) cre(x) des(z) des(u)  (factor = 1.00000)

<<<  (   0.50000) X_bbbb(i,x,y,z) v(i,W,K,w) cre(x) cre(w) des(y) des(z) 
-->  (   0.50000) X_bbbb(i,x,y,z) v(i,W,K,w) cre(x) cre(w) des(y) des(z)  (factor = 1.00000)

<<<  (   2.00000) X_baba(i,x,z,y) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(z) des(y) 
-->  (   2.00000) X_baba(i,x,z,y) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(z) des(y)  (factor = 1.00000)

<<<  (   2.00000) X_baba(i,x,z,y) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(z) des(y) 
-->  (   2.00000) X_baba(i,x,z,y) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(z) des(y)  (factor = 1.00000)

<<<  (   0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(y) des(z) 
-->  (   0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(y) des(z)  (factor = 1.00000)

<<<  (   0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(y) des(z) 
-->  (   0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) rdm(w,u) cre(W) cre(x) des(y) des(z)  (factor = 1.00000)

<<<  (  -0.50000) X_aaaa(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w) 
-->  (  -0.50000) X_aaaa(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w)  (factor = 1.00000)

<<<  (  -2.00000) X_abab(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w) 
-->  (  -2.00000) X_abab(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w)  (factor = 1.00000)

<<<  (  -2.00000) X_baba(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w) 
-->  (  -2.00000) X_baba(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w)  (factor = 1.00000)

<<<  (  -2.00000) X_baba(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w) 
-->  (  -2.00000) X_baba(i,x,z,y) v(i,w,K,u) cre(W) cre(x) cre(u) des(z) des(y) des(w)  (factor = 1.00000)

<<<  (  -0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w) 
-->  (  -0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w)  (factor = 1.00000)

<<<  (  -0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w) 
-->  (  -0.50000) X_bbbb(i,x,y,z) v(i,w,K,u) cre(W) cre(x) cre(u) des(y) des(z) des(w)  (factor = 1.00000)
Done!

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 98 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

23 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.08333) X_aaaa(i,x,y,z) v(K,W,w,i) rdm(x,w,y,z) 
 (  -0.08333) X_aaaa(i,x,y,z) v(K,W,w,i) rdm(x,w,z,y) 
 (  -0.08333) X_aaaa(i,x,y,z) v(K,w,u,i) rdm(W,x,u,w,y,z) 
 (   0.04167) X_aaaa(i,x,y,z) v(K,w,u,i) rdm(W,x,u,w,z,y) 
 (  -0.04167) X_aaaa(i,x,y,z) v(K,w,u,i) rdm(W,x,u,y,w,z) 
 (  -0.04167) X_aaaa(i,x,y,z) v(K,w,u,i) rdm(W,x,u,z,y,w) 
 (   0.50000) X_aaaa(k,x,w,z) v(K,W,w,k) rdm(x,z) 
 (  -0.33333) X_aaaa(k,x,w,z) v(K,u,w,k) rdm(W,x,u,z) 
 (  -0.16667) X_aaaa(k,x,w,z) v(K,u,w,k) rdm(W,x,z,u) 
 (  -0.66667) X_abab(i,x,z,y) v(K,W,w,i) rdm(x,w,y,z) 
 (  -0.33333) X_abab(i,x,z,y) v(K,W,w,i) rdm(x,w,z,y) 
 (   0.16667) X_abab(i,x,z,y) v(K,w,u,i) rdm(W,x,u,w,y,z) 
 (  -0.33333) X_abab(i,x,z,y) v(K,w,u,i) rdm(W,x,u,y,w,z) 
 (  -0.16667) X_abab(i,x,z,y) v(K,w,u,i) rdm(W,x,u,y,z,w) 
 (  -0.16667) X_abab(i,x,z,y) v(K,w,u,i) rdm(W,x,u,z,w,y) 
 (  -1.00000) X_abab(k,x,w,W) v(K,u,w,k) rdm(x,u) 
 (   1.00000) X_abab(k,x,w,y) v(K,W,w,k) rdm(x,y) 
 (  -0.33333) X_abab(k,x,w,y) v(K,u,w,k) rdm(W,x,u,y) 
 (   0.33333) X_abab(k,x,w,y) v(K,u,w,k) rdm(W,x,y,u) 
 (   0.66667) X_abab(k,x,z,W) v(K,w,u,k) rdm(x,u,w,z) 
 (   0.33333) X_abab(k,x,z,W) v(K,w,u,k) rdm(x,u,z,w) 
 (  -0.66667) X_baba(i,x,z,y) v(K,W,w,i) rdm(x,w,y,z) 
 (  -0.33333) X_baba(i,x,z,y) v(K,W,w,i) rdm(x,w,z,y) 
 (   0.66667) X_baba(i,x,z,y) v(K,i,w,W) rdm(x,w,y,z) 
 (   0.33333) X_baba(i,x,z,y) v(K,i,w,W) rdm(x,w,z,y) 
 (   0.33333) X_baba(i,x,z,y) v(K,i,w,u) rdm(W,x,w,y,z,u) 
 (   0.66667) X_baba(i,x,z,y) v(K,i,w,u) rdm(W,x,w,z,y,u) 
 (   0.16667) X_baba(i,x,z,y) v(K,w,u,i) rdm(W,x,u,w,y,z) 
 (  -0.16667) X_baba(i,x,z,y) v(K,w,u,i) rdm(W,x,u,y,z,w) 
 (  -0.16667) X_baba(i,x,z,y) v(K,w,u,i) rdm(W,x,u,z,w,y) 
 (  -0.33333) X_baba(i,x,z,y) v(K,w,u,i) rdm(W,x,u,z,y,w) 
 (  -1.00000) X_baba(k,x,W,w) v(K,k,w,u) rdm(x,u) 
 (  -1.00000) X_baba(k,x,W,y) v(K,k,w,u) rdm(x,w,y,u) 
 (   0.33333) X_baba(k,x,W,y) v(K,w,u,k) rdm(x,u,w,y) 
 (   0.66667) X_baba(k,x,W,y) v(K,w,u,k) rdm(x,u,y,w) 
 (   1.00000) X_baba(k,x,w,y) v(K,W,w,k) rdm(x,y) 
 (  -1.00000) X_baba(k,x,w,y) v(K,k,w,W) rdm(x,y) 
 (   0.66667) X_baba(k,x,w,y) v(K,k,w,u) rdm(W,x,u,y) 
 (   0.33333) X_baba(k,x,w,y) v(K,k,w,u) rdm(W,x,y,u) 
 (  -0.66667) X_baba(k,x,w,y) v(K,u,w,k) rdm(W,x,u,y) 
 (  -0.33333) X_baba(k,x,w,y) v(K,u,w,k) rdm(W,x,y,u) 
 (   0.33333) X_baba(k,x,z,w) v(K,k,w,u) rdm(W,x,u,z) 
 (   0.66667) X_baba(k,x,z,w) v(K,k,w,u) rdm(W,x,z,u) 
 (   0.08333) X_bbbb(i,x,y,z) v(K,W,w,i) rdm(x,w,y,z) 
 (  -0.08333) X_bbbb(i,x,y,z) v(K,W,w,i) rdm(x,w,z,y) 
 (  -0.08333) X_bbbb(i,x,y,z) v(K,i,w,W) rdm(x,w,y,z) 
 (   0.08333) X_bbbb(i,x,y,z) v(K,i,w,W) rdm(x,w,z,y) 
 (   0.08333) X_bbbb(i,x,y,z) v(K,i,w,u) rdm(W,x,w,y,z,u) 
 (  -0.08333) X_bbbb(i,x,y,z) v(K,i,w,u) rdm(W,x,w,z,y,u) 
 (   0.04167) X_bbbb(i,x,y,z) v(K,w,u,i) rdm(W,x,u,w,z,y) 
 (   0.04167) X_bbbb(i,x,y,z) v(K,w,u,i) rdm(W,x,u,y,w,z) 
 (   0.04167) X_bbbb(i,x,y,z) v(K,w,u,i) rdm(W,x,u,z,y,w) 
 (  -0.50000) X_bbbb(k,x,W,w) v(K,k,w,u) rdm(x,u) 
 (   0.50000) X_bbbb(k,x,W,w) v(K,u,w,k) rdm(x,u) 
 (  -0.50000) X_bbbb(k,x,W,z) v(K,k,w,u) rdm(x,w,z,u) 
 (  -0.16667) X_bbbb(k,x,W,z) v(K,w,u,k) rdm(x,u,w,z) 
 (   0.16667) X_bbbb(k,x,W,z) v(K,w,u,k) rdm(x,u,z,w) 
 (   0.50000) X_bbbb(k,x,w,z) v(K,W,w,k) rdm(x,z) 
 (  -0.50000) X_bbbb(k,x,w,z) v(K,k,w,W) rdm(x,z) 
 (   0.16667) X_bbbb(k,x,w,z) v(K,k,w,u) rdm(W,x,u,z) 
 (  -0.16667) X_bbbb(k,x,w,z) v(K,k,w,u) rdm(W,x,z,u) 
 (  -0.16667) X_bbbb(k,x,w,z) v(K,u,w,k) rdm(W,x,u,z) 
 (   0.16667) X_bbbb(k,x,w,z) v(K,u,w,k) rdm(W,x,z,u) 
 (  -0.33333) X_baba(i,x,z,y) v(K,i,w,u) rdm(w,u) rdm(W,x,y,z) 
 (  -0.66667) X_baba(i,x,z,y) v(K,i,w,u) rdm(w,u) rdm(W,x,z,y) 
 (   0.16667) X_baba(i,x,z,y) v(K,w,u,i) rdm(u,w) rdm(W,x,y,z) 
 (   0.33333) X_baba(i,x,z,y) v(K,w,u,i) rdm(u,w) rdm(W,x,z,y) 
 (   1.00000) X_baba(k,x,W,y) v(K,k,w,u) rdm(w,u) rdm(x,y) 
 (  -0.50000) X_baba(k,x,W,y) v(K,w,u,k) rdm(u,w) rdm(x,y) 
 (  -0.08333) X_bbbb(i,x,y,z) v(K,i,w,u) rdm(w,u) rdm(W,x,y,z) 
 (   0.08333) X_bbbb(i,x,y,z) v(K,i,w,u) rdm(w,u) rdm(W,x,z,y) 
 (   0.04167) X_bbbb(i,x,y,z) v(K,w,u,i) rdm(u,w) rdm(W,x,y,z) 
 (  -0.04167) X_bbbb(i,x,y,z) v(K,w,u,i) rdm(u,w) rdm(W,x,z,y) 
 (   0.50000) X_bbbb(k,x,W,z) v(K,k,w,u) rdm(w,u) rdm(x,z) 
 (  -0.25000) X_bbbb(k,x,W,z) v(K,w,u,k) rdm(u,w) rdm(x,z) 

Total spin-integrated terms: 35
Total spin-adapted terms: 75
Spin-adaptation automation time :  4.270 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 75


--------------------------------------- genEinsum equations ----------------------------------------

sigma_KW_bb  = 1/12 * einsum('ixyz,KWwi,xwyz->KW', X_aaaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/12 * einsum('ixyz,KWwi,xwzy->KW', X_aaaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/12 * einsum('ixyz,Kwui,Wxuwyz->KW', X_aaaa, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 1/24 * einsum('ixyz,Kwui,Wxuwzy->KW', X_aaaa, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/24 * einsum('ixyz,Kwui,Wxuywz->KW', X_aaaa, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/24 * einsum('ixyz,Kwui,Wxuzyw->KW', X_aaaa, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 1/2 * einsum('ixyz,KWyi,xz->KW', X_aaaa, v_xaax, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,Kwyi,Wxwz->KW', X_aaaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kwyi,Wxzw->KW', X_aaaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 2/3 * einsum('ixyz,KWwi,xwzy->KW', X_abab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,KWwi,xwyz->KW', X_abab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/6 * einsum('ixyz,Kwui,Wxuwzy->KW', X_abab, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,Kwui,Wxuzwy->KW', X_abab, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kwui,Wxuzyw->KW', X_abab, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kwui,Wxuywz->KW', X_abab, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= einsum('ixyW,Kzyi,xz->KW', X_abab, v_xaax, rdm_ca, optimize = einsum_type)
sigma_KW_bb += einsum('ixyz,KWyi,xz->KW', X_abab, v_xaax, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,Kwyi,Wxwz->KW', X_abab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyz,Kwyi,Wxzw->KW', X_abab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 2/3 * einsum('ixyW,Kzwi,xwzy->KW', X_abab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyW,Kzwi,xwyz->KW', X_abab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 2/3 * einsum('ixyz,KWwi,xwzy->KW', X_baba, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,KWwi,xwyz->KW', X_baba, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 2/3 * einsum('ixyz,KiwW,xwzy->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyz,KiwW,xwyz->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyz,Kiwu,Wxwzyu->KW', X_baba, v_xxaa, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 2/3 * einsum('ixyz,Kiwu,Wxwyzu->KW', X_baba, v_xxaa, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 1/6 * einsum('ixyz,Kwui,Wxuwzy->KW', X_baba, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kwui,Wxuzyw->KW', X_baba, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kwui,Wxuywz->KW', X_baba, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,Kwui,Wxuyzw->KW', X_baba, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= einsum('ixWy,Kiyz,xz->KW', X_baba, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= einsum('ixWy,Kizw,xzyw->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixWy,Kzwi,xwzy->KW', X_baba, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 2/3 * einsum('ixWy,Kzwi,xwyz->KW', X_baba, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += einsum('ixyz,KWyi,xz->KW', X_baba, v_xaax, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= einsum('ixyz,KiyW,xz->KW', X_baba, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_KW_bb += 2/3 * einsum('ixyz,Kiyw,Wxwz->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyz,Kiyw,Wxzw->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 2/3 * einsum('ixyz,Kwyi,Wxwz->KW', X_baba, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,Kwyi,Wxzw->KW', X_baba, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyz,Kizw,Wxwy->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 2/3 * einsum('ixyz,Kizw,Wxyw->KW', X_baba, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/12 * einsum('ixyz,KWwi,xwyz->KW', X_bbbb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/12 * einsum('ixyz,KWwi,xwzy->KW', X_bbbb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/12 * einsum('ixyz,KiwW,xwyz->KW', X_bbbb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/12 * einsum('ixyz,KiwW,xwzy->KW', X_bbbb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/12 * einsum('ixyz,Kiwu,Wxwyzu->KW', X_bbbb, v_xxaa, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/12 * einsum('ixyz,Kiwu,Wxwzyu->KW', X_bbbb, v_xxaa, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 1/24 * einsum('ixyz,Kwui,Wxuwzy->KW', X_bbbb, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 1/24 * einsum('ixyz,Kwui,Wxuywz->KW', X_bbbb, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb += 1/24 * einsum('ixyz,Kwui,Wxuzyw->KW', X_bbbb, v_xaax, rdm_cccaaa, optimize = einsum_type)
sigma_KW_bb -= 1/2 * einsum('ixWy,Kiyz,xz->KW', X_bbbb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_KW_bb += 1/2 * einsum('ixWy,Kzyi,xz->KW', X_bbbb, v_xaax, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/2 * einsum('ixWy,Kizw,xzyw->KW', X_bbbb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixWy,Kzwi,xwzy->KW', X_bbbb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/6 * einsum('ixWy,Kzwi,xwyz->KW', X_bbbb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/2 * einsum('ixyz,KWyi,xz->KW', X_bbbb, v_xaax, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/2 * einsum('ixyz,KiyW,xz->KW', X_bbbb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_KW_bb += 1/6 * einsum('ixyz,Kiyw,Wxwz->KW', X_bbbb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kiyw,Wxzw->KW', X_bbbb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/6 * einsum('ixyz,Kwyi,Wxwz->KW', X_bbbb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/6 * einsum('ixyz,Kwyi,Wxzw->KW', X_bbbb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/3 * einsum('ixyz,Kiwu,wu,Wxzy->KW', X_baba, v_xxaa, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 2/3 * einsum('ixyz,Kiwu,wu,Wxyz->KW', X_baba, v_xxaa, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/6 * einsum('ixyz,Kwui,uw,Wxzy->KW', X_baba, v_xaax, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/3 * einsum('ixyz,Kwui,uw,Wxyz->KW', X_baba, v_xaax, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += einsum('ixWy,Kizw,zw,xy->KW', X_baba, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/2 * einsum('ixWy,Kzwi,wz,xy->KW', X_baba, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/12 * einsum('ixyz,Kiwu,wu,Wxyz->KW', X_bbbb, v_xxaa, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/12 * einsum('ixyz,Kiwu,wu,Wxzy->KW', X_bbbb, v_xxaa, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/24 * einsum('ixyz,Kwui,uw,Wxyz->KW', X_bbbb, v_xaax, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb -= 1/24 * einsum('ixyz,Kwui,uw,Wxzy->KW', X_bbbb, v_xaax, rdm_ca, rdm_ccaa, optimize = einsum_type)
sigma_KW_bb += 1/2 * einsum('ixWy,Kizw,zw,xy->KW', X_bbbb, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_KW_bb -= 1/4 * einsum('ixWy,Kzwi,wz,xy->KW', X_bbbb, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 774.64 seconds.
