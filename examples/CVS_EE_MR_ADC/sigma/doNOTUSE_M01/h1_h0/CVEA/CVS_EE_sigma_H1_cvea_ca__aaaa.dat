
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


--------------------------- Spin-Adapted CVS-EE: Sigma H0 CVEA_CA (aaaa) ---------------------------


## Generating operators ...


## Right operator terms:
 (   1.00000) X_aa(i,x) cre(x) des(i) 
 (   1.00000) X_aa(i,x) cre(x) des(i) 

## Left operator terms:
 (   1.00000) cre(K) cre(L) des(W) des(B) 

----------------------------------------- Hamiltonian (1) ------------------------------------------

Commutation: Done ...
Done ...
----------------------------------------------------------------------------------------------------
## Calculating the commutator [H(1), h(0)^\dag] ...

## Calculating [h^(1), [H(1), h(0)^\dag]] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) X_aa(K,x) v(L,x,W,B) 
 (   1.00000) X_aa(j,W) v(K,L,j,B) 
 (  -1.00000) X_aa(K,x) e(B) t1(L,x,B,W) 
 (   1.00000) X_aa(K,x) e(L) t1(L,x,B,W) 
 (  -1.00000) X_aa(K,x) h(W,y) t1(L,x,B,y) 
 (   1.00000) X_aa(K,x) h(x,y) t1(L,y,B,W) 
 (   2.00000) X_aa(K,x) t1(L,y,B,W) v(j,x,j,y) 
 (   2.00000) X_aa(K,x) t1(L,y,B,W) v(j,x,j,y) 
 (   2.00000) X_aa(K,x) t1(L,y,B,W) v(j,x,j,y) 
 (   2.00000) X_aa(K,x) t1(L,y,B,W) v(j,x,j,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,B,y) v(j,W,j,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,B,y) v(j,W,j,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,B,y) v(j,W,j,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,B,y) v(j,W,j,y) 
 (  -1.00000) X_aa(K,x) v(L,x,y,B) cre(y) des(W) 
 (  -1.00000) X_aa(j,x) v(K,L,j,B) cre(x) des(W) 
 (   1.00000) X_aa(K,x) e(B) t1(L,x,B,y) cre(y) des(W) 
 (  -1.00000) X_aa(K,x) e(L) t1(L,x,B,y) cre(y) des(W) 
 (   1.00000) X_aa(K,x) h(y,z) t1(L,x,B,y) cre(z) des(W) 
 (  -1.00000) X_aa(K,x) h(x,y) t1(L,y,B,z) cre(z) des(W) 
 (   1.00000) X_aa(K,x) t1(L,y,B,W) v(x,z,y,w) cre(w) des(z) 
 (   1.00000) X_aa(K,x) t1(L,y,B,W) v(x,z,y,w) cre(w) des(z) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(W,y,x,w) cre(z) des(w) 
 (  -1.00000) X_aa(K,x) t1(L,y,B,z) v(W,w,x,z) cre(w) des(y) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(j,x,j,y) cre(z) des(W) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(j,x,j,y) cre(z) des(W) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(j,x,j,y) cre(z) des(W) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(j,x,j,y) cre(z) des(W) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(W,y,x,w) cre(z) des(w) 
 (  -1.00000) X_aa(K,x) t1(L,y,B,z) v(W,w,x,z) cre(w) des(y) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(W,z,y,w) cre(z) des(w) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(W,z,y,w) cre(z) des(w) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,y,j,z) cre(z) des(W) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,y,j,z) cre(z) des(W) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,y,j,z) cre(z) des(W) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,y,j,z) cre(z) des(W) 
 (  -0.50000) X_aa(K,x) t1(L,y,B,z) v(x,z,w,u) cre(w) cre(u) des(W) des(y) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(x,w,y,u) cre(z) cre(u) des(W) des(w) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(x,w,y,u) cre(z) cre(u) des(W) des(w) 
 (  -1.00000) X_aa(K,x) t1(L,y,B,z) v(x,z,w,u) cre(w) cre(u) des(W) des(y) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(x,w,y,u) cre(z) cre(u) des(W) des(w) 
 (  -0.50000) X_aa(K,x) t1(L,x,B,y) v(y,z,w,u) cre(w) cre(u) des(W) des(z) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(y,z,w,u) cre(w) cre(u) des(W) des(z) 

Total terms : 43
SQA automation time :  5.926 seconds
----------------------------------------------------------------------------------------------------

----------------------- Converting Sigma vector to spin-adapted formulation ------------------------

----------------------------------------------------------------------------------------------------

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 130 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

48 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) X_aa(K,x) v(L,B,x,W) 
 (   1.00000) X_aa(K,x) v(L,W,x,B) 
 (   1.00000) X_aa(j,W) v(K,j,L,B) 
 (  -1.00000) X_aa(j,W) v(L,j,K,B) 
 (  -1.00000) X_aa(K,x) e(B) t1(L,x,B,W) 
 (   1.00000) X_aa(K,x) e(B) t1(L,x,W,B) 
 (   1.00000) X_aa(K,x) e(L) t1(L,x,B,W) 
 (  -1.00000) X_aa(K,x) e(L) t1(L,x,W,B) 
 (  -1.00000) X_aa(K,x) h(W,y) t1(L,x,B,y) 
 (   1.00000) X_aa(K,x) h(W,y) t1(L,x,y,B) 
 (   1.00000) X_aa(K,x) h(x,y) t1(L,y,B,W) 
 (  -1.00000) X_aa(K,x) h(x,y) t1(L,y,W,B) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,W,y,j) 
 (  -4.00000) X_aa(K,x) t1(L,x,B,y) v(j,j,W,y) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,W,y,j) 
 (  -4.00000) X_aa(K,x) t1(L,x,B,y) v(j,j,W,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(j,W,y,j) 
 (   4.00000) X_aa(K,x) t1(L,x,y,B) v(j,j,W,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(j,W,y,j) 
 (   4.00000) X_aa(K,x) t1(L,x,y,B) v(j,j,W,y) 
 (   4.00000) X_aa(K,x) t1(L,y,B,W) v(j,j,x,y) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,W) v(j,x,y,j) 
 (   4.00000) X_aa(K,x) t1(L,y,B,W) v(j,j,x,y) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,W) v(j,x,y,j) 
 (  -4.00000) X_aa(K,x) t1(L,y,W,B) v(j,j,x,y) 
 (   2.00000) X_aa(K,x) t1(L,y,W,B) v(j,x,y,j) 
 (  -4.00000) X_aa(K,x) t1(L,y,W,B) v(j,j,x,y) 
 (   2.00000) X_aa(K,x) t1(L,y,W,B) v(j,x,y,j) 
 (   0.50000) X_aa(K,x) v(L,B,x,y) rdm(W,y) 
 (  -0.50000) X_aa(K,x) v(L,y,x,B) rdm(W,y) 
 (  -0.50000) X_aa(j,x) v(K,j,L,B) rdm(W,x) 
 (   0.50000) X_aa(j,x) v(L,j,K,B) rdm(W,x) 
 (   0.50000) X_aa(K,x) e(B) t1(L,x,B,y) rdm(W,y) 
 (  -0.50000) X_aa(K,x) e(B) t1(L,x,y,B) rdm(W,y) 
 (  -0.50000) X_aa(K,x) e(L) t1(L,x,B,y) rdm(W,y) 
 (   0.50000) X_aa(K,x) e(L) t1(L,x,y,B) rdm(W,y) 
 (  -0.50000) X_aa(K,x) h(x,y) t1(L,y,B,z) rdm(W,z) 
 (   0.50000) X_aa(K,x) h(x,y) t1(L,y,z,B) rdm(W,z) 
 (   0.50000) X_aa(K,x) h(y,z) t1(L,x,B,y) rdm(W,z) 
 (  -0.50000) X_aa(K,x) h(y,z) t1(L,x,y,B) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(W,y,z,w) rdm(z,w) 
 (   0.50000) X_aa(K,x) t1(L,x,B,y) v(W,z,w,y) rdm(w,z) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,j,y,z) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(j,y,z,j) rdm(W,z) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(j,j,y,z) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(j,y,z,j) rdm(W,z) 
 (   0.50000) X_aa(K,x) t1(L,x,B,y) v(y,z,w,u) rdm(W,w,z,u) 
 (   1.00000) X_aa(K,x) t1(L,x,y,B) v(W,y,z,w) rdm(z,w) 
 (  -0.50000) X_aa(K,x) t1(L,x,y,B) v(W,z,w,y) rdm(w,z) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(j,j,y,z) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,x,y,B) v(j,y,z,j) rdm(W,z) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(j,j,y,z) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,x,y,B) v(j,y,z,j) rdm(W,z) 
 (  -0.50000) X_aa(K,x) t1(L,x,y,B) v(y,z,w,u) rdm(W,w,z,u) 
 (   1.00000) X_aa(K,x) t1(L,y,B,W) v(x,y,z,w) rdm(z,w) 
 (  -0.50000) X_aa(K,x) t1(L,y,B,W) v(x,z,w,y) rdm(w,z) 
 (  -0.50000) X_aa(K,x) t1(L,y,B,z) v(W,w,y,x) rdm(z,w) 
 (  -1.00000) X_aa(K,x) t1(L,y,B,z) v(W,x,w,z) rdm(y,w) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(W,x,y,w) rdm(z,w) 
 (   0.50000) X_aa(K,x) t1(L,y,B,z) v(W,z,w,x) rdm(y,w) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(j,j,x,y) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(j,x,y,j) rdm(W,z) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(j,j,x,y) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(j,x,y,j) rdm(W,z) 
 (  -0.50000) X_aa(K,x) t1(L,y,B,z) v(x,w,u,y) rdm(W,u,w,z) 
 (   0.50000) X_aa(K,x) t1(L,y,B,z) v(x,w,z,u) rdm(W,y,w,u) 
 (  -0.50000) X_aa(K,x) t1(L,y,B,z) v(x,y,w,u) rdm(W,w,z,u) 
 (  -1.00000) X_aa(K,x) t1(L,y,W,B) v(x,y,z,w) rdm(z,w) 
 (   0.50000) X_aa(K,x) t1(L,y,W,B) v(x,z,w,y) rdm(w,z) 
 (   0.50000) X_aa(K,x) t1(L,y,z,B) v(W,w,y,x) rdm(z,w) 
 (   0.50000) X_aa(K,x) t1(L,y,z,B) v(W,x,w,z) rdm(y,w) 
 (  -0.50000) X_aa(K,x) t1(L,y,z,B) v(W,x,y,w) rdm(z,w) 
 (  -0.50000) X_aa(K,x) t1(L,y,z,B) v(W,z,w,x) rdm(y,w) 
 (   2.00000) X_aa(K,x) t1(L,y,z,B) v(j,j,x,y) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,y,z,B) v(j,x,y,j) rdm(W,z) 
 (   2.00000) X_aa(K,x) t1(L,y,z,B) v(j,j,x,y) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,y,z,B) v(j,x,y,j) rdm(W,z) 
 (   0.16667) X_aa(K,x) t1(L,y,z,B) v(x,w,u,y) rdm(W,u,w,z) 
 (  -0.16667) X_aa(K,x) t1(L,y,z,B) v(x,w,u,y) rdm(W,u,z,w) 
 (   0.16667) X_aa(K,x) t1(L,y,z,B) v(x,w,z,u) rdm(W,y,u,w) 
 (  -0.16667) X_aa(K,x) t1(L,y,z,B) v(x,w,z,u) rdm(W,y,w,u) 
 (   0.50000) X_aa(K,x) t1(L,y,z,B) v(x,y,w,u) rdm(W,w,z,u) 

Total spin-integrated terms: 43
Total spin-adapted terms: 82
Spin-adaptation automation time :  1.481 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

32 terms removed:
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(i,W,y,i) 
 (  -4.00000) X_aa(K,x) t1(L,x,B,y) v(i,i,W,y) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(i,W,y,i) 
 (  -4.00000) X_aa(K,x) t1(L,x,B,y) v(i,i,W,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(i,W,y,i) 
 (   4.00000) X_aa(K,x) t1(L,x,y,B) v(i,i,W,y) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(i,W,y,i) 
 (   4.00000) X_aa(K,x) t1(L,x,y,B) v(i,i,W,y) 
 (   4.00000) X_aa(K,x) t1(L,y,B,W) v(i,i,x,y) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,W) v(i,x,y,i) 
 (   4.00000) X_aa(K,x) t1(L,y,B,W) v(i,i,x,y) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,W) v(i,x,y,i) 
 (  -4.00000) X_aa(K,x) t1(L,y,W,B) v(i,i,x,y) 
 (   2.00000) X_aa(K,x) t1(L,y,W,B) v(i,x,y,i) 
 (  -4.00000) X_aa(K,x) t1(L,y,W,B) v(i,i,x,y) 
 (   2.00000) X_aa(K,x) t1(L,y,W,B) v(i,x,y,i) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(i,i,y,z) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(i,y,z,i) rdm(W,z) 
 (   2.00000) X_aa(K,x) t1(L,x,B,y) v(i,i,y,z) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,x,B,y) v(i,y,z,i) rdm(W,z) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(i,i,y,z) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,x,y,B) v(i,y,z,i) rdm(W,z) 
 (  -2.00000) X_aa(K,x) t1(L,x,y,B) v(i,i,y,z) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,x,y,B) v(i,y,z,i) rdm(W,z) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(i,i,x,y) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(i,x,y,i) rdm(W,z) 
 (  -2.00000) X_aa(K,x) t1(L,y,B,z) v(i,i,x,y) rdm(W,z) 
 (   1.00000) X_aa(K,x) t1(L,y,B,z) v(i,x,y,i) rdm(W,z) 
 (   2.00000) X_aa(K,x) t1(L,y,z,B) v(i,i,x,y) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,y,z,B) v(i,x,y,i) rdm(W,z) 
 (   2.00000) X_aa(K,x) t1(L,y,z,B) v(i,i,x,y) rdm(W,z) 
 (  -1.00000) X_aa(K,x) t1(L,y,z,B) v(i,x,y,i) rdm(W,z) 
----------------------------------------------------------------------------------------------------
Remaining terms: 50


--------------------------------------- genEinsum equations ----------------------------------------

sigma_KLBW_aaaa =- einsum('Kx,LBxW->KLBW', X_aa, v_veaa, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,LWxB->KLBW', X_aa, v_vaae, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('iW,KiLB->KLBW', X_aa, v_xxve, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('iW,LiKB->KLBW', X_aa, v_vxxe, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,B,LxBW->KLBW', X_aa, e_extern, t1_vaea, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,B,LxWB->KLBW', X_aa, e_extern, t1_vaae, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,L,LxBW->KLBW', X_aa, e_val, t1_vaea, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,L,LxWB->KLBW', X_aa, e_val, t1_vaae, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,Wy,LxBy->KLBW', X_aa, h_aa, t1_vaea, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,Wy,LxyB->KLBW', X_aa, h_aa, t1_vaae, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,xy,LyBW->KLBW', X_aa, h_aa, t1_vaea, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,xy,LyWB->KLBW', X_aa, h_aa, t1_vaae, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LBxy,Wy->KLBW', X_aa, v_veaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyxB,Wy->KLBW', X_aa, v_vaae, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('ix,KiLB,Wx->KLBW', X_aa, v_xxve, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('ix,LiKB,Wx->KLBW', X_aa, v_vxxe, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,B,LxBy,Wy->KLBW', X_aa, e_extern, t1_vaea, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,B,LxyB,Wy->KLBW', X_aa, e_extern, t1_vaae, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,L,LxBy,Wy->KLBW', X_aa, e_val, t1_vaea, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,L,LxyB,Wy->KLBW', X_aa, e_val, t1_vaae, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,xy,LyBz,Wz->KLBW', X_aa, h_aa, t1_vaea, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,xy,LyzB,Wz->KLBW', X_aa, h_aa, t1_vaae, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,yz,LxBy,Wz->KLBW', X_aa, h_aa, t1_vaea, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,yz,LxyB,Wz->KLBW', X_aa, h_aa, t1_vaae, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,LxBy,Wyzw,zw->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LxBy,Wzwy,wz->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LxBy,yzwu,Wwzu->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,LxyB,Wyzw,zw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LxyB,Wzwy,wz->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LxyB,yzwu,Wwzu->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,LyBW,xyzw,zw->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyBW,xzwy,wz->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyBz,Wwyx,zw->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,LyBz,Wxwz,yw->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += einsum('Kx,LyBz,Wxyw,zw->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LyBz,Wzwx,yw->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyBz,xwuy,Wuwz->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LyBz,xwzu,Wywu->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyBz,xywu,Wwzu->KLBW', X_aa, t1_vaea, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa -= einsum('Kx,LyWB,xyzw,zw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LyWB,xzwy,wz->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LyzB,Wwyx,zw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LyzB,Wxwz,yw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyzB,Wxyw,zw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/2 * einsum('Kx,LyzB,Wzwx,yw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ca, optimize = einsum_type)
sigma_KLBW_aaaa += 1/6 * einsum('Kx,LyzB,xwuy,Wuwz->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/6 * einsum('Kx,LyzB,xwuy,Wuzw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa += 1/6 * einsum('Kx,LyzB,xwzu,Wyuw->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa -= 1/6 * einsum('Kx,LyzB,xwzu,Wywu->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KLBW_aaaa += 1/2 * einsum('Kx,LyzB,xywu,Wwzu->KLBW', X_aa, t1_vaae, v_aaaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 300.63 seconds.
