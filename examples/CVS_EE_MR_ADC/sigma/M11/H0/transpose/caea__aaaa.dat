
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


-------------------------- Spin-Adapted CVS-EE: Sigma H0 CAEA_CAEA (aaaa) --------------------------


## Generating operators ...


## Right operator terms:
 (   1.00000) X_aaaa(i,x,a,y) cre(a) cre(y) des(x) des(i) 
 (   1.00000) X_abab(i,x,a,y) cre(a) cre(y) des(x) des(i) 
 (   1.00000) X_baab(i,x,a,y) cre(a) cre(y) des(x) des(i) 

## Left operator terms:
 (   1.00000) cre(K) cre(W) des(U) des(C) 

----------------------------------------- Hamiltonian (0) ------------------------------------------

Done ...
----------------------------------------------------------------------------------------------------
## Calculating the commutator [H(0), h(1)] ...

## Calculating [h^(1)\dag, [H(0), h(1)]] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) X_aaaa(K,x,C,U) e(C) cre(W) des(x) 
 (  -1.00000) X_aaaa(K,x,C,U) e(K) cre(W) des(x) 
 (  -1.00000) X_aaaa(K,x,C,U) h(W,w) cre(w) des(x) 
 (   1.00000) X_aaaa(K,x,C,y) h(U,y) cre(W) des(x) 
 (  -2.00000) X_aaaa(K,x,C,U) v(k,W,k,w) cre(w) des(x) 
 (  -2.00000) X_aaaa(K,x,C,U) v(k,W,k,w) cre(w) des(x) 
 (  -2.00000) X_aaaa(K,x,C,U) v(k,W,k,w) cre(w) des(x) 
 (  -2.00000) X_aaaa(K,x,C,U) v(k,W,k,w) cre(w) des(x) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,y) cre(W) des(x) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,y) cre(W) des(x) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,y) cre(W) des(x) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,y) cre(W) des(x) 
 (  -1.00000) X_aaaa(K,x,C,y) e(C) cre(W) cre(y) des(U) des(x) 
 (   1.00000) X_aaaa(K,x,C,y) e(K) cre(W) cre(y) des(U) des(x) 
 (   1.00000) X_aaaa(K,x,C,y) h(U,w) cre(W) cre(y) des(x) des(w) 
 (  -1.00000) X_aaaa(K,x,C,y) h(W,w) cre(y) cre(w) des(U) des(x) 
 (   0.50000) X_aaaa(K,x,C,U) v(W,w,u,v) cre(u) cre(v) des(x) des(w) 
 (   1.00000) X_aaaa(K,x,C,U) v(W,w,u,v) cre(u) cre(v) des(x) des(w) 
 (  -1.00000) X_aaaa(K,x,C,y) v(U,w,y,u) cre(W) cre(w) des(x) des(u) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (  -1.00000) X_aaaa(K,x,C,y) v(U,w,y,u) cre(W) cre(w) des(x) des(u) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (  -2.00000) X_aaaa(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (  -2.00000) X_aaaa(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (  -2.00000) X_aaaa(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (  -2.00000) X_aaaa(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (   0.50000) X_aaaa(K,x,C,y) v(W,y,w,u) cre(w) cre(u) des(U) des(x) 
 (  -1.00000) X_abab(K,x,C,y) e(C) cre(W) cre(y) des(U) des(x) 
 (   1.00000) X_abab(K,x,C,y) e(K) cre(W) cre(y) des(U) des(x) 
 (   1.00000) X_abab(K,x,C,y) h(U,w) cre(W) cre(y) des(x) des(w) 
 (  -1.00000) X_abab(K,x,C,y) h(W,w) cre(y) cre(w) des(U) des(x) 
 (   2.00000) X_abab(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (   2.00000) X_abab(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (  -1.00000) X_abab(K,x,C,y) v(U,w,y,u) cre(W) cre(w) des(x) des(u) 
 (   2.00000) X_abab(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (   2.00000) X_abab(K,x,C,y) v(k,U,k,w) cre(W) cre(y) des(x) des(w) 
 (  -2.00000) X_abab(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (  -2.00000) X_abab(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (  -2.00000) X_abab(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (  -2.00000) X_abab(K,x,C,y) v(k,W,k,w) cre(y) cre(w) des(U) des(x) 
 (   1.00000) X_abab(K,x,C,y) v(W,y,w,u) cre(w) cre(u) des(U) des(x) 
 (   0.50000) X_aaaa(K,x,C,y) v(U,w,u,v) cre(W) cre(y) cre(w) des(x) des(u) des(v) 
 (   1.00000) X_aaaa(K,x,C,y) v(U,w,u,v) cre(W) cre(y) cre(w) des(x) des(u) des(v) 
 (  -0.50000) X_aaaa(K,x,C,y) v(W,w,u,v) cre(y) cre(u) cre(v) des(U) des(x) des(w) 
 (  -1.00000) X_aaaa(K,x,C,y) v(W,w,u,v) cre(y) cre(u) cre(v) des(U) des(x) des(w) 
 (   0.50000) X_abab(K,x,C,y) v(U,w,u,v) cre(W) cre(y) cre(w) des(x) des(u) des(v) 
 (   1.00000) X_abab(K,x,C,y) v(U,w,u,v) cre(W) cre(y) cre(w) des(x) des(u) des(v) 
 (  -0.50000) X_abab(K,x,C,y) v(W,w,u,v) cre(y) cre(u) cre(v) des(U) des(x) des(w) 
 (  -1.00000) X_abab(K,x,C,y) v(W,w,u,v) cre(y) cre(u) cre(v) des(U) des(x) des(w) 

Total terms : 51
SQA automation time :  0.255 seconds
Converting Sigma vector to spin-adapted formulation ...

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 144 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

60 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) X_aaaa(K,x,C,U) e(C) rdm(W,x) 
 (  -0.50000) X_aaaa(K,x,C,U) e(K) rdm(W,x) 
 (   0.16667) X_aaaa(K,x,C,y) e(C) rdm(U,x,W,y) 
 (  -0.16667) X_aaaa(K,x,C,y) e(C) rdm(U,x,y,W) 
 (  -0.16667) X_aaaa(K,x,C,y) e(K) rdm(U,x,W,y) 
 (   0.16667) X_aaaa(K,x,C,y) e(K) rdm(U,x,y,W) 
 (  -0.50000) X_aaaa(K,x,C,U) h(W,w) rdm(x,w) 
 (   0.16667) X_aaaa(K,x,C,y) h(U,w) rdm(W,y,w,x) 
 (  -0.16667) X_aaaa(K,x,C,y) h(U,w) rdm(W,y,x,w) 
 (   0.50000) X_aaaa(K,x,C,y) h(U,y) rdm(W,x) 
 (  -0.16667) X_aaaa(K,x,C,y) h(W,w) rdm(U,x,w,y) 
 (   0.16667) X_aaaa(K,x,C,y) h(W,w) rdm(U,x,y,w) 
 (  -0.50000) X_aaaa(K,x,C,U) v(W,w,u,v) rdm(x,u,w,v) 
 (   1.00000) X_aaaa(K,x,C,U) v(k,W,w,k) rdm(x,w) 
 (  -2.00000) X_aaaa(K,x,C,U) v(k,k,W,w) rdm(x,w) 
 (   1.00000) X_aaaa(K,x,C,U) v(k,W,w,k) rdm(x,w) 
 (  -2.00000) X_aaaa(K,x,C,U) v(k,k,W,w) rdm(x,w) 
 (   0.16667) X_aaaa(K,x,C,y) v(U,w,u,v) rdm(W,y,u,w,x,v) 
 (  -0.16667) X_aaaa(K,x,C,y) v(U,w,u,v) rdm(W,y,u,x,w,v) 
 (   0.16667) X_aaaa(K,x,C,y) v(U,w,u,y) rdm(W,u,w,x) 
 (  -0.16667) X_aaaa(K,x,C,y) v(U,w,u,y) rdm(W,u,x,w) 
 (   0.50000) X_aaaa(K,x,C,y) v(U,y,w,u) rdm(W,w,x,u) 
 (  -0.16667) X_aaaa(K,x,C,y) v(W,w,u,v) rdm(U,x,u,w,y,v) 
 (   0.16667) X_aaaa(K,x,C,y) v(W,w,u,v) rdm(U,x,u,y,w,v) 
 (   0.16667) X_aaaa(K,x,C,y) v(W,w,y,u) rdm(U,x,u,w) 
 (  -0.16667) X_aaaa(K,x,C,y) v(W,w,y,u) rdm(U,x,w,u) 
 (  -0.33333) X_aaaa(K,x,C,y) v(k,U,w,k) rdm(W,y,w,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(k,U,w,k) rdm(W,y,x,w) 
 (  -1.00000) X_aaaa(K,x,C,y) v(k,U,y,k) rdm(W,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(k,W,w,k) rdm(U,x,w,y) 
 (  -0.33333) X_aaaa(K,x,C,y) v(k,W,w,k) rdm(U,x,y,w) 
 (   0.66667) X_aaaa(K,x,C,y) v(k,k,U,w) rdm(W,y,w,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(k,k,U,w) rdm(W,y,x,w) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,k,U,y) rdm(W,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(k,k,W,w) rdm(U,x,w,y) 
 (   0.66667) X_aaaa(K,x,C,y) v(k,k,W,w) rdm(U,x,y,w) 
 (  -0.33333) X_aaaa(K,x,C,y) v(k,U,w,k) rdm(W,y,w,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(k,U,w,k) rdm(W,y,x,w) 
 (  -1.00000) X_aaaa(K,x,C,y) v(k,U,y,k) rdm(W,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(k,W,w,k) rdm(U,x,w,y) 
 (  -0.33333) X_aaaa(K,x,C,y) v(k,W,w,k) rdm(U,x,y,w) 
 (   0.66667) X_aaaa(K,x,C,y) v(k,k,U,w) rdm(W,y,w,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(k,k,U,w) rdm(W,y,x,w) 
 (   2.00000) X_aaaa(K,x,C,y) v(k,k,U,y) rdm(W,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(k,k,W,w) rdm(U,x,w,y) 
 (   0.66667) X_aaaa(K,x,C,y) v(k,k,W,w) rdm(U,x,y,w) 
 (   0.33333) X_abab(K,x,C,y) e(C) rdm(U,x,W,y) 
 (   0.16667) X_abab(K,x,C,y) e(C) rdm(U,x,y,W) 
 (  -0.33333) X_abab(K,x,C,y) e(K) rdm(U,x,W,y) 
 (  -0.16667) X_abab(K,x,C,y) e(K) rdm(U,x,y,W) 
 (   0.33333) X_abab(K,x,C,y) h(U,w) rdm(W,y,w,x) 
 (   0.16667) X_abab(K,x,C,y) h(U,w) rdm(W,y,x,w) 
 (  -0.33333) X_abab(K,x,C,y) h(W,w) rdm(U,x,w,y) 
 (  -0.16667) X_abab(K,x,C,y) h(W,w) rdm(U,x,y,w) 
 (  -0.16667) X_abab(K,x,C,y) v(U,w,u,v) rdm(W,y,u,v,w,x) 
 (  -0.16667) X_abab(K,x,C,y) v(U,w,u,v) rdm(W,y,u,v,x,w) 
 (  -0.16667) X_abab(K,x,C,y) v(U,w,u,v) rdm(W,y,u,w,v,x) 
 (   0.16667) X_abab(K,x,C,y) v(U,w,u,v) rdm(W,y,u,w,x,v) 
 (  -0.16667) X_abab(K,x,C,y) v(U,w,u,v) rdm(W,y,u,x,v,w) 
 (   0.33333) X_abab(K,x,C,y) v(U,w,u,y) rdm(W,u,w,x) 
 (   0.16667) X_abab(K,x,C,y) v(U,w,u,y) rdm(W,u,x,w) 
 (   0.16667) X_abab(K,x,C,y) v(W,w,u,v) rdm(U,x,u,v,w,y) 
 (   0.16667) X_abab(K,x,C,y) v(W,w,u,v) rdm(U,x,u,v,y,w) 
 (   0.16667) X_abab(K,x,C,y) v(W,w,u,v) rdm(U,x,u,w,v,y) 
 (  -0.16667) X_abab(K,x,C,y) v(W,w,u,v) rdm(U,x,u,w,y,v) 
 (   0.16667) X_abab(K,x,C,y) v(W,w,u,v) rdm(U,x,u,y,v,w) 
 (  -0.16667) X_abab(K,x,C,y) v(W,w,y,u) rdm(U,x,u,w) 
 (  -0.33333) X_abab(K,x,C,y) v(W,w,y,u) rdm(U,x,w,u) 
 (  -0.66667) X_abab(K,x,C,y) v(k,U,w,k) rdm(W,y,w,x) 
 (  -0.33333) X_abab(K,x,C,y) v(k,U,w,k) rdm(W,y,x,w) 
 (   0.66667) X_abab(K,x,C,y) v(k,W,w,k) rdm(U,x,w,y) 
 (   0.33333) X_abab(K,x,C,y) v(k,W,w,k) rdm(U,x,y,w) 
 (   1.33333) X_abab(K,x,C,y) v(k,k,U,w) rdm(W,y,w,x) 
 (   0.66667) X_abab(K,x,C,y) v(k,k,U,w) rdm(W,y,x,w) 
 (  -1.33333) X_abab(K,x,C,y) v(k,k,W,w) rdm(U,x,w,y) 
 (  -0.66667) X_abab(K,x,C,y) v(k,k,W,w) rdm(U,x,y,w) 
 (  -0.66667) X_abab(K,x,C,y) v(k,U,w,k) rdm(W,y,w,x) 
 (  -0.33333) X_abab(K,x,C,y) v(k,U,w,k) rdm(W,y,x,w) 
 (   0.66667) X_abab(K,x,C,y) v(k,W,w,k) rdm(U,x,w,y) 
 (   0.33333) X_abab(K,x,C,y) v(k,W,w,k) rdm(U,x,y,w) 
 (   1.33333) X_abab(K,x,C,y) v(k,k,U,w) rdm(W,y,w,x) 
 (   0.66667) X_abab(K,x,C,y) v(k,k,U,w) rdm(W,y,x,w) 
 (  -1.33333) X_abab(K,x,C,y) v(k,k,W,w) rdm(U,x,w,y) 
 (  -0.66667) X_abab(K,x,C,y) v(k,k,W,w) rdm(U,x,y,w) 

Total spin-integrated terms: 51
Total spin-adapted terms: 84
Spin-adaptation automation time :  6.072 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

40 terms removed:
 (   1.00000) X_aaaa(K,x,C,U) v(i,W,y,i) rdm(x,y) 
 (  -2.00000) X_aaaa(K,x,C,U) v(i,i,W,y) rdm(x,y) 
 (   1.00000) X_aaaa(K,x,C,U) v(i,W,y,i) rdm(x,y) 
 (  -2.00000) X_aaaa(K,x,C,U) v(i,i,W,y) rdm(x,y) 
 (  -0.33333) X_aaaa(K,x,C,y) v(i,U,z,i) rdm(W,y,z,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(i,U,z,i) rdm(W,y,x,z) 
 (  -1.00000) X_aaaa(K,x,C,y) v(i,U,y,i) rdm(W,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(i,W,z,i) rdm(U,x,z,y) 
 (  -0.33333) X_aaaa(K,x,C,y) v(i,W,z,i) rdm(U,x,y,z) 
 (   0.66667) X_aaaa(K,x,C,y) v(i,i,U,z) rdm(W,y,z,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(i,i,U,z) rdm(W,y,x,z) 
 (   2.00000) X_aaaa(K,x,C,y) v(i,i,U,y) rdm(W,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(i,i,W,z) rdm(U,x,z,y) 
 (   0.66667) X_aaaa(K,x,C,y) v(i,i,W,z) rdm(U,x,y,z) 
 (  -0.33333) X_aaaa(K,x,C,y) v(i,U,z,i) rdm(W,y,z,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(i,U,z,i) rdm(W,y,x,z) 
 (  -1.00000) X_aaaa(K,x,C,y) v(i,U,y,i) rdm(W,x) 
 (   0.33333) X_aaaa(K,x,C,y) v(i,W,z,i) rdm(U,x,z,y) 
 (  -0.33333) X_aaaa(K,x,C,y) v(i,W,z,i) rdm(U,x,y,z) 
 (   0.66667) X_aaaa(K,x,C,y) v(i,i,U,z) rdm(W,y,z,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(i,i,U,z) rdm(W,y,x,z) 
 (   2.00000) X_aaaa(K,x,C,y) v(i,i,U,y) rdm(W,x) 
 (  -0.66667) X_aaaa(K,x,C,y) v(i,i,W,z) rdm(U,x,z,y) 
 (   0.66667) X_aaaa(K,x,C,y) v(i,i,W,z) rdm(U,x,y,z) 
 (  -0.66667) X_abab(K,x,C,y) v(i,U,z,i) rdm(W,y,z,x) 
 (  -0.33333) X_abab(K,x,C,y) v(i,U,z,i) rdm(W,y,x,z) 
 (   0.66667) X_abab(K,x,C,y) v(i,W,z,i) rdm(U,x,z,y) 
 (   0.33333) X_abab(K,x,C,y) v(i,W,z,i) rdm(U,x,y,z) 
 (   1.33333) X_abab(K,x,C,y) v(i,i,U,z) rdm(W,y,z,x) 
 (   0.66667) X_abab(K,x,C,y) v(i,i,U,z) rdm(W,y,x,z) 
 (  -1.33333) X_abab(K,x,C,y) v(i,i,W,z) rdm(U,x,z,y) 
 (  -0.66667) X_abab(K,x,C,y) v(i,i,W,z) rdm(U,x,y,z) 
 (  -0.66667) X_abab(K,x,C,y) v(i,U,z,i) rdm(W,y,z,x) 
 (  -0.33333) X_abab(K,x,C,y) v(i,U,z,i) rdm(W,y,x,z) 
 (   0.66667) X_abab(K,x,C,y) v(i,W,z,i) rdm(U,x,z,y) 
 (   0.33333) X_abab(K,x,C,y) v(i,W,z,i) rdm(U,x,y,z) 
 (   1.33333) X_abab(K,x,C,y) v(i,i,U,z) rdm(W,y,z,x) 
 (   0.66667) X_abab(K,x,C,y) v(i,i,U,z) rdm(W,y,x,z) 
 (  -1.33333) X_abab(K,x,C,y) v(i,i,W,z) rdm(U,x,z,y) 
 (  -0.66667) X_abab(K,x,C,y) v(i,i,W,z) rdm(U,x,y,z) 
----------------------------------------------------------------------------------------------------
Remaining terms: 44


--------------------------------------- genEinsum equations ----------------------------------------

sigma_KWCU_aaaa  = 1/2 * einsum('KxCU,C,Wx->KWCU', X_aaaa, e_extern, rdm_ca, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/2 * einsum('KxCU,K,Wx->KWCU', X_aaaa, e_cvs, rdm_ca, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,C,UxWy->KWCU', X_aaaa, e_extern, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,C,UxyW->KWCU', X_aaaa, e_extern, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,K,UxWy->KWCU', X_aaaa, e_cvs, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,K,UxyW->KWCU', X_aaaa, e_cvs, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/2 * einsum('KxCU,Wy,xy->KWCU', X_aaaa, h_aa, rdm_ca, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Uz,Wyzx->KWCU', X_aaaa, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uz,Wyxz->KWCU', X_aaaa, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/2 * einsum('KxCy,Uy,Wx->KWCU', X_aaaa, h_aa, rdm_ca, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Wz,Uxzy->KWCU', X_aaaa, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wz,Uxyz->KWCU', X_aaaa, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/2 * einsum('KxCU,Wyzw,xzyw->KWCU', X_aaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Uzwu,Wywzxu->KWCU', X_aaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uzwu,Wywxzu->KWCU', X_aaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Uzwy,Wwzx->KWCU', X_aaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uzwy,Wwxz->KWCU', X_aaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/2 * einsum('KxCy,Uyzw,Wzxw->KWCU', X_aaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Wzwu,Uxwzyu->KWCU', X_aaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wzwu,Uxwyzu->KWCU', X_aaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wzyw,Uxwz->KWCU', X_aaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Wzyw,Uxzw->KWCU', X_aaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/3 * einsum('KxCy,C,UxWy->KWCU', X_abab, e_extern, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,C,UxyW->KWCU', X_abab, e_extern, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/3 * einsum('KxCy,K,UxWy->KWCU', X_abab, e_cvs, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,K,UxyW->KWCU', X_abab, e_cvs, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/3 * einsum('KxCy,Uz,Wyzx->KWCU', X_abab, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Uz,Wyxz->KWCU', X_abab, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/3 * einsum('KxCy,Wz,Uxzy->KWCU', X_abab, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Wz,Uxyz->KWCU', X_abab, h_aa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uzwu,Wywuzx->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uzwu,Wywuxz->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uzwu,Wywzux->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Uzwu,Wywzxu->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Uzwu,Wywxuz->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/3 * einsum('KxCy,Uzwy,Wwzx->KWCU', X_abab, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Uzwy,Wwxz->KWCU', X_abab, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wzwu,Uxwuzy->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wzwu,Uxwuyz->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wzwu,Uxwzuy->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Wzwu,Uxwzyu->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa += 1/6 * einsum('KxCy,Wzwu,Uxwyuz->KWCU', X_abab, v_aaaa, rdm_cccaaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/6 * einsum('KxCy,Wzyw,Uxwz->KWCU', X_abab, v_aaaa, rdm_ccaa, optimize = einsum_type)
sigma_KWCU_aaaa -= 1/3 * einsum('KxCy,Wzyw,Uxzw->KWCU', X_abab, v_aaaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 7.61 seconds.
