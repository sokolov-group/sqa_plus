
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


--------------------------------- Spin-Adapted CVS-EE: TY Q1 Q_CA ----------------------------------


## Generating operators ...


--------------------------------------------- CC (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,x) 
 (   1.00000) Y_KW__aa(R,P,x) t1(Q,y) cre(x) des(y) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (  -0.50000) Y_KW__aa(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 

Total terms : 6
SQA automation time :  0.019 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 6 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 11 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,x) 
 (   0.50000) Y_KW__aa(R,P,x) t1(Q,y) rdm(x,y) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,x,z) rdm(y,z) 
 (   0.50000) Y_KW__aa(R,P,x) t1(Q,y,z,w) rdm(x,y,z,w) 
 (   0.50000) Y_KW__aa(R,P,x) t1(Q,y,z,x) rdm(y,z) 

Total spin-integrated terms: 6
Total spin-adapted terms: 5
Spin-adaptation automation time :  0.033 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 5


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_c:f_c] =- einsum('RPx,Qx->RPQ', Y_KW__aa, t1_xa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPx,Qy,xy->RPQ', Y_KW__aa, t1_xa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= einsum('RPx,Qyxz,yz->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPx,Qyzw,xyzw->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPx,Qyzx,yz->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CC (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,x) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (   1.00000) Y_KW__bb(R,P,x) t1(Q,y) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 
 (  -0.50000) Y_KW__bb(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 

Total terms : 6
SQA automation time :  0.019 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 6 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 11 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,x) 
 (   0.50000) Y_KW__bb(R,P,x) t1(Q,y) rdm(x,y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,x,z) rdm(y,z) 
 (   0.50000) Y_KW__bb(R,P,x) t1(Q,y,z,w) rdm(x,y,z,w) 
 (   0.50000) Y_KW__bb(R,P,x) t1(Q,y,z,x) rdm(y,z) 

Total spin-integrated terms: 6
Total spin-adapted terms: 5
Spin-adaptation automation time :  0.033 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 5


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_c:f_c] =- einsum('RPx,Qx->RPQ', Y_KW__bb, t1_xa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPx,Qy,xy->RPQ', Y_KW__bb, t1_xa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= einsum('RPx,Qyxz,yz->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPx,Qyzw,xyzw->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPx,Qyzx,yz->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VV (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.010 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- VV (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.010 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- AA (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,i,Q) t1(i,P) 
 (   1.00000) Y_KW__aa(R,i,Q) t1(i,x,P,y) cre(x) des(y) 
 (   1.00000) Y_KW__aa(R,i,Q) t1(i,x,P,y) cre(x) des(y) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,P) cre(x) des(Q) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,Q,x,y) cre(P) des(y) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,y,P,x) cre(y) des(Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,Q,x,y) cre(P) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,y,P,x) cre(y) des(Q) 
 (   0.50000) Y_KW__aa(R,i,x) t1(i,Q,y,z) cre(P) cre(x) des(y) des(z) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,y,P,z) cre(x) cre(y) des(Q) des(z) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,y,P,z) cre(x) cre(y) des(Q) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,Q,y,z) cre(P) cre(x) des(y) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,y,P,z) cre(x) cre(y) des(Q) des(z) 

Total terms : 13
SQA automation time :  0.052 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 13 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 25 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,Q) t1(i,P) 
 (   1.00000) Y_KW__aa(R,i,Q) t1(i,x,P,y) rdm(y,x) 
 (  -0.50000) Y_KW__aa(R,i,Q) t1(i,x,y,P) rdm(y,x) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,P) rdm(Q,x) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,Q,x,y) rdm(P,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(i,Q,y,x) rdm(P,y) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(i,Q,y,z) rdm(P,x,y,z) 
 (   0.16667) Y_KW__aa(R,i,x) t1(i,Q,y,z) rdm(P,x,z,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,y,P,x) rdm(Q,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,y,P,z) rdm(Q,z,x,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(i,y,x,P) rdm(Q,y) 
 (   0.16667) Y_KW__aa(R,i,x) t1(i,y,z,P) rdm(Q,z,x,y) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(i,y,z,P) rdm(Q,z,y,x) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,Q,x,y) rdm(P,y) 
 (   0.16667) Y_KW__bb(R,i,x) t1(i,Q,y,z) rdm(P,x,y,z) 
 (   0.33333) Y_KW__bb(R,i,x) t1(i,Q,y,z) rdm(P,x,z,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(i,y,x,P) rdm(Q,y) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(i,y,z,P) rdm(Q,z,x,y) 
 (  -0.33333) Y_KW__bb(R,i,x) t1(i,y,z,P) rdm(Q,z,y,x) 

Total spin-integrated terms: 13
Total spin-adapted terms: 19
Spin-adaptation automation time :  0.084 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 19


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_a:f_a]  = einsum('RiQ,iP->RPQ', Y_KW__aa, t1_xa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += einsum('RiQ,ixPy,yx->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('RiQ,ixyP,yx->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iP,Qx->RPQ', Y_KW__aa, t1_xa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iQxy,Py->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rix,iQyx,Py->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rix,iQyz,Pxyz->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rix,iQyz,Pxzy->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iyPx,Qy->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iyPz,Qzxy->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rix,iyxP,Qy->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rix,iyzP,Qzxy->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rix,iyzP,Qzyx->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iQxy,Py->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rix,iQyz,Pxyz->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/3 * einsum('Rix,iQyz,Pxzy->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rix,iyxP,Qy->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rix,iyzP,Qzxy->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/3 * einsum('Rix,iyzP,Qzyx->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- AA (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__bb(R,i,Q) t1(i,P) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,Q,x,y) cre(P) des(y) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,y,P,x) cre(y) des(Q) 
 (   1.00000) Y_KW__bb(R,i,Q) t1(i,x,P,y) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,Q) t1(i,x,P,y) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,P) cre(x) des(Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,Q,x,y) cre(P) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,y,P,x) cre(y) des(Q) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,Q,y,z) cre(P) cre(x) des(y) des(z) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,y,P,z) cre(x) cre(y) des(Q) des(z) 
 (   0.50000) Y_KW__bb(R,i,x) t1(i,Q,y,z) cre(P) cre(x) des(y) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,y,P,z) cre(x) cre(y) des(Q) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,y,P,z) cre(x) cre(y) des(Q) des(z) 

Total terms : 13
SQA automation time :  0.052 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 13 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 25 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__bb(R,i,Q) t1(i,P) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,Q,x,y) rdm(P,y) 
 (   0.16667) Y_KW__aa(R,i,x) t1(i,Q,y,z) rdm(P,x,y,z) 
 (   0.33333) Y_KW__aa(R,i,x) t1(i,Q,y,z) rdm(P,x,z,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(i,y,x,P) rdm(Q,y) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(i,y,z,P) rdm(Q,z,x,y) 
 (  -0.33333) Y_KW__aa(R,i,x) t1(i,y,z,P) rdm(Q,z,y,x) 
 (   1.00000) Y_KW__bb(R,i,Q) t1(i,x,P,y) rdm(y,x) 
 (  -0.50000) Y_KW__bb(R,i,Q) t1(i,x,y,P) rdm(y,x) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,P) rdm(Q,x) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,Q,x,y) rdm(P,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(i,Q,y,x) rdm(P,y) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(i,Q,y,z) rdm(P,x,y,z) 
 (   0.16667) Y_KW__bb(R,i,x) t1(i,Q,y,z) rdm(P,x,z,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,y,P,x) rdm(Q,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,y,P,z) rdm(Q,z,x,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(i,y,x,P) rdm(Q,y) 
 (   0.16667) Y_KW__bb(R,i,x) t1(i,y,z,P) rdm(Q,z,x,y) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(i,y,z,P) rdm(Q,z,y,x) 

Total spin-integrated terms: 13
Total spin-adapted terms: 19
Spin-adaptation automation time :  0.083 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 19


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_a:f_a]  = einsum('RiQ,iP->RPQ', Y_KW__bb, t1_xa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iQxy,Py->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rix,iQyz,Pxyz->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/3 * einsum('Rix,iQyz,Pxzy->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rix,iyxP,Qy->RPQ', Y_KW__aa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rix,iyzP,Qzxy->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/3 * einsum('Rix,iyzP,Qzyx->RPQ', Y_KW__aa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += einsum('RiQ,ixPy,yx->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('RiQ,ixyP,yx->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iP,Qx->RPQ', Y_KW__bb, t1_xa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iQxy,Py->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rix,iQyx,Py->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rix,iQyz,Pxyz->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rix,iQyz,Pxzy->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iyPx,Qy->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rix,iyPz,Qzxy->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rix,iyxP,Qy->RPQ', Y_KW__bb, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rix,iyzP,Qzxy->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rix,iyzP,Qzyx->RPQ', Y_KW__bb, t1_xaaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- EE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.009 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- EE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.004 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- CV (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,x) 
 (   1.00000) Y_KW__aa(R,P,x) t1(Q,y) cre(x) des(y) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (  -0.50000) Y_KW__aa(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 

Total terms : 6
SQA automation time :  0.032 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 6 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 11 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,x) 
 (   0.50000) Y_KW__aa(R,P,x) t1(Q,y) rdm(x,y) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(Q,y,x,z) rdm(y,z) 
 (   0.50000) Y_KW__aa(R,P,x) t1(Q,y,z,w) rdm(x,y,z,w) 
 (   0.50000) Y_KW__aa(R,P,x) t1(Q,y,z,x) rdm(y,z) 

Total spin-integrated terms: 6
Total spin-adapted terms: 5
Spin-adaptation automation time :  0.035 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 5


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_v:f_v] =- einsum('RPx,Qx->RPQ', Y_KW__aa, t1_va, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPx,Qy,xy->RPQ', Y_KW__aa, t1_va, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= einsum('RPx,Qyxz,yz->RPQ', Y_KW__aa, t1_vaaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPx,Qyzw,xyzw->RPQ', Y_KW__aa, t1_vaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPx,Qyzx,yz->RPQ', Y_KW__aa, t1_vaaa, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CV (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,x) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (   1.00000) Y_KW__bb(R,P,x) t1(Q,y) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,x,z) cre(y) des(z) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 
 (  -0.50000) Y_KW__bb(R,P,x) t1(Q,y,z,w) cre(x) cre(y) des(z) des(w) 

Total terms : 6
SQA automation time :  0.031 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 6 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 11 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,x) 
 (   0.50000) Y_KW__bb(R,P,x) t1(Q,y) rdm(x,y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(Q,y,x,z) rdm(y,z) 
 (   0.50000) Y_KW__bb(R,P,x) t1(Q,y,z,w) rdm(x,y,z,w) 
 (   0.50000) Y_KW__bb(R,P,x) t1(Q,y,z,x) rdm(y,z) 

Total spin-integrated terms: 6
Total spin-adapted terms: 5
Spin-adaptation automation time :  0.034 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 5


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_v:f_v] =- einsum('RPx,Qx->RPQ', Y_KW__bb, t1_va, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPx,Qy,xy->RPQ', Y_KW__bb, t1_va, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= einsum('RPx,Qyxz,yz->RPQ', Y_KW__bb, t1_vaaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPx,Qyzw,xyzw->RPQ', Y_KW__bb, t1_vaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPx,Qyzx,yz->RPQ', Y_KW__bb, t1_vaaa, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CA (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 

Total terms : 8
SQA automation time :  0.066 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 15 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

2 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(P,i,x,y) rdm(Q,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.16667) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.33333) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (   0.16667) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 13
Spin-adaptation automation time :  0.044 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 13


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_a:f_a]  = einsum('Rix,PiQx->RPQ', Y_KW__aa, t1_xxaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= einsum('Rix,PixQ->RPQ', Y_KW__aa, t1_xxaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += einsum('Rix,PiQx->RPQ', Y_KW__bb, t1_xxaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__aa, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rix,Pixy,Qy->RPQ', Y_KW__aa, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__aa, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__aa, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__aa, t1_xxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__aa, t1_xxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__bb, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__bb, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/3 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__bb, t1_xxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__bb, t1_xxaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CA (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 

Total terms : 8
SQA automation time :  0.069 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 15 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

2 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.33333) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (   0.16667) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(P,i,x,y) rdm(Q,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.16667) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 13
Spin-adaptation automation time :  0.044 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 13


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_a:f_a]  = einsum('Rix,PiQx->RPQ', Y_KW__aa, t1_xxaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += einsum('Rix,PiQx->RPQ', Y_KW__bb, t1_xxaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= einsum('Rix,PixQ->RPQ', Y_KW__bb, t1_xxaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__aa, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__aa, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/3 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__aa, t1_xxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__aa, t1_xxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__bb, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rix,Pixy,Qy->RPQ', Y_KW__bb, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__bb, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__bb, t1_xxaa, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__bb, t1_xxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__bb, t1_xxaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VA (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 

Total terms : 8
SQA automation time :  0.063 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 15 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

2 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(P,i,x,y) rdm(Q,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.16667) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.33333) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (   0.16667) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 13
Spin-adaptation automation time :  0.044 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 13


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_a:f_a]  = einsum('Rix,PiQx->RPQ', Y_KW__aa, t1_vxaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= einsum('Rix,PixQ->RPQ', Y_KW__aa, t1_vxaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += einsum('Rix,PiQx->RPQ', Y_KW__bb, t1_vxaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__aa, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rix,Pixy,Qy->RPQ', Y_KW__aa, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__aa, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__aa, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__aa, t1_vxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__aa, t1_vxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__bb, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__bb, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/3 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__bb, t1_vxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__bb, t1_vxaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VA (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,x,y) cre(Q) des(y) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,y,z) cre(Q) cre(x) des(y) des(z) 

Total terms : 8
SQA automation time :  0.063 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 15 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

2 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,Q,x) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,Q,x) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.33333) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (   0.16667) Y_KW__aa(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,Q,y) rdm(x,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(P,i,x,y) rdm(Q,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(P,i,y,x) rdm(Q,y) 
 (   0.16667) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,y,z) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(P,i,y,z) rdm(Q,x,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 13
Spin-adaptation automation time :  0.044 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 13


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_a:f_a]  = einsum('Rix,PiQx->RPQ', Y_KW__aa, t1_vxaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += einsum('Rix,PiQx->RPQ', Y_KW__bb, t1_vxaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= einsum('Rix,PixQ->RPQ', Y_KW__bb, t1_vxaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__aa, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__aa, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/3 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__aa, t1_vxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__aa, t1_vxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,PiQy,xy->RPQ', Y_KW__bb, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rix,Pixy,Qy->RPQ', Y_KW__bb, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__bb, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rix,Piyx,Qy->RPQ', Y_KW__bb, t1_vxaa, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rix,Piyz,Qxyz->RPQ', Y_KW__bb, t1_vxaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rix,Piyz,Qxzy->RPQ', Y_KW__bb, t1_vxaa, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,P,x) t1(x,Q) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(y,Q) cre(x) des(y) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(x,y,z,Q) cre(z) des(y) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(x,y,z,Q) cre(z) des(y) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,y,Q) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,y,Q) cre(x) des(y) 
 (  -0.50000) Y_KW__aa(R,P,x) t1(y,z,w,Q) cre(x) cre(w) des(y) des(z) 
 (  -1.00000) Y_KW__aa(R,P,x) t1(y,z,w,Q) cre(x) cre(w) des(y) des(z) 

Total terms : 10
SQA automation time :  0.058 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 10 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 17 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,P,x) t1(x,Q) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,P,x,Q) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,P,x,Q) 
 (  -0.50000) Y_KW__aa(R,P,x) t1(x,y,z,Q) rdm(z,y) 
 (  -0.50000) Y_KW__aa(R,P,x) t1(y,Q) rdm(x,y) 
 (   1.00000) Y_KW__aa(R,P,x) t1(y,x,z,Q) rdm(z,y) 
 (  -0.50000) Y_KW__aa(R,P,x) t1(y,z,w,Q) rdm(x,w,z,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,P,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,P,y,Q) rdm(x,y) 

Total spin-integrated terms: 10
Total spin-adapted terms: 11
Spin-adaptation automation time :  0.045 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 11


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_e:f_e]  = einsum('RPx,xQ->RPQ', Y_KW__aa, t1_ae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= einsum('Rix,PixQ->RPQ', Y_KW__aa, t1_xxae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += einsum('Rix,iPxQ->RPQ', Y_KW__aa, t1_xxae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += einsum('Rix,iPxQ->RPQ', Y_KW__bb, t1_xxae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('RPx,xyzQ,zy->RPQ', Y_KW__aa, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('RPx,yQ,xy->RPQ', Y_KW__aa, t1_ae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += einsum('RPx,yxzQ,zy->RPQ', Y_KW__aa, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('RPx,yzwQ,xwzy->RPQ', Y_KW__aa, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__aa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__aa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__bb, t1_xxae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__bb(R,P,x) t1(x,Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,y,Q) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(y,Q) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(x,y,z,Q) cre(z) des(y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(x,y,z,Q) cre(z) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,y,Q) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,P,x) t1(y,z,w,Q) cre(x) cre(w) des(y) des(z) 
 (  -0.50000) Y_KW__bb(R,P,x) t1(y,z,w,Q) cre(x) cre(w) des(y) des(z) 

Total terms : 10
SQA automation time :  0.051 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 10 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 17 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(i,P,x,Q) 
 (   1.00000) Y_KW__bb(R,P,x) t1(x,Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,P,x,Q) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,P,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,P,x) t1(x,y,z,Q) rdm(z,y) 
 (  -0.50000) Y_KW__bb(R,P,x) t1(y,Q) rdm(x,y) 
 (   1.00000) Y_KW__bb(R,P,x) t1(y,x,z,Q) rdm(z,y) 
 (  -0.50000) Y_KW__bb(R,P,x) t1(y,z,w,Q) rdm(x,w,z,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,P,y,Q) rdm(x,y) 

Total spin-integrated terms: 10
Total spin-adapted terms: 11
Spin-adaptation automation time :  0.044 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 11


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_e:f_e]  = einsum('Rix,iPxQ->RPQ', Y_KW__aa, t1_xxae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += einsum('RPx,xQ->RPQ', Y_KW__bb, t1_ae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= einsum('Rix,PixQ->RPQ', Y_KW__bb, t1_xxae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += einsum('Rix,iPxQ->RPQ', Y_KW__bb, t1_xxae, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__aa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('RPx,xyzQ,zy->RPQ', Y_KW__bb, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('RPx,yQ,xy->RPQ', Y_KW__bb, t1_ae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += einsum('RPx,yxzQ,zy->RPQ', Y_KW__bb, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('RPx,yzwQ,xwzy->RPQ', Y_KW__bb, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__bb, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__bb, t1_xxae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,y,Q) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,y,Q) cre(x) des(y) 

Total terms : 4
SQA automation time :  0.034 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 4 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 6 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,P,x,Q) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,P,x,Q) 
 (   0.50000) Y_KW__aa(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,P,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,P,y,Q) rdm(x,y) 

Total spin-integrated terms: 4
Total spin-adapted terms: 6
Spin-adaptation automation time :  0.009 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 6


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_e:f_e] =- einsum('Rix,PixQ->RPQ', Y_KW__aa, t1_vxae, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += einsum('Rix,iPxQ->RPQ', Y_KW__aa, t1_xvae, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += einsum('Rix,iPxQ->RPQ', Y_KW__bb, t1_xvae, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__aa, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__aa, t1_xvae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__bb, t1_xvae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KW__aa(R,i,x) t1(P,i,x,Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__aa(R,i,x) t1(P,i,y,Q) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,x) t1(P,i,y,Q) cre(x) des(y) 

Total terms : 4
SQA automation time :  0.033 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 4 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 6 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,x) t1(i,P,x,Q) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(P,i,x,Q) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,P,x,Q) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,P,y,Q) rdm(x,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(P,i,y,Q) rdm(x,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,P,y,Q) rdm(x,y) 

Total spin-integrated terms: 4
Total spin-adapted terms: 6
Spin-adaptation automation time :  0.009 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 6


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_e:f_e]  = einsum('Rix,iPxQ->RPQ', Y_KW__aa, t1_xvae, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= einsum('Rix,PixQ->RPQ', Y_KW__bb, t1_vxae, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += einsum('Rix,iPxQ->RPQ', Y_KW__bb, t1_xvae, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__aa, t1_xvae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += 1/2 * einsum('Rix,PiyQ,xy->RPQ', Y_KW__bb, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= 1/2 * einsum('Rix,iPyQ,xy->RPQ', Y_KW__bb, t1_xvae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- AE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__aa(R,i,P) t1(i,Q) 
 (   1.00000) Y_KW__aa(R,i,P) t1(i,x,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__aa(R,i,P) t1(i,x,Q,y) cre(x) des(y) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,Q) cre(x) des(P) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,y,Q,x) cre(y) des(P) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,y,Q,x) cre(y) des(P) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,y,Q,z) cre(x) cre(y) des(P) des(z) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,y,Q,z) cre(x) cre(y) des(P) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,y,Q,z) cre(x) cre(y) des(P) des(z) 

Total terms : 9
SQA automation time :  0.046 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 9 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 16 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

4 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__aa(R,i,P) t1(i,Q) 
 (   1.00000) Y_KW__aa(R,i,P) t1(i,x,Q,y) rdm(y,x) 
 (  -0.50000) Y_KW__aa(R,i,P) t1(i,x,y,Q) rdm(y,x) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,Q) rdm(P,x) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,y,Q,x) rdm(P,y) 
 (  -0.50000) Y_KW__aa(R,i,x) t1(i,y,Q,z) rdm(P,z,x,y) 
 (   0.50000) Y_KW__aa(R,i,x) t1(i,y,x,Q) rdm(P,y) 
 (   0.16667) Y_KW__aa(R,i,x) t1(i,y,z,Q) rdm(P,z,x,y) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(i,y,z,Q) rdm(P,z,y,x) 
 (   0.50000) Y_KW__bb(R,i,x) t1(i,y,x,Q) rdm(P,y) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(i,y,z,Q) rdm(P,z,x,y) 
 (  -0.33333) Y_KW__bb(R,i,x) t1(i,y,z,Q) rdm(P,z,y,x) 

Total spin-integrated terms: 9
Total spin-adapted terms: 12
Spin-adaptation automation time :  0.052 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 12


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_e:f_e]  = einsum('RiP,iQ->RPQ', Y_KW__aa, t1_xe, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += einsum('RiP,ixQy,yx->RPQ', Y_KW__aa, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('RiP,ixyQ,yx->RPQ', Y_KW__aa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('Rix,iQ,Px->RPQ', Y_KW__aa, t1_xe, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('Rix,iyQx,Py->RPQ', Y_KW__aa, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('Rix,iyQz,Pzxy->RPQ', Y_KW__aa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('Rix,iyxQ,Py->RPQ', Y_KW__aa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rix,iyzQ,Pzxy->RPQ', Y_KW__aa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rix,iyzQ,Pzyx->RPQ', Y_KW__aa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('Rix,iyxQ,Py->RPQ', Y_KW__bb, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rix,iyzQ,Pzxy->RPQ', Y_KW__bb, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/3 * einsum('Rix,iyzQ,Pzyx->RPQ', Y_KW__bb, t1_xaae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- AE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KW__bb(R,i,P) t1(i,Q) 
 (  -1.00000) Y_KW__aa(R,i,x) t1(i,y,Q,x) cre(y) des(P) 
 (   1.00000) Y_KW__bb(R,i,P) t1(i,x,Q,y) cre(x) des(y) 
 (   1.00000) Y_KW__bb(R,i,P) t1(i,x,Q,y) cre(x) des(y) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,Q) cre(x) des(P) 
 (  -1.00000) Y_KW__bb(R,i,x) t1(i,y,Q,x) cre(y) des(P) 
 (   1.00000) Y_KW__aa(R,i,x) t1(i,y,Q,z) cre(x) cre(y) des(P) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,y,Q,z) cre(x) cre(y) des(P) des(z) 
 (   1.00000) Y_KW__bb(R,i,x) t1(i,y,Q,z) cre(x) cre(y) des(P) des(z) 

Total terms : 9
SQA automation time :  0.046 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 9 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 16 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

4 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) Y_KW__bb(R,i,P) t1(i,Q) 
 (   0.50000) Y_KW__aa(R,i,x) t1(i,y,x,Q) rdm(P,y) 
 (  -0.16667) Y_KW__aa(R,i,x) t1(i,y,z,Q) rdm(P,z,x,y) 
 (  -0.33333) Y_KW__aa(R,i,x) t1(i,y,z,Q) rdm(P,z,y,x) 
 (   1.00000) Y_KW__bb(R,i,P) t1(i,x,Q,y) rdm(y,x) 
 (  -0.50000) Y_KW__bb(R,i,P) t1(i,x,y,Q) rdm(y,x) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,Q) rdm(P,x) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,y,Q,x) rdm(P,y) 
 (  -0.50000) Y_KW__bb(R,i,x) t1(i,y,Q,z) rdm(P,z,x,y) 
 (   0.50000) Y_KW__bb(R,i,x) t1(i,y,x,Q) rdm(P,y) 
 (   0.16667) Y_KW__bb(R,i,x) t1(i,y,z,Q) rdm(P,z,x,y) 
 (  -0.16667) Y_KW__bb(R,i,x) t1(i,y,z,Q) rdm(P,z,y,x) 

Total spin-integrated terms: 9
Total spin-adapted terms: 12
Spin-adaptation automation time :  0.052 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 12


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_e:f_e]  = einsum('RiP,iQ->RPQ', Y_KW__bb, t1_xe, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('Rix,iyxQ,Py->RPQ', Y_KW__aa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rix,iyzQ,Pzxy->RPQ', Y_KW__aa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/3 * einsum('Rix,iyzQ,Pzyx->RPQ', Y_KW__aa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += einsum('RiP,ixQy,yx->RPQ', Y_KW__bb, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('RiP,ixyQ,yx->RPQ', Y_KW__bb, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('Rix,iQ,Px->RPQ', Y_KW__bb, t1_xe, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('Rix,iyQx,Py->RPQ', Y_KW__bb, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('Rix,iyQz,Pzxy->RPQ', Y_KW__bb, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('Rix,iyxQ,Py->RPQ', Y_KW__bb, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rix,iyzQ,Pzxy->RPQ', Y_KW__bb, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rix,iyzQ,Pzyx->RPQ', Y_KW__bb, t1_xaae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 41.33 seconds.
