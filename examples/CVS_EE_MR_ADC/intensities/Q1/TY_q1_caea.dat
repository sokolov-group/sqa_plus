
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


-------------------------------- Spin-Adapted CVS-EE: TY Q1 Q_CAEA ---------------------------------


## Generating operators ...


--------------------------------------------- CC (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,y) cre(z) des(x) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,y) cre(z) des(x) 
 (   1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 

Total terms : 8
SQA automation time :  0.072 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 17 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,w) rdm(x,w,y,z) 
 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,y) rdm(x,z) 
 (   0.16667) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,y,z) 
 (  -0.16667) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,z,y) 
 (   0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,y,a) rdm(x,z) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,w) rdm(x,w,y,z) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,y) rdm(x,z) 
 (   0.33333) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,y,z) 
 (   0.16667) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 11
Spin-adaptation automation time :  0.073 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 11


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_c:f_c] =- 1/2 * einsum('RPxay,Qa,xy->RPQ', Y_KWCU__aaaa, t1_xe, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/2 * einsum('RPxay,Qzaw,xwyz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/2 * einsum('RPxay,Qzay,xz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/6 * einsum('RPxay,Qzwa,xwyz->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/6 * einsum('RPxay,Qzwa,xwzy->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPxay,Qzya,xz->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/2 * einsum('RPxay,Qa,xy->RPQ', Y_KWCU__abab, t1_xe, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/2 * einsum('RPxay,Qzaw,xwyz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/2 * einsum('RPxay,Qzay,xz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/3 * einsum('RPxay,Qzwa,xwyz->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/6 * einsum('RPxay,Qzwa,xwzy->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CC (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,a,y) cre(z) des(w) 
 (  -1.00000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(w) des(u) 

Total terms : 2
SQA automation time :  0.042 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 2 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 3 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.16667) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) rdm(y,z,u,w) 
 (  -0.33333) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) rdm(y,z,w,u) 
 (   0.50000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,y,a) rdm(z,w) 

Total spin-integrated terms: 2
Total spin-adapted terms: 3
Spin-adaptation automation time :  0.013 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 3


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_c:f_c] =- 1/6 * einsum('RPxay,Qzwa,yzuw->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] -= 1/3 * einsum('RPxay,Qzwa,yzwu->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_c:f_c] += 1/2 * einsum('RPxay,Qzya,zw->RPQ', Y_KWCU__baab, t1_xaae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VV (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.069 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- VV (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.036 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- AA (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,Q) t1(i,y,a,P) cre(y) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,y) cre(P) des(x) 
 (  -1.00000) Y_KWCU__baab(R,i,x,a,y) t1(i,Q,a,y) cre(P) des(z) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,z) cre(P) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,P) cre(y) cre(z) des(Q) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,z) cre(P) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,P) cre(y) cre(z) des(Q) des(x) 
 (   1.00000) Y_KWCU__baab(R,i,x,a,y) t1(i,Q,a,z) cre(P) cre(y) des(z) des(w) 

Total terms : 8
SQA automation time :  0.126 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 23 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,Q) t1(i,y,P,a) rdm(x,y) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,a,Q) t1(i,y,a,P) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,y) rdm(P,x) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,x,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,z,x) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,y,a) rdm(P,x) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,z,a) rdm(P,y,x,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,z,a) rdm(P,y,z,x) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,P,a) rdm(Q,x,y,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,P,a) rdm(Q,x,z,y) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,y,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,z,y) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,x,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,z,x) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,z,a) rdm(P,y,x,z) 
 (   0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,z,a) rdm(P,y,z,x) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,P,a) rdm(Q,x,y,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,z,P,a) rdm(Q,x,z,y) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,y,z) 
 (   0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,z,y) 
 (   0.50000) Y_KWCU__baab(R,i,x,a,y) t1(i,Q,y,a) rdm(P,z) 
 (  -0.33333) Y_KWCU__baab(R,i,x,a,y) t1(i,Q,z,a) rdm(P,y,w,z) 
 (  -0.16667) Y_KWCU__baab(R,i,x,a,y) t1(i,Q,z,a) rdm(P,y,z,w) 

Total spin-integrated terms: 8
Total spin-adapted terms: 23
Spin-adaptation automation time :  0.110 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 23


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_a:f_a] =- 1/2 * einsum('RixaQ,iyPa,xy->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('RixaQ,iyaP,xy->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rixay,iQay,Px->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,iQaz,Pyxz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,iQaz,Pyzx->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rixay,iQya,Px->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,iQza,Pyxz->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,iQza,Pyzx->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,izPa,Qxyz->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,izPa,Qxzy->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,izaP,Qxyz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,izaP,Qxzy->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,iQaz,Pyxz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/3 * einsum('Rixay,iQaz,Pyzx->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,iQza,Pyxz->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/3 * einsum('Rixay,iQza,Pyzx->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,izPa,Qxyz->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/3 * einsum('Rixay,izPa,Qxzy->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,izaP,Qxyz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/3 * einsum('Rixay,izaP,Qxzy->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('Rixay,iQya,Pz->RPQ', Y_KWCU__baab, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/3 * einsum('Rixay,iQza,Pywz->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,iQza,Pyzw->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- AA (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__abab(R,i,x,a,Q) t1(i,y,a,P) cre(y) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,y) cre(P) des(x) 
 (   1.00000) Y_KWCU__baab(R,i,x,a,Q) t1(i,y,a,P) cre(y) des(z) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,z) cre(P) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,P) cre(y) cre(z) des(Q) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,z) cre(P) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,P) cre(y) cre(z) des(Q) des(x) 
 (   1.00000) Y_KWCU__baab(R,i,x,a,y) t1(i,z,a,P) cre(y) cre(z) des(Q) des(w) 

Total terms : 8
SQA automation time :  0.133 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 13 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,x,z) 
 (  -0.33333) Y_KWCU__aaaa(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,z,x) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,y,z) 
 (   0.33333) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,z,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,Q) t1(i,y,a,P) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,y) rdm(P,x) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,x,z) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,Q,a,z) rdm(P,y,z,x) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,y,z) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,P) rdm(Q,x,z,y) 
 (  -0.50000) Y_KWCU__baab(R,i,x,a,Q) t1(i,y,P,a) rdm(y,z) 
 (   0.33333) Y_KWCU__baab(R,i,x,a,y) t1(i,z,P,a) rdm(Q,w,y,z) 
 (   0.16667) Y_KWCU__baab(R,i,x,a,y) t1(i,z,P,a) rdm(Q,w,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 13
Spin-adaptation automation time :  0.061 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 13


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_a:f_a] =- 1/6 * einsum('Rixay,iQaz,Pyxz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/3 * einsum('Rixay,iQaz,Pyzx->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,izaP,Qxyz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/3 * einsum('Rixay,izaP,Qxzy->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/2 * einsum('RixaQ,iyaP,xy->RPQ', Y_KWCU__abab, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('Rixay,iQay,Px->RPQ', Y_KWCU__abab, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,iQaz,Pyxz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,iQaz,Pyzx->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/6 * einsum('Rixay,izaP,Qxyz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,izaP,Qxzy->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] -= 1/2 * einsum('RixaQ,iyPa,yz->RPQ', Y_KWCU__baab, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/3 * einsum('Rixay,izPa,Qwyz->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_a:f_a] += 1/6 * einsum('Rixay,izPa,Qwzy->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- EE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,P) cre(y) des(x) 
 (   1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,y) cre(z) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,P) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,y) cre(z) des(x) 
 (   1.00000) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,P,y) cre(z) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(w) des(u) 

Total terms : 10
SQA automation time :  0.159 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 10 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 20 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,P) rdm(x,y) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,w) rdm(x,w,y,z) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,y) rdm(x,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,y,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,z,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,y,P) rdm(x,z) 
 (   0.50000) Y_KWCU__abab(R,i,x,Q,y) t1(i,P) rdm(x,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,w) rdm(x,w,y,z) 
 (   0.50000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,y) rdm(x,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,y,z) 
 (  -0.16667) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,z,y) 
 (   0.16667) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,w,P) rdm(y,z,u,w) 
 (   0.33333) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,w,P) rdm(y,z,w,u) 
 (  -0.50000) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,y,P) rdm(z,w) 

Total spin-integrated terms: 10
Total spin-adapted terms: 14
Spin-adaptation automation time :  0.085 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 14


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_e:f_e, s_e:f_e]  = 1/2 * einsum('RixQy,iP,xy->RPQ', Y_KWCU__aaaa, t1_xe, rdm_ca, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/2 * einsum('RixQy,izPw,xwyz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/2 * einsum('RixQy,izPy,xz->RPQ', Y_KWCU__aaaa, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] -= 1/6 * einsum('RixQy,izwP,xwyz->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/6 * einsum('RixQy,izwP,xwzy->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] -= 1/2 * einsum('RixQy,izyP,xz->RPQ', Y_KWCU__aaaa, t1_xaae, rdm_ca, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/2 * einsum('RixQy,iP,xy->RPQ', Y_KWCU__abab, t1_xe, rdm_ca, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/2 * einsum('RixQy,izPw,xwyz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/2 * einsum('RixQy,izPy,xz->RPQ', Y_KWCU__abab, t1_xaea, rdm_ca, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] -= 1/3 * einsum('RixQy,izwP,xwyz->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] -= 1/6 * einsum('RixQy,izwP,xwzy->RPQ', Y_KWCU__abab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/6 * einsum('RixQy,izwP,yzuw->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] += 1/3 * einsum('RixQy,izwP,yzwu->RPQ', Y_KWCU__baab, t1_xaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_e:f_e, s_e:f_e] -= 1/2 * einsum('RixQy,izyP,zw->RPQ', Y_KWCU__baab, t1_xaae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- EE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------


Total terms : 0
SQA automation time :  0.018 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 0 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 0 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------


Total spin-integrated terms: 0
Total spin-adapted terms: 0
Spin-adaptation automation time :  0.000 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 0


--------------------------------------- genEinsum equations ----------------------------------------

----------------------------------------------------------------------------------------------------

--------------------------------------------- CV (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,y) cre(z) des(x) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,y) cre(z) des(x) 
 (   1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(x) des(w) 

Total terms : 8
SQA automation time :  0.156 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 8 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 17 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,w) rdm(x,w,y,z) 
 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,a,y) rdm(x,z) 
 (   0.16667) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,y,z) 
 (  -0.16667) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,z,y) 
 (   0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,y,a) rdm(x,z) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,w) rdm(x,w,y,z) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,a,y) rdm(x,z) 
 (   0.33333) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,y,z) 
 (   0.16667) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,z,y) 

Total spin-integrated terms: 8
Total spin-adapted terms: 11
Spin-adaptation automation time :  0.074 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 11


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_v:f_v] =- 1/2 * einsum('RPxay,Qa,xy->RPQ', Y_KWCU__aaaa, t1_ve, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/2 * einsum('RPxay,Qzaw,xwyz->RPQ', Y_KWCU__aaaa, t1_vaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/2 * einsum('RPxay,Qzay,xz->RPQ', Y_KWCU__aaaa, t1_vaea, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/6 * einsum('RPxay,Qzwa,xwyz->RPQ', Y_KWCU__aaaa, t1_vaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/6 * einsum('RPxay,Qzwa,xwzy->RPQ', Y_KWCU__aaaa, t1_vaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPxay,Qzya,xz->RPQ', Y_KWCU__aaaa, t1_vaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/2 * einsum('RPxay,Qa,xy->RPQ', Y_KWCU__abab, t1_ve, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/2 * einsum('RPxay,Qzaw,xwyz->RPQ', Y_KWCU__abab, t1_vaea, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/2 * einsum('RPxay,Qzay,xz->RPQ', Y_KWCU__abab, t1_vaea, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/3 * einsum('RPxay,Qzwa,xwyz->RPQ', Y_KWCU__abab, t1_vaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/6 * einsum('RPxay,Qzwa,xwzy->RPQ', Y_KWCU__abab, t1_vaae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CV (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,a,y) cre(z) des(w) 
 (  -1.00000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,a,w) cre(y) cre(z) des(w) des(u) 

Total terms : 2
SQA automation time :  0.090 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 2 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 3 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.16667) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) rdm(y,z,u,w) 
 (  -0.33333) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) rdm(y,z,w,u) 
 (   0.50000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,y,a) rdm(z,w) 

Total spin-integrated terms: 2
Total spin-adapted terms: 3
Spin-adaptation automation time :  0.014 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 3


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_v:f_v] =- 1/6 * einsum('RPxay,Qzwa,yzuw->RPQ', Y_KWCU__baab, t1_vaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] -= 1/3 * einsum('RPxay,Qzwa,yzwu->RPQ', Y_KWCU__baab, t1_vaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_v:f_v] += 1/2 * einsum('RPxay,Qzya,zw->RPQ', Y_KWCU__baab, t1_vaae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CA (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,y,a) cre(z) des(x) 
 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,y,a) cre(Q) des(x) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,y,a) cre(z) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__baab(R,i,x,a,y) t1(P,i,y,a) cre(Q) des(z) 
 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__baab(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(z) des(w) 

Total terms : 15
SQA automation time :  0.240 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 15 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 34 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,a) rdm(x,y) 
 (   0.16667) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,y,z) 
 (  -0.16667) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,z,y) 
 (   0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(Q,z,y,a) rdm(x,z) 
 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(z,Q,w,a) rdm(x,w,y,z) 
 (  -0.50000) Y_KWCU__aaaa(R,P,x,a,y) t1(z,Q,y,a) rdm(x,z) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,y,a) rdm(Q,x) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,Q,a) rdm(x,y) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,y,a) rdm(Q,x) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,x,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,z,x) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(Q,a) rdm(x,y) 
 (   0.33333) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,y,z) 
 (   0.16667) Y_KWCU__abab(R,P,x,a,y) t1(Q,z,w,a) rdm(x,w,z,y) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(z,Q,w,a) rdm(x,w,y,z) 
 (  -0.50000) Y_KWCU__abab(R,P,x,a,y) t1(z,Q,y,a) rdm(x,z) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(i,P,Q,a) rdm(x,y) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,x,z) 
 (   0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,z,x) 
 (   0.50000) Y_KWCU__baab(R,i,x,a,y) t1(i,P,y,a) rdm(Q,z) 
 (  -0.33333) Y_KWCU__baab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,w,z) 
 (  -0.16667) Y_KWCU__baab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,z,w) 

Total spin-integrated terms: 15
Total spin-adapted terms: 28
Spin-adaptation automation time :  0.147 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 28


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_a:f_a] =- 1/2 * einsum('RPxay,Qa,xy->RPQ', Y_KWCU__aaaa, t1_ae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('RPxay,Qzwa,xwyz->RPQ', Y_KWCU__aaaa, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('RPxay,Qzwa,xwzy->RPQ', Y_KWCU__aaaa, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('RPxay,Qzya,xz->RPQ', Y_KWCU__aaaa, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('RPxay,zQwa,xwyz->RPQ', Y_KWCU__aaaa, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('RPxay,zQya,xz->RPQ', Y_KWCU__aaaa, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rixay,Piya,Qx->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rixay,iPQa,xy->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rixay,iPya,Qx->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rixay,iPza,Qyxz->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rixay,iPza,Qyzx->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('RPxay,Qa,xy->RPQ', Y_KWCU__abab, t1_ae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/3 * einsum('RPxay,Qzwa,xwyz->RPQ', Y_KWCU__abab, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('RPxay,Qzwa,xwzy->RPQ', Y_KWCU__abab, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('RPxay,zQwa,xwyz->RPQ', Y_KWCU__abab, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('RPxay,zQya,xz->RPQ', Y_KWCU__abab, t1_aaae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__abab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/3 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__abab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rixay,iPQa,xy->RPQ', Y_KWCU__abab, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rixay,iPza,Qyxz->RPQ', Y_KWCU__abab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/3 * einsum('Rixay,iPza,Qyzx->RPQ', Y_KWCU__abab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rixay,iPya,Qz->RPQ', Y_KWCU__baab, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/3 * einsum('Rixay,iPza,Qywz->RPQ', Y_KWCU__baab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rixay,iPza,Qyzw->RPQ', Y_KWCU__baab, t1_xxae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CA (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,y,a) cre(Q) des(x) 
 (   1.00000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,y,a) cre(z) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) cre(y) cre(z) des(w) des(u) 

Total terms : 7
SQA automation time :  0.199 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 7 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 10 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.33333) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,y,a) rdm(Q,x) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (  -0.16667) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) rdm(y,z,u,w) 
 (  -0.33333) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,w,a) rdm(y,z,w,u) 
 (   0.50000) Y_KWCU__baab(R,P,x,a,y) t1(Q,z,y,a) rdm(z,w) 

Total spin-integrated terms: 7
Total spin-adapted terms: 10
Spin-adaptation automation time :  0.042 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 10


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_a:f_a]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/3 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__aaaa, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/2 * einsum('Rixay,Piya,Qx->RPQ', Y_KWCU__abab, t1_xxae, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__abab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__abab, t1_xxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/6 * einsum('RPxay,Qzwa,yzuw->RPQ', Y_KWCU__baab, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] -= 1/3 * einsum('RPxay,Qzwa,yzwu->RPQ', Y_KWCU__baab, t1_aaae, rdm_ccaa, optimize = einsum_type)
TY[:, s_c:f_c, s_a:f_a] += 1/2 * einsum('RPxay,Qzya,zw->RPQ', Y_KWCU__baab, t1_aaae, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VA (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,y,a) cre(Q) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__baab(R,i,x,a,y) t1(P,i,y,a) cre(Q) des(z) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (   1.00000) Y_KWCU__baab(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(z) des(w) 

Total terms : 7
SQA automation time :  0.203 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 7 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 17 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,y,a) rdm(Q,x) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,Q,a) rdm(x,y) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,y,a) rdm(Q,x) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,x,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,z,x) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(i,P,Q,a) rdm(x,y) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,x,z) 
 (   0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,z,x) 
 (   0.50000) Y_KWCU__baab(R,i,x,a,y) t1(i,P,y,a) rdm(Q,z) 
 (  -0.33333) Y_KWCU__baab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,w,z) 
 (  -0.16667) Y_KWCU__baab(R,i,x,a,y) t1(i,P,z,a) rdm(Q,y,z,w) 

Total spin-integrated terms: 7
Total spin-adapted terms: 17
Spin-adaptation automation time :  0.071 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 17


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_a:f_a]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rixay,Piya,Qx->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rixay,iPQa,xy->RPQ', Y_KWCU__aaaa, t1_xvae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rixay,iPya,Qx->RPQ', Y_KWCU__aaaa, t1_xvae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rixay,iPza,Qyxz->RPQ', Y_KWCU__aaaa, t1_xvae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rixay,iPza,Qyzx->RPQ', Y_KWCU__aaaa, t1_xvae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__abab, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/3 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__abab, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rixay,iPQa,xy->RPQ', Y_KWCU__abab, t1_xvae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rixay,iPza,Qyxz->RPQ', Y_KWCU__abab, t1_xvae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/3 * einsum('Rixay,iPza,Qyzx->RPQ', Y_KWCU__abab, t1_xvae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rixay,iPya,Qz->RPQ', Y_KWCU__baab, t1_xvae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/3 * einsum('Rixay,iPza,Qywz->RPQ', Y_KWCU__baab, t1_xvae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rixay,iPza,Qyzw->RPQ', Y_KWCU__baab, t1_xvae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VA (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,y,a) cre(Q) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) cre(Q) cre(y) des(x) des(z) 

Total terms : 5
SQA automation time :  0.192 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 5 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 7 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.33333) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,y,a) rdm(Q,x) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,x,z) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(P,i,z,a) rdm(Q,y,z,x) 

Total spin-integrated terms: 5
Total spin-adapted terms: 7
Spin-adaptation automation time :  0.029 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 7


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_a:f_a]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/3 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__aaaa, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/2 * einsum('Rixay,Piya,Qx->RPQ', Y_KWCU__abab, t1_vxae, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] += 1/6 * einsum('Rixay,Piza,Qyxz->RPQ', Y_KWCU__abab, t1_vxae, rdm_ccaa, optimize = einsum_type)
TY[:, s_v:f_v, s_a:f_a] -= 1/6 * einsum('Rixay,Piza,Qyzx->RPQ', Y_KWCU__abab, t1_vxae, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 

Total terms : 2
SQA automation time :  0.159 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 2 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 4 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,a,Q) rdm(x,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,a,Q) rdm(x,y) 

Total spin-integrated terms: 2
Total spin-adapted terms: 4
Spin-adaptation automation time :  0.009 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 4


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_e:f_e]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_xxee, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('Rixay,PiaQ,xy->RPQ', Y_KWCU__aaaa, t1_xxee, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_xxee, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] -= 1/2 * einsum('Rixay,PiaQ,xy->RPQ', Y_KWCU__abab, t1_xxee, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- CE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 

Total terms : 2
SQA automation time :  0.126 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 2 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 2 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 

Total spin-integrated terms: 2
Total spin-adapted terms: 2
Spin-adaptation automation time :  0.004 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 2


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_c:f_c, s_e:f_e]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_xxee, rdm_ca, optimize = einsum_type)
TY[:, s_c:f_c, s_e:f_e] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_xxee, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 

Total terms : 2
SQA automation time :  0.138 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 2 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 4 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,a,Q) rdm(x,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (  -0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,a,Q) rdm(x,y) 

Total spin-integrated terms: 2
Total spin-adapted terms: 4
Spin-adaptation automation time :  0.009 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 4


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_e:f_e]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_vxee, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= 1/2 * einsum('Rixay,PiaQ,xy->RPQ', Y_KWCU__aaaa, t1_vxee, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_vxee, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] -= 1/2 * einsum('Rixay,PiaQ,xy->RPQ', Y_KWCU__abab, t1_vxee, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- VE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) cre(y) des(x) 

Total terms : 2
SQA automation time :  0.123 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 2 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 2 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,y) t1(P,i,Q,a) rdm(x,y) 

Total spin-integrated terms: 2
Total spin-adapted terms: 2
Spin-adaptation automation time :  0.004 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 2


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_v:f_v, s_e:f_e]  = 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__aaaa, t1_vxee, rdm_ca, optimize = einsum_type)
TY[:, s_v:f_v, s_e:f_e] += 1/2 * einsum('Rixay,PiQa,xy->RPQ', Y_KWCU__abab, t1_vxee, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- AE (aa) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,P) cre(y) des(x) 
 (   1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,y) cre(z) des(x) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,P) t1(i,y,Q,a) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,P) cre(y) des(x) 
 (   1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,y) cre(z) des(x) 
 (   1.00000) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,P,y) cre(z) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,Q,a) cre(y) cre(z) des(P) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(x) des(w) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,z,Q,a) cre(y) cre(z) des(P) des(x) 
 (   1.00000) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,P,w) cre(y) cre(z) des(w) des(u) 

Total terms : 13
SQA automation time :  0.295 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 13 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 30 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

6 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,P) rdm(x,y) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,w) rdm(x,w,y,z) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,P,y) rdm(x,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,y,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,z,y) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,Q,y) t1(i,z,y,P) rdm(x,z) 
 (  -0.50000) Y_KWCU__aaaa(R,i,x,a,P) t1(i,y,Q,a) rdm(x,y) 
 (   0.50000) Y_KWCU__aaaa(R,i,x,a,P) t1(i,y,a,Q) rdm(x,y) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,Q,a) rdm(P,x,y,z) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,Q,a) rdm(P,x,z,y) 
 (  -0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,y,z) 
 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,z,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,Q,y) t1(i,P) rdm(x,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,w) rdm(x,w,y,z) 
 (   0.50000) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,P,y) rdm(x,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,y,z) 
 (  -0.16667) Y_KWCU__abab(R,i,x,Q,y) t1(i,z,w,P) rdm(x,w,z,y) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,Q,a) rdm(P,x,y,z) 
 (  -0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,z,Q,a) rdm(P,x,z,y) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,y,z) 
 (   0.33333) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,z,y) 
 (   0.16667) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,w,P) rdm(y,z,u,w) 
 (   0.33333) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,w,P) rdm(y,z,w,u) 
 (  -0.50000) Y_KWCU__baab(R,i,x,Q,y) t1(i,z,y,P) rdm(z,w) 

Total spin-integrated terms: 13
Total spin-adapted terms: 24
Spin-adaptation automation time :  0.131 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 24


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_e:f_e]  = 1/2 * einsum('RixQy,iP,xy->RPQ', Y_KWCU__aaaa, t1_xa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixQy,izPw,xwyz->RPQ', Y_KWCU__aaaa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixQy,izPy,xz->RPQ', Y_KWCU__aaaa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('RixQy,izwP,xwyz->RPQ', Y_KWCU__aaaa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('RixQy,izwP,xwzy->RPQ', Y_KWCU__aaaa, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('RixQy,izyP,xz->RPQ', Y_KWCU__aaaa, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('RixaP,iyQa,xy->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixaP,iyaQ,xy->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rixay,izQa,Pxyz->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rixay,izQa,Pxzy->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rixay,izaQ,Pxyz->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rixay,izaQ,Pxzy->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixQy,iP,xy->RPQ', Y_KWCU__abab, t1_xa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixQy,izPw,xwyz->RPQ', Y_KWCU__abab, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixQy,izPy,xz->RPQ', Y_KWCU__abab, t1_xaaa, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/3 * einsum('RixQy,izwP,xwyz->RPQ', Y_KWCU__abab, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('RixQy,izwP,xwzy->RPQ', Y_KWCU__abab, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rixay,izQa,Pxyz->RPQ', Y_KWCU__abab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/3 * einsum('Rixay,izQa,Pxzy->RPQ', Y_KWCU__abab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rixay,izaQ,Pxyz->RPQ', Y_KWCU__abab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/3 * einsum('Rixay,izaQ,Pxzy->RPQ', Y_KWCU__abab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('RixQy,izwP,yzuw->RPQ', Y_KWCU__baab, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/3 * einsum('RixQy,izwP,yzwu->RPQ', Y_KWCU__baab, t1_xaaa, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('RixQy,izyP,zw->RPQ', Y_KWCU__baab, t1_xaaa, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

--------------------------------------------- AE (bb) ----------------------------------------------

## Calculating the excitation operator [q^(0), T - T^\dag] ...
## Calculating the commutator...

## Calculating h [q, T - T^\dag] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -1.00000) Y_KWCU__abab(R,i,x,a,P) t1(i,y,Q,a) cre(y) des(x) 
 (  -1.00000) Y_KWCU__baab(R,i,x,a,P) t1(i,y,Q,a) cre(y) des(z) 
 (  -1.00000) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,Q,a) cre(y) cre(z) des(P) des(x) 
 (  -1.00000) Y_KWCU__abab(R,i,x,a,y) t1(i,z,Q,a) cre(y) cre(z) des(P) des(x) 
 (  -1.00000) Y_KWCU__baab(R,i,x,a,y) t1(i,z,Q,a) cre(y) cre(z) des(P) des(w) 

Total terms : 5
SQA automation time :  0.143 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------
 >>> 5 spin-integrated terms must be processed...

 >>> removing the symmetries of non-RDM spin-integrated tensors...
 >>> symmetry removal complete.
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 8 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

0 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   0.16667) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,y,z) 
 (   0.33333) Y_KWCU__aaaa(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,z,y) 
 (   0.50000) Y_KWCU__abab(R,i,x,a,P) t1(i,y,a,Q) rdm(x,y) 
 (  -0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,y,z) 
 (   0.16667) Y_KWCU__abab(R,i,x,a,y) t1(i,z,a,Q) rdm(P,x,z,y) 
 (  -0.50000) Y_KWCU__baab(R,i,x,a,P) t1(i,y,Q,a) rdm(y,z) 
 (   0.33333) Y_KWCU__baab(R,i,x,a,y) t1(i,z,Q,a) rdm(P,w,y,z) 
 (   0.16667) Y_KWCU__baab(R,i,x,a,y) t1(i,z,Q,a) rdm(P,w,z,y) 

Total spin-integrated terms: 5
Total spin-adapted terms: 8
Spin-adaptation automation time :  0.035 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 8


--------------------------------------- genEinsum equations ----------------------------------------

TY[:, s_a:f_a, s_e:f_e]  = 1/6 * einsum('Rixay,izaQ,Pxyz->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/3 * einsum('Rixay,izaQ,Pxzy->RPQ', Y_KWCU__aaaa, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/2 * einsum('RixaP,iyaQ,xy->RPQ', Y_KWCU__abab, t1_xaee, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/6 * einsum('Rixay,izaQ,Pxyz->RPQ', Y_KWCU__abab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rixay,izaQ,Pxzy->RPQ', Y_KWCU__abab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] -= 1/2 * einsum('RixaP,iyQa,yz->RPQ', Y_KWCU__baab, t1_xaee, rdm_ca, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/3 * einsum('Rixay,izQa,Pwyz->RPQ', Y_KWCU__baab, t1_xaee, rdm_ccaa, optimize = einsum_type)
TY[:, s_a:f_a, s_e:f_e] += 1/6 * einsum('Rixay,izQa,Pwzy->RPQ', Y_KWCU__baab, t1_xaee, rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 87.93 seconds.
