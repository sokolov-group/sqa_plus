
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


----------------------------- Spin-Adapted Preconditioner CVAA (abba) ------------------------------


## Generating operators ...


## Generating Term a_I^\dag a_J^\dag a_Y a_X ... a_W^\dag a_Z^\dag a_L a_K ...


----------------------------------------- Hamiltonian (0) ------------------------------------------

Done ...
----------------------------------------------------------------------------------------------------
## Calculating the commutator [H(0), h_NU^\dag] ...

## Calculating [h_MU, [H(0), h_NU^\dag]] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) v(W,Z,X,Y) kdelta(I,K) kdelta(J,L) 
 (   1.00000) h(W,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   1.00000) h(Y,Z) kdelta(I,K) kdelta(J,L) kdelta(W,X) 
 (   2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (  -1.00000) e(K) kdelta(I,K) kdelta(J,L) kdelta(W,X) kdelta(Y,Z) 
 (  -1.00000) e(L) kdelta(I,K) kdelta(J,L) kdelta(W,X) kdelta(Y,Z) 
 (  -1.00000) h(W,X) kdelta(I,K) kdelta(J,L) cre(Z) des(Y) 
 (  -1.00000) h(Y,Z) kdelta(I,K) kdelta(J,L) cre(W) des(X) 
 (  -1.00000) v(W,Z,X,x) kdelta(I,K) kdelta(J,L) cre(x) des(Y) 
 (   1.00000) v(W,Z,Y,x) kdelta(I,K) kdelta(J,L) cre(x) des(X) 
 (  -2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) cre(Z) des(Y) 
 (  -2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) cre(Z) des(Y) 
 (  -1.00000) v(W,x,X,Y) kdelta(I,K) kdelta(J,L) cre(Z) des(x) 
 (  -2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) cre(Z) des(Y) 
 (  -2.00000) v(i,W,i,X) kdelta(I,K) kdelta(J,L) cre(Z) des(Y) 
 (   1.00000) v(X,Y,Z,x) kdelta(I,K) kdelta(J,L) cre(W) des(x) 
 (   1.00000) e(K) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(Z) des(Y) 
 (   1.00000) e(K) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(W) des(X) 
 (   1.00000) e(L) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(Z) des(Y) 
 (   1.00000) e(L) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(W) des(X) 
 (  -1.00000) h(W,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(x) des(X) 
 (  -1.00000) h(Z,x) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(x) des(Y) 
 (   1.00000) v(W,x,X,y) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(y) des(x) 
 (  -2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(x) des(X) 
 (  -2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(x) des(X) 
 (   1.00000) v(W,x,X,y) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(y) des(x) 
 (  -2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(x) des(X) 
 (  -2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(x) des(X) 
 (   1.00000) v(Y,x,Z,y) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(x) des(y) 
 (   1.00000) v(Y,x,Z,y) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(x) des(y) 
 (   1.00000) e(K) kdelta(I,K) kdelta(J,L) cre(W) cre(Z) des(X) des(Y) 
 (   1.00000) e(L) kdelta(I,K) kdelta(J,L) cre(W) cre(Z) des(X) des(Y) 
 (   1.00000) h(W,x) kdelta(I,K) kdelta(J,L) cre(Z) cre(x) des(X) des(Y) 
 (  -1.00000) h(Z,x) kdelta(I,K) kdelta(J,L) cre(W) cre(x) des(X) des(Y) 
 (  -1.00000) v(W,Z,x,y) kdelta(I,K) kdelta(J,L) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) v(W,x,X,y) kdelta(I,K) kdelta(J,L) cre(Z) cre(y) des(Y) des(x) 
 (   2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) cre(Z) cre(x) des(X) des(Y) 
 (   2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) cre(Z) cre(x) des(X) des(Y) 
 (   1.00000) v(W,x,X,y) kdelta(I,K) kdelta(J,L) cre(Z) cre(y) des(Y) des(x) 
 (  -1.00000) v(W,x,Y,y) kdelta(I,K) kdelta(J,L) cre(Z) cre(y) des(X) des(x) 
 (   2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) cre(Z) cre(x) des(X) des(Y) 
 (   2.00000) v(i,W,i,x) kdelta(I,K) kdelta(J,L) cre(Z) cre(x) des(X) des(Y) 
 (  -1.00000) v(X,x,Z,y) kdelta(I,K) kdelta(J,L) cre(W) cre(x) des(Y) des(y) 
 (   1.00000) v(Y,x,Z,y) kdelta(I,K) kdelta(J,L) cre(W) cre(x) des(X) des(y) 
 (   1.00000) v(Y,x,Z,y) kdelta(I,K) kdelta(J,L) cre(W) cre(x) des(X) des(y) 
 (   0.50000) v(W,x,y,z) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(y) cre(z) des(X) des(x) 
 (   1.00000) v(W,x,y,z) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) cre(y) cre(z) des(X) des(x) 
 (   1.00000) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(y) cre(z) des(Y) des(x) 
 (   0.50000) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) kdelta(W,X) cre(y) cre(z) des(Y) des(x) 
 (   0.50000) v(W,x,y,z) kdelta(I,K) kdelta(J,L) cre(Z) cre(y) cre(z) des(X) des(Y) des(x) 
 (   1.00000) v(W,x,y,z) kdelta(I,K) kdelta(J,L) cre(Z) cre(y) cre(z) des(X) des(Y) des(x) 
 (  -1.00000) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) cre(W) cre(y) cre(z) des(X) des(Y) des(x) 
 (  -0.50000) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) cre(W) cre(y) cre(z) des(X) des(Y) des(x) 

Total terms : 56
SQA automation time :  24.674 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 115 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

45 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) v(W,X,Z,Y) kdelta(I,K) kdelta(J,L) 
 (  -0.33333) e(K) kdelta(I,K) kdelta(J,L) rdm(W,Z,X,Y) 
 (  -0.16667) e(K) kdelta(I,K) kdelta(J,L) rdm(W,Z,Y,X) 
 (  -0.33333) e(L) kdelta(I,K) kdelta(J,L) rdm(W,Z,X,Y) 
 (  -0.16667) e(L) kdelta(I,K) kdelta(J,L) rdm(W,Z,Y,X) 
 (   1.00000) h(W,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   1.00000) h(Y,Z) kdelta(I,K) kdelta(J,L) kdelta(W,X) 
 (  -0.50000) h(W,X) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (   0.16667) h(W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (   0.33333) h(W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (  -0.50000) h(Y,Z) kdelta(I,K) kdelta(J,L) rdm(W,X) 
 (   0.33333) h(Z,x) kdelta(I,K) kdelta(J,L) rdm(W,x,X,Y) 
 (   0.16667) h(Z,x) kdelta(I,K) kdelta(J,L) rdm(W,x,Y,X) 
 (  -2.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   4.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (  -2.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   4.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (  -0.50000) v(W,X,Z,x) kdelta(I,K) kdelta(J,L) rdm(Y,x) 
 (  -0.50000) v(W,X,x,Y) kdelta(I,K) kdelta(J,L) rdm(Z,x) 
 (  -0.50000) v(W,X,x,y) kdelta(I,K) kdelta(J,L) rdm(Y,x,Z,y) 
 (  -0.50000) v(W,x,Z,Y) kdelta(I,K) kdelta(J,L) rdm(X,x) 
 (   0.33333) v(W,x,Z,y) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,y) 
 (   0.16667) v(W,x,Z,y) kdelta(I,K) kdelta(J,L) rdm(X,Y,y,x) 
 (   0.33333) v(W,x,y,X) kdelta(I,K) kdelta(J,L) rdm(Y,y,Z,x) 
 (   0.16667) v(W,x,y,X) kdelta(I,K) kdelta(J,L) rdm(Y,y,x,Z) 
 (   0.16667) v(W,x,y,Y) kdelta(I,K) kdelta(J,L) rdm(X,y,Z,x) 
 (   0.33333) v(W,x,y,Y) kdelta(I,K) kdelta(J,L) rdm(X,y,x,Z) 
 (  -0.16667) v(W,x,y,z) kdelta(I,K) kdelta(J,L) rdm(X,Y,y,Z,z,x) 
 (   0.16667) v(W,x,y,z) kdelta(I,K) kdelta(J,L) rdm(X,Y,y,x,Z,z) 
 (  -0.16667) v(W,x,y,z) kdelta(I,K) kdelta(J,L) rdm(X,Y,y,x,z,Z) 
 (  -0.16667) v(W,x,y,z) kdelta(I,K) kdelta(J,L) rdm(X,Y,y,z,Z,x) 
 (  -0.16667) v(W,x,y,z) kdelta(I,K) kdelta(J,L) rdm(X,Y,y,z,x,Z) 
 (  -0.50000) v(X,x,Y,Z) kdelta(I,K) kdelta(J,L) rdm(W,x) 
 (   0.16667) v(X,x,y,Z) kdelta(I,K) kdelta(J,L) rdm(W,y,Y,x) 
 (   0.33333) v(X,x,y,Z) kdelta(I,K) kdelta(J,L) rdm(W,y,x,Y) 
 (  -0.50000) v(Y,Z,x,y) kdelta(I,K) kdelta(J,L) rdm(W,x,X,y) 
 (   0.33333) v(Y,x,y,Z) kdelta(I,K) kdelta(J,L) rdm(W,y,X,x) 
 (   0.16667) v(Y,x,y,Z) kdelta(I,K) kdelta(J,L) rdm(W,y,x,X) 
 (   0.33333) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) rdm(W,x,z,X,Y,y) 
 (   0.16667) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) rdm(W,x,z,Y,X,y) 
 (   1.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (  -0.33333) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (  -0.66667) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (  -2.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (   0.66667) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (   1.33333) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (   1.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (  -0.33333) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (  -0.66667) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (  -2.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (   0.66667) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (   1.33333) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (  -1.00000) e(K) kdelta(I,K) kdelta(J,L) kdelta(W,X) kdelta(Y,Z) 
 (  -1.00000) e(L) kdelta(I,K) kdelta(J,L) kdelta(W,X) kdelta(Y,Z) 
 (   0.50000) e(K) kdelta(I,K) kdelta(J,L) kdelta(W,X) rdm(Y,Z) 
 (   0.50000) e(K) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(W,X) 
 (   0.50000) e(L) kdelta(I,K) kdelta(J,L) kdelta(W,X) rdm(Y,Z) 
 (   0.50000) e(L) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(W,X) 
 (  -0.50000) h(W,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (  -0.50000) h(Z,x) kdelta(I,K) kdelta(J,L) kdelta(W,X) rdm(Y,x) 
 (   1.00000) v(W,X,x,y) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(x,y) 
 (  -0.50000) v(W,x,y,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(y,x) 
 (  -0.50000) v(W,x,y,z) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,y,x,z) 
 (   1.00000) v(Y,Z,x,y) kdelta(I,K) kdelta(J,L) kdelta(W,X) rdm(x,y) 
 (  -0.50000) v(Y,x,y,Z) kdelta(I,K) kdelta(J,L) kdelta(W,X) rdm(y,x) 
 (  -0.50000) v(Z,x,y,z) kdelta(I,K) kdelta(J,L) kdelta(W,X) rdm(Y,y,x,z) 
 (   1.00000) v(i,W,x,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (  -2.00000) v(i,i,W,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (   1.00000) v(i,W,x,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (  -2.00000) v(i,i,W,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 

Total spin-integrated terms: 56
Total spin-adapted terms: 70
Spin-adaptation automation time :  28.722 seconds
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

20 terms removed:
 (  -2.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   4.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (  -2.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   4.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) 
 (   1.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (  -0.33333) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (  -0.66667) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (  -2.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (   0.66667) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (   1.33333) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (   1.00000) v(i,W,X,i) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (  -0.33333) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (  -0.66667) v(i,W,x,i) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (  -2.00000) v(i,i,W,X) kdelta(I,K) kdelta(J,L) rdm(Y,Z) 
 (   0.66667) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,Z,x) 
 (   1.33333) v(i,i,W,x) kdelta(I,K) kdelta(J,L) rdm(X,Y,x,Z) 
 (   1.00000) v(i,W,x,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (  -2.00000) v(i,i,W,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (   1.00000) v(i,W,x,i) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
 (  -2.00000) v(i,i,W,x) kdelta(I,K) kdelta(J,L) kdelta(Y,Z) rdm(X,x) 
----------------------------------------------------------------------------------------------------
Remaining terms: 50

Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------- genEinsum equations ----------------------------------------

precond_cvaa  = einsum('WXZY,II,JJ->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), optimize = einsum_type)
precond_cvaa -= 1/3 * einsum('I,II,JJ,WZXY->IJXYWZ', e_cvs, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/6 * einsum('I,II,JJ,WZYX->IJXYWZ', e_cvs, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/3 * einsum('J,II,JJ,WZXY->IJXYWZ', e_val, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/6 * einsum('J,II,JJ,WZYX->IJXYWZ', e_val, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += einsum('WX,II,JJ,YZ->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), np.identity(ncas), optimize = einsum_type)
precond_cvaa += einsum('YZ,II,JJ,WX->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), np.identity(ncas), optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('WX,II,JJ,YZ->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('Wx,II,JJ,XYZx->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('Wx,II,JJ,XYxZ->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('YZ,II,JJ,WX->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('Zx,II,JJ,WxXY->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('Zx,II,JJ,WxYX->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('WXZx,II,JJ,Yx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('WXxY,II,JJ,Zx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('WXxy,II,JJ,YxZy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('WxZY,II,JJ,Xx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('WxZy,II,JJ,XYxy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('WxZy,II,JJ,XYyx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('WxyX,II,JJ,YyZx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('WxyX,II,JJ,YyxZ->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('WxyY,II,JJ,XyZx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('WxyY,II,JJ,XyxZ->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/6 * einsum('Wxyz,II,JJ,XYyZzx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('Wxyz,II,JJ,XYyxZz->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa -= 1/6 * einsum('Wxyz,II,JJ,XYyxzZ->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa -= 1/6 * einsum('Wxyz,II,JJ,XYyzZx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa -= 1/6 * einsum('Wxyz,II,JJ,XYyzxZ->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('XxYZ,II,JJ,Wx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('XxyZ,II,JJ,WyYx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('XxyZ,II,JJ,WyxY->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('YZxy,II,JJ,WxXy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('YxyZ,II,JJ,WyXx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('YxyZ,II,JJ,WyxX->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_ccaa, optimize = einsum_type)
precond_cvaa += 1/3 * einsum('Zxyz,II,JJ,WxzXYy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa += 1/6 * einsum('Zxyz,II,JJ,WxzYXy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), rdm_cccaaa, optimize = einsum_type)
precond_cvaa -= einsum('I,II,JJ,WX,YZ->IJXYWZ', e_cvs, np.identity(ncvs), np.identity(nval), np.identity(ncas), np.identity(ncas), optimize = einsum_type)
precond_cvaa -= einsum('J,II,JJ,WX,YZ->IJXYWZ', e_val, np.identity(ncvs), np.identity(nval), np.identity(ncas), np.identity(ncas), optimize = einsum_type)
precond_cvaa += 1/2 * einsum('I,II,JJ,WX,YZ->IJXYWZ', e_cvs, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/2 * einsum('I,II,JJ,YZ,WX->IJXYWZ', e_cvs, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/2 * einsum('J,II,JJ,WX,YZ->IJXYWZ', e_val, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa += 1/2 * einsum('J,II,JJ,YZ,WX->IJXYWZ', e_val, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('Wx,II,JJ,YZ,Xx->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('Zx,II,JJ,WX,Yx->IJXYWZ', h_aa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa += einsum('WXxy,II,JJ,YZ,xy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('WxyX,II,JJ,YZ,yx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('Wxyz,II,JJ,YZ,Xyxz->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ccaa, optimize = einsum_type)
precond_cvaa += einsum('YZxy,II,JJ,WX,xy->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('YxyZ,II,JJ,WX,yx->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ca, optimize = einsum_type)
precond_cvaa -= 1/2 * einsum('Zxyz,II,JJ,WX,Yyxz->IJXYWZ', v_aaaa, np.identity(ncvs), np.identity(nval), np.identity(ncas), rdm_ccaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 54.52 seconds.
