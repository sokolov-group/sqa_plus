
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) v(J,A,W,C) 
 (   1.00000) h(J,W) kdelta(A,C) 
 (  -1.00000) kdelta(A,C) v(J,i,i,W) 
 (  -1.00000) e(J) kdelta(A,C) t1(J,W) 
 (   1.00000) h(W,x) kdelta(A,C) t1(J,x) 
 (   1.00000) kdelta(A,C) t1(J,x) v(i,x,i,W) 
 (  -1.00000) v(J,A,x,C) cre(W) des(x) 
 (  -1.00000) h(J,x) kdelta(A,C) cre(W) des(x) 
 (   1.00000) kdelta(A,C) v(J,y,W,x) cre(y) des(x) 
 (   1.00000) kdelta(A,C) v(J,i,i,x) cre(W) des(x) 
 (   1.00000) e(J) kdelta(A,C) t1(J,x) cre(W) des(x) 
 (  -1.00000) e(J) kdelta(A,C) t1(J,x,W,y) cre(x) des(y) 
 (   1.00000) h(W,x) kdelta(A,C) t1(J,y,x,z) cre(y) des(z) 
 (  -1.00000) h(x,y) kdelta(A,C) t1(J,x) cre(W) des(y) 
 (  -1.00000) h(x,y) kdelta(A,C) t1(J,x,W,z) cre(y) des(z) 
 (   1.00000) h(x,y) kdelta(A,C) t1(J,z,W,x) cre(z) des(y) 
 (   1.00000) kdelta(A,C) t1(J,x) v(W,y,x,z) cre(z) des(y) 
 (  -1.00000) kdelta(A,C) t1(J,x) v(i,x,i,y) cre(W) des(y) 
 (   1.00000) kdelta(A,C) t1(J,x,W,y) v(i,y,i,z) cre(x) des(z) 
 (  -1.00000) kdelta(A,C) t1(J,x,W,y) v(i,z,i,x) cre(z) des(y) 
 (   0.50000) kdelta(A,C) t1(J,x,y,z) v(W,w,y,z) cre(x) des(w) 
 (   1.00000) kdelta(A,C) t1(J,x,y,z) v(i,y,i,W) cre(x) des(z) 
 (   0.50000) kdelta(A,C) v(J,z,x,y) cre(W) cre(z) des(x) des(y) 
 (  -0.50000) e(J) kdelta(A,C) t1(J,x,y,z) cre(W) cre(x) des(y) des(z) 
 (  -0.50000) h(x,y) kdelta(A,C) t1(J,x,z,w) cre(W) cre(y) des(z) des(w) 
 (   1.00000) h(x,y) kdelta(A,C) t1(J,z,x,w) cre(W) cre(z) des(y) des(w) 
 (   0.50000) kdelta(A,C) t1(J,x) v(y,z,x,w) cre(W) cre(w) des(y) des(z) 
 (   0.50000) kdelta(A,C) t1(J,x,W,y) v(x,z,w,u) cre(w) cre(u) des(y) des(z) 
 (  -0.50000) kdelta(A,C) t1(J,x,W,y) v(z,w,y,u) cre(x) cre(u) des(z) des(w) 
 (  -0.25000) kdelta(A,C) t1(J,x,y,z) v(W,x,w,u) cre(w) cre(u) des(y) des(z) 
 (  -1.00000) kdelta(A,C) t1(J,x,y,z) v(W,w,y,u) cre(x) cre(u) des(z) des(w) 
 (  -1.00000) kdelta(A,C) t1(J,x,y,z) v(i,y,i,w) cre(W) cre(x) des(z) des(w) 
 (   0.25000) kdelta(A,C) t1(J,x,y,z) v(w,u,y,z) cre(W) cre(x) des(w) des(u) 
 (  -0.50000) kdelta(A,C) t1(J,x,y,z) v(i,w,i,x) cre(W) cre(w) des(y) des(z) 
 (  -0.25000) kdelta(A,C) t1(J,x,y,z) v(x,w,u,v) cre(W) cre(u) cre(v) des(y) des(z) des(w) 
 (  -0.50000) kdelta(A,C) t1(J,x,y,z) v(w,u,y,v) cre(W) cre(x) cre(v) des(z) des(w) des(u) 

Total terms : 36
SQA automation time :  0.528 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('JAWC->AJWC', v_ceae_so, optimize = True).copy()
temp += np.einsum('JW, AC->AJWC', h_ca_so, np.identity(nextern), optimize = True)
temp -= np.einsum('AC, JiiW->AJWC', np.identity(nextern), v_ccca_so, optimize = True)
temp -= np.einsum('J, AC, JW->AJWC', e_core_so, np.identity(nextern), t1_ca, optimize = True)
temp += np.einsum('Wx, AC, Jx->AJWC', h_aa_so, np.identity(nextern), t1_ca, optimize = True)
temp += np.einsum('AC, Jx, ixiW->AJWC', np.identity(nextern), t1_ca, v_caca_so, optimize = True)
temp -= np.einsum('JAxC, Wx->AJWC', v_ceae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('Jx, AC, Wx->AJWC', h_ca_so, np.identity(nextern), rdm_ca_so, optimize = True)
temp += np.einsum('AC, JyWx, yx->AJWC', np.identity(nextern), v_caaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('AC, Jiix, Wx->AJWC', np.identity(nextern), v_ccca_so, rdm_ca_so, optimize = True)
temp += np.einsum('J, AC, Jx, Wx->AJWC', e_core_so, np.identity(nextern), t1_ca, rdm_ca_so, optimize = True)
temp -= np.einsum('J, AC, JxWy, xy->AJWC', e_core_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
temp += np.einsum('Wx, AC, Jyxz, yz->AJWC', h_aa_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, AC, Jx, Wy->AJWC', h_aa_so, np.identity(nextern), t1_ca, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, AC, JxWz, yz->AJWC', h_aa_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
temp += np.einsum('xy, AC, JzWx, zy->AJWC', h_aa_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
temp += np.einsum('AC, Jx, Wyxz, zy->AJWC', np.identity(nextern), t1_ca, v_aaaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('AC, Jx, ixiy, Wy->AJWC', np.identity(nextern), t1_ca, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('AC, JxWy, iyiz, xz->AJWC', np.identity(nextern), t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('AC, JxWy, izix, zy->AJWC', np.identity(nextern), t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('AC, Jxyz, Wwyz, xw->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('AC, Jxyz, iyiW, xz->AJWC', np.identity(nextern), t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('AC, Jzxy, Wzxy->AJWC', np.identity(nextern), v_caaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('J, AC, Jxyz, Wxyz->AJWC', e_core_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xy, AC, Jxzw, Wyzw->AJWC', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
temp += np.einsum('xy, AC, Jzxw, Wzyw->AJWC', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('AC, Jx, yzxw, Wwyz->AJWC', np.identity(nextern), t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('AC, JxWy, xzwu, wuyz->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('AC, JxWy, zwyu, xuzw->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.25 * np.einsum('AC, Jxyz, Wxwu, wuyz->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('AC, Jxyz, Wwyu, xuzw->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('AC, Jxyz, iyiw, Wxzw->AJWC', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.25 * np.einsum('AC, Jxyz, wuyz, Wxwu->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('AC, Jxyz, iwix, Wwyz->AJWC', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.25 * np.einsum('AC, Jxyz, xwuv, Wuvyzw->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('AC, Jxyz, wuyv, Wxvzwu->AJWC', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
