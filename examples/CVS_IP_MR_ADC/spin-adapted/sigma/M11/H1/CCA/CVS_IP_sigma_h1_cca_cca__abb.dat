
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


--------------------------- Spin-Adapted CVS-IP: Sigma H1 CCA_CCA (abb) ----------------------------


## Generating operators ...


## Right operator terms:
 (   0.50000) X_aaa(i,j,x) cre(i) cre(j) des(x) 
 (   0.50000) X_abb(i,j,x) cre(i) cre(j) des(x) 
 (   0.50000) X_bab(i,j,x) cre(i) cre(j) des(x) 

## Left operator terms:
 (   1.00000) cre(W) des(L) des(K) 

----------------------------------------- Hamiltonian (1) ------------------------------------------

Commutation: Done ...
Done ...
----------------------------------------------------------------------------------------------------
## Calculating the commutator [H(0), a_S^\dag a_T^\dag a_U] ...

## Calculating a_P^\dag a_Q a_R [H(0), a_S^\dag a_T^\dag a_U] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) X_aaa(K,k,z) v(k,W,L,z) 
 (   0.50000) X_abb(K,k,z) v(k,W,L,z) 
 (   0.50000) X_abb(k,L,z) v(k,W,K,z) 
 (  -0.50000) X_abb(i,j,W) v(K,L,i,j) 
 (  -0.50000) X_bab(L,k,z) v(k,W,K,z) 
 (  -0.50000) X_bab(k,K,z) v(k,W,L,z) 
 (  -0.50000) X_bab(i,j,W) v(K,L,i,j) 
 (  -0.50000) X_abb(K,j,W) v(j,z,L,w) rdm(z,w) 
 (  -0.50000) X_abb(K,j,W) v(j,z,L,w) rdm(z,w) 
 (  -0.50000) X_abb(i,L,W) v(i,z,K,w) rdm(z,w) 
 (  -0.50000) X_abb(i,L,W) v(i,z,K,w) rdm(z,w) 
 (   0.50000) X_bab(L,j,W) v(j,z,K,w) rdm(z,w) 
 (   0.50000) X_bab(L,j,W) v(j,z,K,w) rdm(z,w) 
 (   0.50000) X_bab(i,K,W) v(i,z,L,w) rdm(z,w) 
 (   0.50000) X_bab(i,K,W) v(i,z,L,w) rdm(z,w) 
 (  -1.00000) X_aaa(K,k,z) v(k,w,L,z) cre(W) des(w) 
 (  -1.00000) X_aaa(K,j,x) v(j,W,L,z) cre(z) des(x) 
 (  -0.50000) X_abb(K,k,z) v(k,w,L,z) cre(W) des(w) 
 (   0.50000) X_abb(K,j,W) v(j,z,L,w) cre(w) des(z) 
 (   0.50000) X_abb(K,j,W) v(j,z,L,w) cre(w) des(z) 
 (  -0.50000) X_abb(K,j,x) v(j,W,L,z) cre(z) des(x) 
 (  -0.50000) X_abb(k,L,z) v(k,w,K,z) cre(W) des(w) 
 (   0.50000) X_abb(k,j,x) v(K,L,k,j) cre(W) des(x) 
 (   0.50000) X_abb(i,L,W) v(i,z,K,w) cre(w) des(z) 
 (   0.50000) X_abb(i,L,W) v(i,z,K,w) cre(w) des(z) 
 (  -0.50000) X_abb(i,L,x) v(i,W,K,z) cre(z) des(x) 
 (   0.50000) X_bab(L,k,z) v(k,w,K,z) cre(W) des(w) 
 (  -0.50000) X_bab(L,j,W) v(j,z,K,w) cre(w) des(z) 
 (  -0.50000) X_bab(L,j,W) v(j,z,K,w) cre(w) des(z) 
 (   0.50000) X_bab(L,j,x) v(j,W,K,z) cre(z) des(x) 
 (   0.50000) X_bab(k,K,z) v(k,w,L,z) cre(W) des(w) 
 (   0.50000) X_bab(k,j,x) v(K,L,k,j) cre(W) des(x) 
 (  -0.50000) X_bab(i,K,W) v(i,z,L,w) cre(w) des(z) 
 (  -0.50000) X_bab(i,K,W) v(i,z,L,w) cre(w) des(z) 
 (   0.50000) X_bab(i,K,x) v(i,W,L,z) cre(z) des(x) 
 (   0.50000) X_abb(K,j,x) v(j,z,L,w) rdm(z,w) cre(W) des(x) 
 (   0.50000) X_abb(K,j,x) v(j,z,L,w) rdm(z,w) cre(W) des(x) 
 (   0.50000) X_abb(i,L,x) v(i,z,K,w) rdm(z,w) cre(W) des(x) 
 (   0.50000) X_abb(i,L,x) v(i,z,K,w) rdm(z,w) cre(W) des(x) 
 (  -0.50000) X_bab(L,j,x) v(j,z,K,w) rdm(z,w) cre(W) des(x) 
 (  -0.50000) X_bab(L,j,x) v(j,z,K,w) rdm(z,w) cre(W) des(x) 
 (  -0.50000) X_bab(i,K,x) v(i,z,L,w) rdm(z,w) cre(W) des(x) 
 (  -0.50000) X_bab(i,K,x) v(i,z,L,w) rdm(z,w) cre(W) des(x) 
 (   1.00000) X_aaa(K,j,x) v(j,z,L,w) cre(W) cre(w) des(x) des(z) 
 (   0.50000) X_abb(K,j,x) v(j,z,L,w) cre(W) cre(w) des(x) des(z) 
 (   0.50000) X_abb(K,j,x) v(j,z,L,w) cre(W) cre(w) des(x) des(z) 
 (   0.50000) X_abb(i,L,x) v(i,z,K,w) cre(W) cre(w) des(x) des(z) 
 (   0.50000) X_abb(i,L,x) v(i,z,K,w) cre(W) cre(w) des(x) des(z) 
 (  -0.50000) X_bab(L,j,x) v(j,z,K,w) cre(W) cre(w) des(x) des(z) 
 (  -0.50000) X_bab(L,j,x) v(j,z,K,w) cre(W) cre(w) des(x) des(z) 
 (  -0.50000) X_bab(i,K,x) v(i,z,L,w) cre(W) cre(w) des(x) des(z) 
 (  -0.50000) X_bab(i,K,x) v(i,z,L,w) cre(W) cre(w) des(x) des(z) 

Total terms : 52
SQA automation time :  1834.388 seconds
----------------------------------------------------------------------------------------------------

----------------------- Converting Sigma vector to spin-adapted formulation ------------------------

----------------------------------------------------------------------------------------------------

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices according to: alpha < beta
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Converting Kronecker Deltas to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting eigenvalues to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 87 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

40 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (  -1.00000) X_aaa(K,k,z) v(L,W,z,k) 
 (  -0.50000) X_abb(K,k,z) v(L,W,z,k) 
 (   0.50000) X_abb(K,k,z) v(L,k,z,W) 
 (  -0.50000) X_abb(i,j,W) v(K,i,L,j) 
 (   0.50000) X_abb(k,L,z) v(K,k,z,W) 
 (  -0.50000) X_bab(L,k,z) v(K,k,z,W) 
 (   0.50000) X_bab(i,j,W) v(K,j,L,i) 
 (   0.50000) X_bab(k,K,z) v(L,W,z,k) 
 (  -0.50000) X_bab(k,K,z) v(L,k,z,W) 
 (   0.50000) X_aaa(K,j,x) v(L,W,z,j) rdm(x,z) 
 (  -0.16667) X_aaa(K,j,x) v(L,z,w,j) rdm(W,w,x,z) 
 (  -0.33333) X_aaa(K,j,x) v(L,z,w,j) rdm(W,w,z,x) 
 (   0.50000) X_aaa(K,k,z) v(L,w,z,k) rdm(W,w) 
 (   0.25000) X_abb(K,j,x) v(L,W,z,j) rdm(x,z) 
 (  -0.25000) X_abb(K,j,x) v(L,j,z,W) rdm(x,z) 
 (  -0.25000) X_abb(K,j,x) v(L,j,z,w) rdm(W,z,x,w) 
 (   0.08333) X_abb(K,j,x) v(L,z,w,j) rdm(W,w,x,z) 
 (  -0.08333) X_abb(K,j,x) v(L,z,w,j) rdm(W,w,z,x) 
 (  -0.25000) X_abb(K,k,z) v(L,k,z,w) rdm(W,w) 
 (   0.25000) X_abb(K,k,z) v(L,w,z,k) rdm(W,w) 
 (  -0.25000) X_abb(i,L,x) v(K,i,z,W) rdm(x,z) 
 (  -0.25000) X_abb(i,L,x) v(K,i,z,w) rdm(W,z,x,w) 
 (   0.16667) X_abb(i,L,x) v(K,z,w,i) rdm(W,w,x,z) 
 (   0.08333) X_abb(i,L,x) v(K,z,w,i) rdm(W,w,z,x) 
 (  -0.25000) X_abb(k,L,z) v(K,k,z,w) rdm(W,w) 
 (   0.25000) X_abb(k,j,x) v(K,k,L,j) rdm(W,x) 
 (   0.25000) X_bab(L,j,x) v(K,j,z,W) rdm(x,z) 
 (   0.25000) X_bab(L,j,x) v(K,j,z,w) rdm(W,z,x,w) 
 (  -0.16667) X_bab(L,j,x) v(K,z,w,j) rdm(W,w,x,z) 
 (  -0.08333) X_bab(L,j,x) v(K,z,w,j) rdm(W,w,z,x) 
 (   0.25000) X_bab(L,k,z) v(K,k,z,w) rdm(W,w) 
 (  -0.25000) X_bab(i,K,x) v(L,W,z,i) rdm(x,z) 
 (   0.25000) X_bab(i,K,x) v(L,i,z,W) rdm(x,z) 
 (   0.25000) X_bab(i,K,x) v(L,i,z,w) rdm(W,z,x,w) 
 (  -0.08333) X_bab(i,K,x) v(L,z,w,i) rdm(W,w,x,z) 
 (   0.08333) X_bab(i,K,x) v(L,z,w,i) rdm(W,w,z,x) 
 (   0.25000) X_bab(k,K,z) v(L,k,z,w) rdm(W,w) 
 (  -0.25000) X_bab(k,K,z) v(L,w,z,k) rdm(W,w) 
 (  -0.25000) X_bab(k,j,x) v(K,j,L,k) rdm(W,x) 
 (   0.25000) X_abb(K,j,x) v(L,j,z,w) rdm(z,w) rdm(W,x) 
 (  -0.12500) X_abb(K,j,x) v(L,z,w,j) rdm(w,z) rdm(W,x) 
 (   0.25000) X_abb(i,L,x) v(K,i,z,w) rdm(z,w) rdm(W,x) 
 (  -0.12500) X_abb(i,L,x) v(K,z,w,i) rdm(w,z) rdm(W,x) 
 (  -0.25000) X_bab(L,j,x) v(K,j,z,w) rdm(z,w) rdm(W,x) 
 (   0.12500) X_bab(L,j,x) v(K,z,w,j) rdm(w,z) rdm(W,x) 
 (  -0.25000) X_bab(i,K,x) v(L,i,z,w) rdm(z,w) rdm(W,x) 
 (   0.12500) X_bab(i,K,x) v(L,z,w,i) rdm(w,z) rdm(W,x) 

Total spin-integrated terms: 52
Total spin-adapted terms: 47
Spin-adaptation automation time :  0.325 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

0 terms removed:
----------------------------------------------------------------------------------------------------
Remaining terms: 47


--------------------------------------- genEinsum equations ----------------------------------------

sigma_cca =- einsum('Kix,LWxi->KLW', X_aaa, v_xaax, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('Kix,LWxi->KLW', X_abb, v_xaax, optimize = einsum_type)
sigma_cca += 1/2 * einsum('Kix,LixW->KLW', X_abb, v_xxaa, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('ijW,KiLj->KLW', X_abb, v_xxxx, optimize = einsum_type)
sigma_cca += 1/2 * einsum('iLx,KixW->KLW', X_abb, v_xxaa, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('Lix,KixW->KLW', X_bab, v_xxaa, optimize = einsum_type)
sigma_cca += 1/2 * einsum('ijW,KjLi->KLW', X_bab, v_xxxx, optimize = einsum_type)
sigma_cca += 1/2 * einsum('iKx,LWxi->KLW', X_bab, v_xaax, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('iKx,LixW->KLW', X_bab, v_xxaa, optimize = einsum_type)
sigma_cca += 1/2 * einsum('Kix,LWyi,xy->KLW', X_aaa, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/6 * einsum('Kix,Lyzi,Wzxy->KLW', X_aaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/3 * einsum('Kix,Lyzi,Wzyx->KLW', X_aaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/2 * einsum('Kix,Lyxi,Wy->KLW', X_aaa, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Kix,LWyi,xy->KLW', X_abb, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Kix,LiyW,xy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Kix,Liyz,Wyxz->KLW', X_abb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/12 * einsum('Kix,Lyzi,Wzxy->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/12 * einsum('Kix,Lyzi,Wzyx->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Kix,Lixy,Wy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Kix,Lyxi,Wy->KLW', X_abb, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iLx,KiyW,xy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iLx,Kiyz,Wyxz->KLW', X_abb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/6 * einsum('iLx,Kyzi,Wzxy->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/12 * einsum('iLx,Kyzi,Wzyx->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iLx,Kixy,Wy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('ijx,KiLj,Wx->KLW', X_abb, v_xxxx, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Lix,KiyW,xy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Lix,Kiyz,Wyxz->KLW', X_bab, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/6 * einsum('Lix,Kyzi,Wzxy->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/12 * einsum('Lix,Kyzi,Wzyx->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Lix,Kixy,Wy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iKx,LWyi,xy->KLW', X_bab, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iKx,LiyW,xy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iKx,Liyz,Wyxz->KLW', X_bab, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/12 * einsum('iKx,Lyzi,Wzxy->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/12 * einsum('iKx,Lyzi,Wzyx->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iKx,Lixy,Wy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iKx,Lyxi,Wy->KLW', X_bab, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('ijx,KjLi,Wx->KLW', X_bab, v_xxxx, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Kix,Liyz,yz,Wx->KLW', X_abb, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/8 * einsum('Kix,Lyzi,zy,Wx->KLW', X_abb, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iLx,Kiyz,yz,Wx->KLW', X_abb, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/8 * einsum('iLx,Kyzi,zy,Wx->KLW', X_abb, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Lix,Kiyz,yz,Wx->KLW', X_bab, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca += 1/8 * einsum('Lix,Kyzi,zy,Wx->KLW', X_bab, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iKx,Liyz,yz,Wx->KLW', X_bab, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca += 1/8 * einsum('iKx,Lyzi,zy,Wx->KLW', X_bab, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
----------------------------------------------------------------------------------------------------

-------------------------------- genEinsum equations --------------------------------

sigma_cca =- einsum('Kix,LWxi->KLW', X_aaa, v_xaax, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('Kix,LWxi->KLW', X_abb, v_xaax, optimize = einsum_type)
sigma_cca += 1/2 * einsum('Kix,LixW->KLW', X_abb, v_xxaa, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('ijW,KiLj->KLW', X_abb, v_xxxx, optimize = einsum_type)
sigma_cca += 1/2 * einsum('iLx,KixW->KLW', X_abb, v_xxaa, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('Lix,KixW->KLW', X_bab, v_xxaa, optimize = einsum_type)
sigma_cca += 1/2 * einsum('ijW,KjLi->KLW', X_bab, v_xxxx, optimize = einsum_type)
sigma_cca += 1/2 * einsum('iKx,LWxi->KLW', X_bab, v_xaax, optimize = einsum_type)
sigma_cca -= 1/2 * einsum('iKx,LixW->KLW', X_bab, v_xxaa, optimize = einsum_type)
sigma_cca += 1/2 * einsum('Kix,LWyi,xy->KLW', X_aaa, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/6 * einsum('Kix,Lyzi,Wzxy->KLW', X_aaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/3 * einsum('Kix,Lyzi,Wzyx->KLW', X_aaa, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/2 * einsum('Kix,Lyxi,Wy->KLW', X_aaa, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Kix,LWyi,xy->KLW', X_abb, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Kix,LiyW,xy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Kix,Liyz,Wyxz->KLW', X_abb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/12 * einsum('Kix,Lyzi,Wzxy->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/12 * einsum('Kix,Lyzi,Wzyx->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Kix,Lixy,Wy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Kix,Lyxi,Wy->KLW', X_abb, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iLx,KiyW,xy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iLx,Kiyz,Wyxz->KLW', X_abb, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/6 * einsum('iLx,Kyzi,Wzxy->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/12 * einsum('iLx,Kyzi,Wzyx->KLW', X_abb, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iLx,Kixy,Wy->KLW', X_abb, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('ijx,KiLj,Wx->KLW', X_abb, v_xxxx, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Lix,KiyW,xy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Lix,Kiyz,Wyxz->KLW', X_bab, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/6 * einsum('Lix,Kyzi,Wzxy->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/12 * einsum('Lix,Kyzi,Wzyx->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Lix,Kixy,Wy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iKx,LWyi,xy->KLW', X_bab, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iKx,LiyW,xy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iKx,Liyz,Wyxz->KLW', X_bab, v_xxaa, rdm_ccaa, optimize = einsum_type)
sigma_cca -= 1/12 * einsum('iKx,Lyzi,Wzxy->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/12 * einsum('iKx,Lyzi,Wzyx->KLW', X_bab, v_xaax, rdm_ccaa, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iKx,Lixy,Wy->KLW', X_bab, v_xxaa, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iKx,Lyxi,Wy->KLW', X_bab, v_xaax, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('ijx,KjLi,Wx->KLW', X_bab, v_xxxx, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('Kix,Liyz,yz,Wx->KLW', X_abb, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/8 * einsum('Kix,Lyzi,zy,Wx->KLW', X_abb, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca += 1/4 * einsum('iLx,Kiyz,yz,Wx->KLW', X_abb, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/8 * einsum('iLx,Kyzi,zy,Wx->KLW', X_abb, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('Lix,Kiyz,yz,Wx->KLW', X_bab, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca += 1/8 * einsum('Lix,Kyzi,zy,Wx->KLW', X_bab, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca -= 1/4 * einsum('iKx,Liyz,yz,Wx->KLW', X_bab, v_xxaa, rdm_ca, rdm_ca, optimize = einsum_type)
sigma_cca += 1/8 * einsum('iKx,Lyzi,zy,Wx->KLW', X_bab, v_xaax, rdm_ca, rdm_ca, optimize = einsum_type)

-------------------------------------------------------------------------------------

> Total elapsed time: 2211.56 seconds.
