
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


-------------------------------- Spin-Orbital V(X,Y): T-Slice t1_p2 --------------------------------

# Defining a^\dag_p a_q...

## Creating first set of spin-orbital T - T^\dag...
22 spin-orbital A terms created.

## Creating second set of spin-orbital T - T^\dag...
22 spin-orbital A terms created.

## Selecting spin-orbital T - T^\dag slice: t1_p2...

# First Amplitude Set...
 (   0.25000) t1(cc9,cc10,aa12,aa13) cre(aa12) cre(aa13) des(cc10) des(cc9) 
 (  -0.25000) t1(cc9,cc10,aa12,aa13) cre(cc9) cre(cc10) des(aa13) des(aa12) 
>>> Slice t1_p2: 2 spin-orbital A terms selected.

# Second Amplitude Set...
 (   0.25000) t1(cc20,cc21,aa28,aa29) cre(aa28) cre(aa29) des(cc21) des(cc20) 
 (  -0.25000) t1(cc20,cc21,aa28,aa29) cre(cc20) cre(cc21) des(aa29) des(aa28) 
>>> Slice t1_p2: 2 spin-orbital A terms selected.

# Creating spin-orbital [2V + [H^(0), T - T^\dag], T - T^\dag]:

## Creating spin-orbital V...
82 spin-orbital V terms created.

## Creating spin-orbital H^(0)...
6 spin-orbital H^(0) terms created.

## Calculating [H^(0), T - T^\dag]:
>>> Slice t1_p2: 10 spin-orbital terms created.

## Calculating V + H^(1):
>>> Slice t1_p2: 92 spin-orbital terms created.

## Calculating [V + H^(1), T - T^\dag]:
>>> Slice t1_p2: 10 spin-orbital terms created.

## Calculating a^\dag_p a_q [V + H^(1), T - T^\dag]:
>>> Slice t1_p2: 189 spin-orbital a^\dag_p a_q [V + H^(1), T - T^\dag] terms created.

----------------------------------------------------------------------------------------------------

## Calculating matrix element of t1_p2 slice of V1:

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (  -0.50000) t1(i,j,Y,x) v(i,j,x,y) cre(X) des(y) 
 (  -0.50000) t1(i,j,x,y) v(i,j,Y,x) cre(X) des(y) 
 (  -0.25000) t1(i,j,x,y) v(i,j,x,y) cre(X) des(Y) 
 (  -0.25000) t1(i,j,x,y) v(i,j,x,y) cre(X) des(Y) 
 (   0.50000) e(i) t1(i,j,Y,x) t1(i,j,x,y) cre(X) des(y) 
 (   0.50000) e(i) t1(i,j,x,y) t1(i,j,Y,x) cre(X) des(y) 
 (   0.50000) e(i) t1(i,j,x,y) t1(i,j,x,y) cre(X) des(Y) 
 (  -0.25000) h(Y,x) t1(i,j,x,y) t1(i,j,y,z) cre(X) des(z) 
 (  -0.50000) h(x,y) t1(i,j,Y,x) t1(i,j,y,z) cre(X) des(z) 
 (   0.25000) h(x,y) t1(i,j,x,z) t1(i,j,Y,z) cre(X) des(y) 
 (  -0.50000) h(x,y) t1(i,j,x,z) t1(i,j,y,z) cre(X) des(Y) 
 (  -0.25000) v(Y,x,y,z) t1(i,j,x,w) t1(i,j,y,z) cre(X) des(w) 
 (   0.50000) v(Y,x,y,z) t1(i,j,x,w) t1(i,j,y,w) cre(X) des(z) 
 (  -0.25000) v(i,Y,i,x) t1(j,k,x,y) t1(j,k,y,z) cre(X) des(z) 
 (  -0.25000) v(x,y,z,w) t1(i,j,Y,x) t1(i,j,z,w) cre(X) des(y) 
 (  -0.12500) v(x,y,z,w) t1(i,j,x,y) t1(i,j,z,w) cre(X) des(Y) 
 (  -0.50000) v(i,x,i,y) t1(j,k,Y,x) t1(j,k,y,z) cre(X) des(z) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,Y,z) cre(X) des(y) 
 (  -0.50000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,y,z) cre(X) des(Y) 
 (   0.25000) t1(i,j,Y,x) v(i,j,y,z) cre(X) cre(x) des(y) des(z) 
 (   0.25000) t1(i,j,x,y) v(i,j,Y,z) cre(X) cre(z) des(x) des(y) 
 (  -0.50000) t1(i,j,x,y) v(i,j,x,z) cre(X) cre(z) des(Y) des(y) 
 (  -0.50000) t1(i,j,x,y) v(i,j,x,z) cre(X) cre(y) des(Y) des(z) 
 (  -0.25000) e(i) t1(i,j,Y,x) t1(i,j,y,z) cre(X) cre(x) des(y) des(z) 
 (  -0.25000) e(i) t1(i,j,x,y) t1(i,j,Y,z) cre(X) cre(z) des(x) des(y) 
 (   0.50000) e(i) t1(i,j,x,y) t1(i,j,x,z) cre(X) cre(y) des(Y) des(z) 
 (   0.50000) e(i) t1(i,j,x,y) t1(i,j,x,z) cre(X) cre(z) des(Y) des(y) 
 (   0.12500) h(Y,x) t1(i,j,x,y) t1(i,j,z,w) cre(X) cre(y) des(z) des(w) 
 (   0.12500) h(x,y) t1(i,j,Y,x) t1(i,j,z,w) cre(X) cre(y) des(z) des(w) 
 (   0.25000) h(x,y) t1(i,j,x,z) t1(i,j,Y,w) cre(X) cre(w) des(y) des(z) 
 (  -0.50000) h(x,y) t1(i,j,x,z) t1(i,j,y,w) cre(X) cre(z) des(Y) des(w) 
 (   0.25000) h(x,y) t1(i,j,x,z) t1(i,j,z,w) cre(X) cre(y) des(Y) des(w) 
 (   0.25000) h(x,y) t1(i,j,x,z) t1(i,j,z,w) cre(X) cre(w) des(Y) des(y) 
 (   0.50000) v(Y,x,y,z) t1(i,j,x,w) t1(i,j,y,u) cre(X) cre(u) des(z) des(w) 
 (   0.12500) v(Y,x,y,z) t1(i,j,x,w) t1(i,j,w,u) cre(X) cre(u) des(y) des(z) 
 (   0.06250) v(Y,x,y,z) t1(i,j,y,z) t1(i,j,w,u) cre(X) cre(x) des(w) des(u) 
 (  -0.25000) v(Y,x,y,z) t1(i,j,y,w) t1(i,j,w,u) cre(X) cre(x) des(z) des(u) 
 (   0.12500) v(i,Y,i,x) t1(j,k,x,y) t1(j,k,z,w) cre(X) cre(y) des(z) des(w) 
 (  -0.50000) v(x,y,z,w) t1(i,j,Y,x) t1(i,j,z,u) cre(X) cre(w) des(y) des(u) 
 (   0.06250) v(x,y,z,w) t1(i,j,x,y) t1(i,j,Y,u) cre(X) cre(u) des(z) des(w) 
 (  -0.25000) v(x,y,z,w) t1(i,j,x,y) t1(i,j,z,u) cre(X) cre(w) des(Y) des(u) 
 (  -0.25000) v(x,y,z,w) t1(i,j,x,y) t1(i,j,z,u) cre(X) cre(u) des(Y) des(w) 
 (  -0.12500) v(x,y,z,w) t1(i,j,x,u) t1(i,j,Y,u) cre(X) cre(y) des(z) des(w) 
 (   0.50000) v(x,y,z,w) t1(i,j,x,u) t1(i,j,z,u) cre(X) cre(y) des(Y) des(w) 
 (   0.12500) v(i,x,i,y) t1(j,k,Y,x) t1(j,k,z,w) cre(X) cre(y) des(z) des(w) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,Y,w) cre(X) cre(w) des(y) des(z) 
 (  -0.50000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,y,w) cre(X) cre(z) des(Y) des(w) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,z,w) cre(X) cre(y) des(Y) des(w) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,z,w) cre(X) cre(w) des(Y) des(y) 
 (   0.12500) t1(i,j,x,y) v(i,j,z,w) cre(X) cre(z) cre(w) des(Y) des(x) des(y) 
 (   0.12500) t1(i,j,x,y) v(i,j,z,w) cre(X) cre(x) cre(y) des(Y) des(z) des(w) 
 (  -0.12500) e(i) t1(i,j,x,y) t1(i,j,z,w) cre(X) cre(x) cre(y) des(Y) des(z) des(w) 
 (  -0.12500) e(i) t1(i,j,x,y) t1(i,j,z,w) cre(X) cre(z) cre(w) des(Y) des(x) des(y) 
 (   0.12500) h(x,y) t1(i,j,x,z) t1(i,j,w,u) cre(X) cre(y) cre(z) des(Y) des(w) des(u) 
 (   0.12500) h(x,y) t1(i,j,x,z) t1(i,j,w,u) cre(X) cre(w) cre(u) des(Y) des(y) des(z) 
 (   0.06250) v(Y,x,y,z) t1(i,j,x,w) t1(i,j,u,v) cre(X) cre(u) cre(v) des(y) des(z) des(w) 
 (  -0.12500) v(Y,x,y,z) t1(i,j,y,w) t1(i,j,u,v) cre(X) cre(x) cre(w) des(z) des(u) des(v) 
 (   0.06250) v(x,y,z,w) t1(i,j,Y,x) t1(i,j,u,v) cre(X) cre(z) cre(w) des(y) des(u) des(v) 
 (   0.03125) v(x,y,z,w) t1(i,j,x,y) t1(i,j,u,v) cre(X) cre(z) cre(w) des(Y) des(u) des(v) 
 (   0.03125) v(x,y,z,w) t1(i,j,x,y) t1(i,j,u,v) cre(X) cre(u) cre(v) des(Y) des(z) des(w) 
 (   0.12500) v(x,y,z,w) t1(i,j,x,u) t1(i,j,Y,v) cre(X) cre(y) cre(v) des(z) des(w) des(u) 
 (  -0.50000) v(x,y,z,w) t1(i,j,x,u) t1(i,j,z,v) cre(X) cre(y) cre(v) des(Y) des(w) des(u) 
 (  -0.12500) v(x,y,z,w) t1(i,j,x,u) t1(i,j,u,v) cre(X) cre(y) cre(v) des(Y) des(z) des(w) 
 (  -0.12500) v(x,y,z,w) t1(i,j,x,u) t1(i,j,u,v) cre(X) cre(z) cre(w) des(Y) des(y) des(v) 
 (   0.12500) v(i,x,i,y) t1(j,k,x,z) t1(j,k,w,u) cre(X) cre(y) cre(z) des(Y) des(w) des(u) 
 (   0.12500) v(i,x,i,y) t1(j,k,x,z) t1(j,k,w,u) cre(X) cre(w) cre(u) des(Y) des(y) des(z) 
 (   0.06250) v(x,y,z,w) t1(i,j,x,u) t1(i,j,v,s) cre(X) cre(y) cre(v) cre(s) des(Y) des(z) des(w) des(u) 
 (   0.06250) v(x,y,z,w) t1(i,j,x,u) t1(i,j,v,s) cre(X) cre(z) cre(w) cre(u) des(Y) des(y) des(v) des(s) 

Total terms : 68
SQA automation time :  8.930 seconds
>>> Slice V1: 68 spin-orbital a^\dag_p a_q [V + H^(1), A^(1)] terms created.
Dummy indices relabeling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

12 terms removed:
 (  -0.25000) v(i,Y,i,x) t1(j,k,x,y) t1(j,k,y,z) rdm(X,z) 
 (  -0.50000) v(i,x,i,y) t1(j,k,Y,x) t1(j,k,y,z) rdm(X,z) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,Y,z) rdm(X,y) 
 (  -0.50000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,y,z) rdm(X,Y) 
 (   0.12500) v(i,Y,i,x) t1(j,k,x,y) t1(j,k,z,w) rdm(X,y,z,w) 
 (   0.12500) v(i,x,i,y) t1(j,k,Y,x) t1(j,k,z,w) rdm(X,y,z,w) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,Y,w) rdm(X,w,y,z) 
 (  -0.50000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,y,w) rdm(X,z,Y,w) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,z,w) rdm(X,y,Y,w) 
 (   0.25000) v(i,x,i,y) t1(j,k,x,z) t1(j,k,z,w) rdm(X,w,Y,y) 
 (   0.12500) v(i,x,i,y) t1(j,k,x,z) t1(j,k,w,u) rdm(X,y,z,Y,w,u) 
 (   0.12500) v(i,x,i,y) t1(j,k,x,z) t1(j,k,w,u) rdm(X,w,u,Y,y,z) 
----------------------------------------------------------------------------------------------------
Remaining terms: 56


--------------------------------------- genEinsum equations ----------------------------------------

V1__t1_p2 =- 1/2 * einsum('ijYx,ijxy,Xy->XY', t1_ccaa, v_ccaa_so, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('ijxy,ijYx,Xy->XY', t1_ccaa, v_ccaa_so, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('ijxy,ijxy,XY->XY', t1_ccaa, v_ccaa_so, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('ijxy,ijxy,XY->XY', t1_ccaa, v_ccaa_so, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('i,ijYx,ijxy,Xy->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('i,ijxy,ijYx,Xy->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('i,ijxy,ijxy,XY->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('Yx,ijxy,ijyz,Xz->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('xy,ijYx,ijyz,Xz->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 += 1/4 * einsum('xy,ijxz,ijYz,Xy->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('xy,ijxz,ijyz,XY->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('Yxyz,ijxw,ijyz,Xw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('Yxyz,ijxw,ijyw,Xz->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('xyzw,ijYx,ijzw,Xy->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('xyzw,ijxy,ijzw,XY->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ca_so, optimize = einsum_type)
V1__t1_p2 += 1/4 * einsum('ijYx,ijyz,Xxyz->XY', t1_ccaa, v_ccaa_so, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/4 * einsum('ijxy,ijYz,Xzxy->XY', t1_ccaa, v_ccaa_so, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('ijxy,ijxz,XzYy->XY', t1_ccaa, v_ccaa_so, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('ijxy,ijxz,XyYz->XY', t1_ccaa, v_ccaa_so, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('i,ijYx,ijyz,Xxyz->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('i,ijxy,ijYz,Xzxy->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('i,ijxy,ijxz,XyYz->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('i,ijxy,ijxz,XzYy->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('Yx,ijxy,ijzw,Xyzw->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('xy,ijYx,ijzw,Xyzw->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/4 * einsum('xy,ijxz,ijYw,Xwyz->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('xy,ijxz,ijyw,XzYw->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/4 * einsum('xy,ijxz,ijzw,XyYw->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/4 * einsum('xy,ijxz,ijzw,XwYy->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('Yxyz,ijxw,ijyu,Xuzw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('Yxyz,ijxw,ijwu,Xuyz->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/16 * einsum('Yxyz,ijyz,ijwu,Xxwu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('Yxyz,ijyw,ijwu,Xxzu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('xyzw,ijYx,ijzu,Xwyu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/16 * einsum('xyzw,ijxy,ijYu,Xuzw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('xyzw,ijxy,ijzu,XwYu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/4 * einsum('xyzw,ijxy,ijzu,XuYw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('xyzw,ijxu,ijYu,Xyzw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/2 * einsum('xyzw,ijxu,ijzu,XyYw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('ijxy,ijzw,XzwYxy->XY', t1_ccaa, v_ccaa_so, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('ijxy,ijzw,XxyYzw->XY', t1_ccaa, v_ccaa_so, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('i,ijxy,ijzw,XxyYzw->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('i,ijxy,ijzw,XzwYxy->XY', e_core_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('xy,ijxz,ijwu,XyzYwu->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('xy,ijxz,ijwu,XwuYyz->XY', h_aa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/16 * einsum('Yxyz,ijxw,ijuv,Xuvyzw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('Yxyz,ijyw,ijuv,Xxwzuv->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/16 * einsum('xyzw,ijYx,ijuv,Xzwyuv->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/32 * einsum('xyzw,ijxy,ijuv,XzwYuv->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/32 * einsum('xyzw,ijxy,ijuv,XuvYzw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/8 * einsum('xyzw,ijxu,ijYv,Xyvzwu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/2 * einsum('xyzw,ijxu,ijzv,XyvYwu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('xyzw,ijxu,ijuv,XyvYzw->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 -= 1/8 * einsum('xyzw,ijxu,ijuv,XzwYyv->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_cccaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/16 * einsum('xyzw,ijxu,ijvs,XyvsYzwu->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccccaaaa_so, optimize = einsum_type)
V1__t1_p2 += 1/16 * einsum('xyzw,ijxu,ijvs,XzwuYyvs->XY', v_aaaa_so, t1_ccaa, t1_ccaa, rdm_ccccaaaa_so, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 27.25 seconds.
