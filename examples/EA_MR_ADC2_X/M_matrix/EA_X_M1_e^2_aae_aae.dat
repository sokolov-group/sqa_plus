
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) v(Z,C,Y,A) cre(X) des(W) 
 (  -1.00000) gamma(x,y) kdelta(Y,Z) v(x,C,y,A) cre(X) des(W) 
 (   1.00000) v(Z,C,x,A) cre(X) cre(x) des(W) des(Y) 
 (   1.00000) v(x,C,Y,A) cre(X) cre(Z) des(W) des(x) 
 (  -1.00000) gamma(x,y) v(x,C,y,A) cre(X) cre(Z) des(W) des(Y) 
 (  -1.00000) kdelta(Y,Z) v(x,C,y,A) cre(X) cre(y) des(W) des(x) 
 (   1.00000) v(x,C,y,A) cre(X) cre(Z) cre(y) des(W) des(Y) des(x) 

Total terms : 7
SQA automation time :  2.188 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('ZCYA, XW->XYAWZC', v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, YZ, xCyA, XW->XYAWZC', rdm_ca_so, np.identity(ncas), v_aeae_so, rdm_ca_so, optimize = True)
temp += np.einsum('ZCxA, XxWY->XYAWZC', v_aeae_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('xCYA, XZWx->XYAWZC', v_aeae_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('xy, xCyA, XZWY->XYAWZC', rdm_ca_so, v_aeae_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('YZ, xCyA, XyWx->XYAWZC', np.identity(ncas), v_aeae_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('xCyA, XZyWYx->XYAWZC', v_aeae_so, rdm_cccaaa_so, optimize = True)
