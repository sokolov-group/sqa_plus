
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(x,A,B) h(I,x) 
 (   1.00000) X(x,A,B) v(I,i,i,x) 
 (   1.00000) X(x,A,B) e(I) t1(I,x) 
 (  -1.00000) X(x,A,B) h(x,y) t1(I,y) 
 (  -1.00000) X(x,A,B) t1(I,y) v(i,x,i,y) 
 (  -1.00000) X(x,A,B) v(I,y,x,z) cre(z) des(y) 
 (  -1.00000) X(x,A,a) v(I,a,y,B) cre(y) des(x) 
 (   1.00000) X(x,B,a) v(I,a,y,A) cre(y) des(x) 
 (   1.00000) X(x,A,B) e(I) t1(I,y,x,z) cre(z) des(y) 
 (  -1.00000) X(x,A,B) h(x,y) t1(I,z,y,w) cre(w) des(z) 
 (   1.00000) X(x,A,B) h(y,z) t1(I,y,x,w) cre(w) des(z) 
 (  -1.00000) X(x,A,B) h(y,z) t1(I,w,x,y) cre(z) des(w) 
 (  -1.00000) X(x,A,B) t1(I,y) v(y,z,x,w) cre(w) des(z) 
 (   1.00000) X(x,A,B) t1(I,y,x,z) v(i,y,i,w) cre(z) des(w) 
 (  -1.00000) X(x,A,B) t1(I,y,x,z) v(i,w,i,z) cre(w) des(y) 
 (  -1.00000) X(x,A,B) t1(I,y,z,w) v(i,x,i,z) cre(w) des(y) 
 (  -0.50000) X(x,A,B) t1(I,y,z,w) v(z,w,x,u) cre(u) des(y) 
 (   0.50000) X(x,A,B) t1(I,y,x,z) v(z,w,u,v) cre(u) cre(v) des(y) des(w) 
 (  -0.50000) X(x,A,B) t1(I,y,x,z) v(w,u,y,v) cre(z) cre(v) des(w) des(u) 
 (   1.00000) X(x,A,B) t1(I,y,z,w) v(z,u,x,v) cre(w) cre(v) des(y) des(u) 
 (   0.25000) X(x,A,B) t1(I,y,z,w) v(u,v,x,y) cre(z) cre(w) des(u) des(v) 

Total terms : 21
SQA automation time :  1.648 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('xAB, Ix->IAB', X, h_ca_so, optimize = True)
temp += np.einsum('xAB, Iiix->IAB', X, v_ccca_so, optimize = True)
temp += np.einsum('xAB, I, Ix->IAB', X, e_core_so, t1_ca, optimize = True)
temp -= np.einsum('xAB, xy, Iy->IAB', X, h_aa_so, t1_ca, optimize = True)
temp -= np.einsum('xAB, Iy, ixiy->IAB', X, t1_ca, v_caca_so, optimize = True)
temp -= np.einsum('xAB, Iyxz, zy->IAB', X, v_caaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xAa, IayB, yx->IAB', X, v_ceae_so, rdm_ca_so, optimize = True)
temp += np.einsum('xBa, IayA, yx->IAB', X, v_ceae_so, rdm_ca_so, optimize = True)
temp += np.einsum('xAB, I, Iyxz, zy->IAB', X, e_core_so, t1_caaa, rdm_ca_so, optimize = True)
temp -= np.einsum('xAB, xy, Izyw, wz->IAB', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
temp += np.einsum('xAB, yz, Iyxw, wz->IAB', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
temp -= np.einsum('xAB, yz, Iwxy, zw->IAB', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
temp -= np.einsum('xAB, Iy, yzxw, wz->IAB', X, t1_ca, v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('xAB, Iyxz, iyiw, zw->IAB', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xAB, Iyxz, iwiz, wy->IAB', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xAB, Iyzw, ixiz, wy->IAB', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
temp -= 0.5 * np.einsum('xAB, Iyzw, zwxu, uy->IAB', X, t1_caaa, v_aaaa_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('xAB, Iyxz, zwuv, uvyw->IAB', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xAB, Iyxz, wuyv, zvwu->IAB', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('xAB, Iyzw, zuxv, wvyu->IAB', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.25 * np.einsum('xAB, Iyzw, uvxy, zwuv->IAB', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
