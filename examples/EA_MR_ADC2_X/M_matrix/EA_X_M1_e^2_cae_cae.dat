
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) kdelta(A,C) v(I,W,J,X) 
 (   1.00000) kdelta(I,J) v(W,C,X,A) 
 (  -1.00000) kdelta(W,X) v(I,C,J,A) 
 (  -1.00000) gamma(x,y) v(x,C,y,A) kdelta(I,J) kdelta(W,X) 
 (   1.00000) gamma(x,y) v(I,x,J,y) kdelta(A,C) kdelta(W,X) 
 (   1.00000) v(I,C,J,A) cre(W) des(X) 
 (   1.00000) kdelta(A,C) v(I,W,J,x) cre(x) des(X) 
 (   1.00000) kdelta(A,C) v(I,x,J,X) cre(W) des(x) 
 (  -1.00000) kdelta(I,J) v(W,C,x,A) cre(x) des(X) 
 (  -1.00000) kdelta(I,J) v(x,C,X,A) cre(W) des(x) 
 (  -1.00000) gamma(x,y) kdelta(A,C) v(I,x,J,y) cre(W) des(X) 
 (   1.00000) gamma(x,y) kdelta(I,J) v(x,C,y,A) cre(W) des(X) 
 (   1.00000) v(x,C,y,A) kdelta(I,J) kdelta(W,X) cre(y) des(x) 
 (  -1.00000) v(I,x,J,y) kdelta(A,C) kdelta(W,X) cre(y) des(x) 
 (  -1.00000) kdelta(A,C) v(I,x,J,y) cre(W) cre(y) des(X) des(x) 
 (   1.00000) kdelta(I,J) v(x,C,y,A) cre(W) cre(y) des(X) des(x) 

Total terms : 16
SQA automation time :  4.366 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('AC, IWJX->IXAJWC', np.identity(nextern), v_caca_so, optimize = True)
temp += np.einsum('IJ, WCXA->IXAJWC', np.identity(ncore), v_aeae_so, optimize = True)
temp -= np.einsum('WX, ICJA->IXAJWC', np.identity(ncas), v_cece_so, optimize = True)
temp -= np.einsum('xy, xCyA, IJ, WX->IXAJWC', rdm_ca_so, v_aeae_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp += np.einsum('xy, IxJy, AC, WX->IXAJWC', rdm_ca_so, v_caca_so, np.identity(nextern), np.identity(ncas), optimize = True)
temp += np.einsum('ICJA, WX->IXAJWC', v_cece_so, rdm_ca_so, optimize = True)
temp += np.einsum('AC, IWJx, xX->IXAJWC', np.identity(nextern), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('AC, IxJX, Wx->IXAJWC', np.identity(nextern), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, WCxA, xX->IXAJWC', np.identity(ncore), v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, xCXA, Wx->IXAJWC', np.identity(ncore), v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, AC, IxJy, WX->IXAJWC', rdm_ca_so, np.identity(nextern), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xy, IJ, xCyA, WX->IXAJWC', rdm_ca_so, np.identity(ncore), v_aeae_so, rdm_ca_so, optimize = True)
temp += np.einsum('xCyA, IJ, WX, yx->IXAJWC', v_aeae_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('IxJy, AC, WX, yx->IXAJWC', v_caca_so, np.identity(nextern), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('AC, IxJy, WyXx->IXAJWC', np.identity(nextern), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, xCyA, WyXx->IXAJWC', np.identity(ncore), v_aeae_so, rdm_ccaa_so, optimize = True)
