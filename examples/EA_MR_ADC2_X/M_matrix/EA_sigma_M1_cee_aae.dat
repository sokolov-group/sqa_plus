
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(x,y,A) v(I,y,z,B) cre(z) des(x) 
 (  -1.00000) X(x,y,A) v(I,z,x,B) cre(y) des(z) 
 (  -1.00000) X(x,y,B) v(I,y,z,A) cre(z) des(x) 
 (   1.00000) X(x,y,B) v(I,z,x,A) cre(y) des(z) 
 (   1.00000) X(x,y,a) v(I,a,A,B) cre(y) des(x) 
 (  -1.00000) X(x,y,A) e(B) t1(I,y,B,z) cre(z) des(x) 
 (   1.00000) X(x,y,A) e(B) t1(I,z,B,x) cre(y) des(z) 
 (   1.00000) X(x,y,A) e(I) t1(I,y,B,z) cre(z) des(x) 
 (  -1.00000) X(x,y,A) e(I) t1(I,z,B,x) cre(y) des(z) 
 (   1.00000) X(x,y,B) e(A) t1(I,y,A,z) cre(z) des(x) 
 (  -1.00000) X(x,y,B) e(A) t1(I,z,A,x) cre(y) des(z) 
 (  -1.00000) X(x,y,B) e(I) t1(I,y,A,z) cre(z) des(x) 
 (   1.00000) X(x,y,B) e(I) t1(I,z,A,x) cre(y) des(z) 
 (   1.00000) X(x,y,A) h(x,z) t1(I,w,B,z) cre(y) des(w) 
 (   1.00000) X(x,y,A) h(y,z) t1(I,z,B,w) cre(w) des(x) 
 (  -1.00000) X(x,y,A) h(z,w) t1(I,y,B,z) cre(w) des(x) 
 (  -1.00000) X(x,y,A) h(z,w) t1(I,z,B,x) cre(y) des(w) 
 (  -1.00000) X(x,y,B) h(x,z) t1(I,w,A,z) cre(y) des(w) 
 (  -1.00000) X(x,y,B) h(y,z) t1(I,z,A,w) cre(w) des(x) 
 (   1.00000) X(x,y,B) h(z,w) t1(I,y,A,z) cre(w) des(x) 
 (   1.00000) X(x,y,B) h(z,w) t1(I,z,A,x) cre(y) des(w) 
 (  -1.00000) X(x,y,A) t1(I,y,B,z) v(i,w,i,z) cre(w) des(x) 
 (  -1.00000) X(x,y,A) t1(I,z,B,x) v(i,z,i,w) cre(y) des(w) 
 (   1.00000) X(x,y,A) t1(I,z,B,w) v(i,x,i,w) cre(y) des(z) 
 (   1.00000) X(x,y,A) t1(I,z,B,w) v(i,z,i,y) cre(w) des(x) 
 (   1.00000) X(x,y,B) t1(I,y,A,z) v(i,w,i,z) cre(w) des(x) 
 (   1.00000) X(x,y,B) t1(I,z,A,x) v(i,z,i,w) cre(y) des(w) 
 (  -1.00000) X(x,y,B) t1(I,z,A,w) v(i,x,i,w) cre(y) des(z) 
 (  -1.00000) X(x,y,B) t1(I,z,A,w) v(i,z,i,y) cre(w) des(x) 
 (   0.50000) X(x,y,A) t1(I,y,B,z) v(z,w,u,v) cre(u) cre(v) des(x) des(w) 
 (   0.50000) X(x,y,A) t1(I,z,B,x) v(w,u,z,v) cre(y) cre(v) des(w) des(u) 
 (   0.50000) X(x,y,A) t1(I,z,B,w) v(y,w,u,v) cre(u) cre(v) des(x) des(z) 
 (  -1.00000) X(x,y,A) t1(I,z,B,w) v(y,u,z,v) cre(w) cre(v) des(x) des(u) 
 (  -1.00000) X(x,y,A) t1(I,z,B,w) v(w,u,x,v) cre(y) cre(v) des(z) des(u) 
 (   0.50000) X(x,y,A) t1(I,z,B,w) v(u,v,x,z) cre(y) cre(w) des(u) des(v) 
 (  -0.50000) X(x,y,B) t1(I,y,A,z) v(z,w,u,v) cre(u) cre(v) des(x) des(w) 
 (  -0.50000) X(x,y,B) t1(I,z,A,x) v(w,u,z,v) cre(y) cre(v) des(w) des(u) 
 (  -0.50000) X(x,y,B) t1(I,z,A,w) v(y,w,u,v) cre(u) cre(v) des(x) des(z) 
 (   1.00000) X(x,y,B) t1(I,z,A,w) v(y,u,z,v) cre(w) cre(v) des(x) des(u) 
 (   1.00000) X(x,y,B) t1(I,z,A,w) v(w,u,x,v) cre(y) cre(v) des(z) des(u) 
 (  -0.50000) X(x,y,B) t1(I,z,A,w) v(u,v,x,z) cre(y) cre(w) des(u) des(v) 

Total terms : 41
SQA automation time :  3.083 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('xyA, IyzB, zx->IAB', X, v_caae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, IzxB, yz->IAB', X, v_caae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, IyzA, zx->IAB', X, v_caae_so, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, IzxA, yz->IAB', X, v_caae_so, rdm_ca_so, optimize = True)
temp += np.einsum('xya, IaAB, yx->IAB', X, v_ceee_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, B, IyBz, zx->IAB', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyA, B, IzBx, yz->IAB', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyA, I, IyBz, zx->IAB', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, I, IzBx, yz->IAB', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, A, IyAz, zx->IAB', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, A, IzAx, yz->IAB', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, I, IyAz, zx->IAB', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, I, IzAx, yz->IAB', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyA, xz, IwBz, yw->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyA, yz, IzBw, wx->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, zw, IyBz, wx->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, zw, IzBx, yw->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, xz, IwAz, yw->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, yz, IzAw, wx->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, zw, IyAz, wx->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, zw, IzAx, yw->IAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, IyBz, iwiz, wx->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xyA, IzBx, iziw, yw->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xyA, IzBw, ixiw, yz->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xyA, IzBw, iziy, wx->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, IyAz, iwiz, wx->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xyB, IzAx, iziw, yw->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, IzAw, ixiw, yz->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xyB, IzAw, iziy, wx->IAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('xyA, IyBz, zwuv, uvxw->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyA, IzBx, wuzv, yvwu->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyA, IzBw, ywuv, uvxz->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('xyA, IzBw, yuzv, wvxu->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('xyA, IzBw, wuxv, yvzu->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyA, IzBw, uvxz, ywuv->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyB, IyAz, zwuv, uvxw->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyB, IzAx, wuzv, yvwu->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyB, IzAw, ywuv, uvxz->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('xyB, IzAw, yuzv, wvxu->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('xyB, IzAw, wuxv, yvzu->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyB, IzAw, uvxz, ywuv->IAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
