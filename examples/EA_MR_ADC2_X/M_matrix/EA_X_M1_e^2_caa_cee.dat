
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) kdelta(I,J) v(X,Y,C,D) 
 (   1.00000) e(C) kdelta(I,J) t1(X,Y,C,D) 
 (   1.00000) e(D) kdelta(I,J) t1(X,Y,C,D) 
 (   1.00000) h(X,x) kdelta(I,J) t1(Y,x,C,D) 
 (  -1.00000) h(Y,x) kdelta(I,J) t1(X,x,C,D) 
 (  -1.00000) kdelta(I,J) t1(X,x,C,D) v(i,Y,i,x) 
 (   1.00000) kdelta(I,J) t1(Y,x,C,D) v(i,X,i,x) 
 (  -0.50000) kdelta(I,J) t1(x,y,C,D) v(x,y,X,Y) 
 (  -1.00000) kdelta(I,J) v(X,x,C,D) cre(x) des(Y) 
 (   1.00000) kdelta(I,J) v(Y,x,C,D) cre(x) des(X) 
 (  -1.00000) e(C) kdelta(I,J) t1(X,x,C,D) cre(x) des(Y) 
 (   1.00000) e(C) kdelta(I,J) t1(Y,x,C,D) cre(x) des(X) 
 (  -1.00000) e(D) kdelta(I,J) t1(X,x,C,D) cre(x) des(Y) 
 (   1.00000) e(D) kdelta(I,J) t1(Y,x,C,D) cre(x) des(X) 
 (   1.00000) h(X,x) kdelta(I,J) t1(x,y,C,D) cre(y) des(Y) 
 (  -1.00000) h(Y,x) kdelta(I,J) t1(x,y,C,D) cre(y) des(X) 
 (   1.00000) h(x,y) kdelta(I,J) t1(X,x,C,D) cre(y) des(Y) 
 (  -1.00000) h(x,y) kdelta(I,J) t1(Y,x,C,D) cre(y) des(X) 
 (  -1.00000) kdelta(I,J) t1(X,x,C,D) v(x,y,Y,z) cre(z) des(y) 
 (   1.00000) kdelta(I,J) t1(X,x,C,D) v(i,y,i,x) cre(y) des(Y) 
 (   1.00000) kdelta(I,J) t1(Y,x,C,D) v(x,y,X,z) cre(z) des(y) 
 (  -1.00000) kdelta(I,J) t1(Y,x,C,D) v(i,y,i,x) cre(y) des(X) 
 (   1.00000) kdelta(I,J) t1(x,y,C,D) v(i,X,i,x) cre(y) des(Y) 
 (  -1.00000) kdelta(I,J) t1(x,y,C,D) v(i,Y,i,x) cre(y) des(X) 
 (   0.50000) kdelta(I,J) t1(x,y,C,D) v(x,y,X,z) cre(z) des(Y) 
 (  -0.50000) kdelta(I,J) t1(x,y,C,D) v(x,y,Y,z) cre(z) des(X) 
 (   1.00000) kdelta(I,J) t1(x,y,C,D) v(x,z,X,Y) cre(y) des(z) 
 (  -0.50000) kdelta(I,J) v(x,y,C,D) cre(x) cre(y) des(X) des(Y) 
 (  -0.50000) e(C) kdelta(I,J) t1(x,y,C,D) cre(x) cre(y) des(X) des(Y) 
 (  -0.50000) e(D) kdelta(I,J) t1(x,y,C,D) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) h(x,y) kdelta(I,J) t1(x,z,C,D) cre(y) cre(z) des(X) des(Y) 
 (  -0.50000) kdelta(I,J) t1(X,x,C,D) v(x,y,z,w) cre(z) cre(w) des(Y) des(y) 
 (   0.50000) kdelta(I,J) t1(Y,x,C,D) v(x,y,z,w) cre(z) cre(w) des(X) des(y) 
 (   0.25000) kdelta(I,J) t1(x,y,C,D) v(x,y,z,w) cre(z) cre(w) des(X) des(Y) 
 (  -1.00000) kdelta(I,J) t1(x,y,C,D) v(x,z,X,w) cre(y) cre(w) des(Y) des(z) 
 (   1.00000) kdelta(I,J) t1(x,y,C,D) v(x,z,Y,w) cre(y) cre(w) des(X) des(z) 
 (  -1.00000) kdelta(I,J) t1(x,y,C,D) v(i,z,i,x) cre(y) cre(z) des(X) des(Y) 
 (  -0.50000) kdelta(I,J) t1(x,y,C,D) v(x,z,w,u) cre(y) cre(w) cre(u) des(X) des(Y) des(z) 

Total terms : 38
SQA automation time :  5.121 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('IJ, XYCD->IXYJCD', np.identity(ncore), v_aaee_so, optimize = True)
temp += np.einsum('C, IJ, XYCD->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, optimize = True)
temp += np.einsum('D, IJ, XYCD->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, optimize = True)
temp += np.einsum('Xx, IJ, YxCD->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, optimize = True)
temp -= np.einsum('Yx, IJ, XxCD->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, optimize = True)
temp -= np.einsum('IJ, XxCD, iYix->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, optimize = True)
temp += np.einsum('IJ, YxCD, iXix->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, xyCD, xyXY->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, optimize = True)
temp -= np.einsum('IJ, XxCD, xY->IXYJCD', np.identity(ncore), v_aaee_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, YxCD, xX->IXYJCD', np.identity(ncore), v_aaee_so, rdm_ca_so, optimize = True)
temp -= np.einsum('C, IJ, XxCD, xY->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp += np.einsum('C, IJ, YxCD, xX->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp -= np.einsum('D, IJ, XxCD, xY->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp += np.einsum('D, IJ, YxCD, xX->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp += np.einsum('Xx, IJ, xyCD, yY->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp -= np.einsum('Yx, IJ, xyCD, yX->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp += np.einsum('xy, IJ, XxCD, yY->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, IJ, YxCD, yX->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, XxCD, xyYz, zy->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, XxCD, iyix, yY->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, YxCD, xyXz, zy->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, YxCD, iyix, yX->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, xyCD, iXix, yY->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, xyCD, iYix, yX->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('IJ, xyCD, xyXz, zY->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ca_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, xyCD, xyYz, zX->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, xyCD, xzXY, yz->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ca_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, xyCD, xyXY->IXYJCD', np.identity(ncore), v_aaee_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('C, IJ, xyCD, xyXY->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('D, IJ, xyCD, xyXY->IXYJCD', e_extern_so, np.identity(ncore), t1_aaee, rdm_ccaa_so, optimize = True)
temp += np.einsum('xy, IJ, xzCD, yzXY->IXYJCD', h_aa_so, np.identity(ncore), t1_aaee, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, XxCD, xyzw, zwYy->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('IJ, YxCD, xyzw, zwXy->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.25 * np.einsum('IJ, xyCD, xyzw, zwXY->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, xyCD, xzXw, ywYz->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, xyCD, xzYw, ywXz->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, xyCD, izix, yzXY->IXYJCD', np.identity(ncore), t1_aaee, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, xyCD, xzwu, ywuXYz->IXYJCD', np.identity(ncore), t1_aaee, v_aaaa_so, rdm_cccaaa_so, optimize = True)
