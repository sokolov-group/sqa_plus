
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(i,X,x) v(I,x,i,Y) 
 (   1.00000) X(i,Y,x) v(I,x,i,X) 
 (   1.00000) X(i,X,Y) gamma(x,y) v(I,x,i,y) 
 (  -1.00000) X(i,X,Y) v(I,x,i,y) cre(y) des(x) 
 (   1.00000) X(i,X,x) v(I,x,i,y) cre(y) des(Y) 
 (   1.00000) X(i,X,x) v(I,y,i,Y) cre(x) des(y) 
 (  -1.00000) X(i,Y,x) v(I,x,i,y) cre(y) des(X) 
 (  -1.00000) X(i,Y,x) v(I,y,i,X) cre(x) des(y) 
 (   1.00000) X(i,x,y) v(I,x,i,X) cre(y) des(Y) 
 (  -1.00000) X(i,x,y) v(I,x,i,Y) cre(y) des(X) 
 (  -1.00000) X(i,X,x) gamma(y,z) v(I,y,i,z) cre(x) des(Y) 
 (   1.00000) X(i,Y,x) gamma(y,z) v(I,y,i,z) cre(x) des(X) 
 (  -1.00000) X(i,X,x) v(I,y,i,z) cre(x) cre(z) des(Y) des(y) 
 (   1.00000) X(i,Y,x) v(I,y,i,z) cre(x) cre(z) des(X) des(y) 
 (  -1.00000) X(i,x,y) v(I,x,i,z) cre(y) cre(z) des(X) des(Y) 
 (  -0.50000) X(i,x,y) v(I,z,i,X) cre(x) cre(y) des(Y) des(z) 
 (   0.50000) X(i,x,y) v(I,z,i,Y) cre(x) cre(y) des(X) des(z) 
 (  -0.50000) X(i,x,y) gamma(z,w) v(I,z,i,w) cre(x) cre(y) des(X) des(Y) 
 (   0.50000) X(i,x,y) v(I,z,i,w) cre(x) cre(y) cre(w) des(X) des(Y) des(z) 

Total terms : 19
SQA automation time :  15.863 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('iXx, IxiY->IXY', X, v_caca_so, optimize = True)
temp += np.einsum('iYx, IxiX->IXY', X, v_caca_so, optimize = True)
temp += np.einsum('iXY, xy, Ixiy->IXY', X, rdm_ca_so, v_caca_so, optimize = True)
temp -= np.einsum('iXY, Ixiy, yx->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('iXx, Ixiy, yY->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('iXx, IyiY, xy->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iYx, Ixiy, yX->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iYx, IyiX, xy->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('ixy, IxiX, yY->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('ixy, IxiY, yX->IXY', X, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iXx, yz, Iyiz, xY->IXY', X, rdm_ca_so, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('iYx, yz, Iyiz, xX->IXY', X, rdm_ca_so, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iXx, Iyiz, xzYy->IXY', X, v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('iYx, Iyiz, xzXy->IXY', X, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixy, Ixiz, yzXY->IXY', X, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('ixy, IziX, xyYz->IXY', X, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('ixy, IziY, xyXz->IXY', X, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('ixy, zw, Iziw, xyXY->IXY', X, rdm_ca_so, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('ixy, Iziw, xywXYz->IXY', X, v_caca_so, rdm_cccaaa_so, optimize = True)
