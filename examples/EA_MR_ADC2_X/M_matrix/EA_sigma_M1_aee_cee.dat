
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(i,A,B) h(i,x) cre(X) des(x) 
 (   1.00000) X(i,A,B) v(i,j,j,x) cre(X) des(x) 
 (  -1.00000) X(i,A,a) v(i,B,x,a) cre(X) des(x) 
 (   1.00000) X(i,B,a) v(i,A,x,a) cre(X) des(x) 
 (   1.00000) X(i,A,B) e(i) t1(i,x) cre(X) des(x) 
 (  -1.00000) X(i,A,B) h(x,y) t1(i,x) cre(X) des(y) 
 (  -1.00000) X(i,A,B) t1(i,x) v(j,x,j,y) cre(X) des(y) 
 (   0.50000) X(i,A,B) v(i,z,x,y) cre(X) cre(z) des(x) des(y) 
 (  -0.50000) X(i,A,B) e(i) t1(i,x,y,z) cre(X) cre(x) des(y) des(z) 
 (  -0.50000) X(i,A,B) h(x,y) t1(i,x,z,w) cre(X) cre(y) des(z) des(w) 
 (   1.00000) X(i,A,B) h(x,y) t1(i,z,x,w) cre(X) cre(z) des(y) des(w) 
 (   0.50000) X(i,A,B) t1(i,x) v(y,z,x,w) cre(X) cre(w) des(y) des(z) 
 (  -1.00000) X(i,A,B) t1(i,x,y,z) v(j,y,j,w) cre(X) cre(x) des(z) des(w) 
 (   0.25000) X(i,A,B) t1(i,x,y,z) v(w,u,y,z) cre(X) cre(x) des(w) des(u) 
 (  -0.50000) X(i,A,B) t1(i,x,y,z) v(j,w,j,x) cre(X) cre(w) des(y) des(z) 
 (  -0.25000) X(i,A,B) t1(i,x,y,z) v(x,w,u,v) cre(X) cre(u) cre(v) des(y) des(z) des(w) 
 (  -0.50000) X(i,A,B) t1(i,x,y,z) v(w,u,y,v) cre(X) cre(x) cre(v) des(z) des(w) des(u) 

Total terms : 17
SQA automation time :  0.980 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('iAB, ix, Xx->XAB', X, h_ca_so, rdm_ca_so, optimize = True)
temp += np.einsum('iAB, ijjx, Xx->XAB', X, v_ccca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iAa, iBxa, Xx->XAB', X, v_ceae_so, rdm_ca_so, optimize = True)
temp += np.einsum('iBa, iAxa, Xx->XAB', X, v_ceae_so, rdm_ca_so, optimize = True)
temp += np.einsum('iAB, i, ix, Xx->XAB', X, e_core_so, t1_ca, rdm_ca_so, optimize = True)
temp -= np.einsum('iAB, xy, ix, Xy->XAB', X, h_aa_so, t1_ca, rdm_ca_so, optimize = True)
temp -= np.einsum('iAB, ix, jxjy, Xy->XAB', X, t1_ca, v_caca_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('iAB, izxy, Xzxy->XAB', X, v_caaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('iAB, i, ixyz, Xxyz->XAB', X, e_core_so, t1_caaa, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('iAB, xy, ixzw, Xyzw->XAB', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
temp += np.einsum('iAB, xy, izxw, Xzyw->XAB', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('iAB, ix, yzxw, Xwyz->XAB', X, t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('iAB, ixyz, jyjw, Xxzw->XAB', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.25 * np.einsum('iAB, ixyz, wuyz, Xxwu->XAB', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('iAB, ixyz, jwjx, Xwyz->XAB', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.25 * np.einsum('iAB, ixyz, xwuv, Xuvyzw->XAB', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('iAB, ixyz, wuyv, Xxvzwu->XAB', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
