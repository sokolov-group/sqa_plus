
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(i,x,A,a) v(i,Z,y,a) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) X(i,x,A,a) v(i,y,X,a) cre(Z) cre(x) des(Y) des(y) 
 (  -1.00000) X(i,x,A,a) v(i,y,Y,a) cre(Z) cre(x) des(X) des(y) 
 (   0.50000) X(i,x,a,b) v(i,A,a,b) cre(Z) cre(x) des(X) des(Y) 
 (  -1.00000) X(i,x,A,a) e(i) t1(i,Z,a,y) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) X(i,x,A,a) e(i) t1(i,y,a,X) cre(Z) cre(x) des(Y) des(y) 
 (  -1.00000) X(i,x,A,a) e(i) t1(i,y,a,Y) cre(Z) cre(x) des(X) des(y) 
 (   1.00000) X(i,x,A,a) e(a) t1(i,Z,a,y) cre(x) cre(y) des(X) des(Y) 
 (  -1.00000) X(i,x,A,a) e(a) t1(i,y,a,X) cre(Z) cre(x) des(Y) des(y) 
 (   1.00000) X(i,x,A,a) e(a) t1(i,y,a,Y) cre(Z) cre(x) des(X) des(y) 
 (  -1.00000) X(i,x,A,a) h(X,y) t1(i,z,a,y) cre(Z) cre(x) des(Y) des(z) 
 (   1.00000) X(i,x,A,a) h(Y,y) t1(i,z,a,y) cre(Z) cre(x) des(X) des(z) 
 (  -1.00000) X(i,x,A,a) h(Z,y) t1(i,y,a,z) cre(x) cre(z) des(X) des(Y) 
 (   1.00000) X(i,x,A,a) h(y,z) t1(i,Z,a,y) cre(x) cre(z) des(X) des(Y) 
 (   1.00000) X(i,x,A,a) h(y,z) t1(i,y,a,X) cre(Z) cre(x) des(Y) des(z) 
 (  -1.00000) X(i,x,A,a) h(y,z) t1(i,y,a,Y) cre(Z) cre(x) des(X) des(z) 
 (   1.00000) X(i,x,A,a) t1(i,Z,a,y) v(j,z,j,y) cre(x) cre(z) des(X) des(Y) 
 (   1.00000) X(i,x,A,a) t1(i,y,a,X) v(j,y,j,z) cre(Z) cre(x) des(Y) des(z) 
 (   0.50000) X(i,x,A,a) t1(i,y,a,X) v(z,w,Y,y) cre(Z) cre(x) des(z) des(w) 
 (  -1.00000) X(i,x,A,a) t1(i,y,a,Y) v(j,y,j,z) cre(Z) cre(x) des(X) des(z) 
 (  -0.50000) X(i,x,A,a) t1(i,y,a,Y) v(z,w,X,y) cre(Z) cre(x) des(z) des(w) 
 (  -1.00000) X(i,x,A,a) t1(i,y,a,z) v(j,X,j,z) cre(Z) cre(x) des(Y) des(y) 
 (   1.00000) X(i,x,A,a) t1(i,y,a,z) v(j,Y,j,z) cre(Z) cre(x) des(X) des(y) 
 (  -1.00000) X(i,x,A,a) t1(i,y,a,z) v(j,y,j,Z) cre(x) cre(z) des(X) des(Y) 
 (   1.00000) X(i,x,A,a) t1(i,y,a,z) v(z,w,X,Y) cre(Z) cre(x) des(y) des(w) 
 (   0.50000) X(i,x,A,a) t1(i,Z,a,y) v(y,z,w,u) cre(x) cre(w) cre(u) des(X) des(Y) des(z) 
 (   0.50000) X(i,x,A,a) t1(i,y,a,X) v(z,w,y,u) cre(Z) cre(x) cre(u) des(Y) des(z) des(w) 
 (  -0.50000) X(i,x,A,a) t1(i,y,a,Y) v(z,w,y,u) cre(Z) cre(x) cre(u) des(X) des(z) des(w) 
 (   0.50000) X(i,x,A,a) t1(i,y,a,z) v(Z,z,w,u) cre(x) cre(w) cre(u) des(X) des(Y) des(y) 
 (  -1.00000) X(i,x,A,a) t1(i,y,a,z) v(Z,w,y,u) cre(x) cre(z) cre(u) des(X) des(Y) des(w) 
 (  -1.00000) X(i,x,A,a) t1(i,y,a,z) v(z,w,X,u) cre(Z) cre(x) cre(u) des(Y) des(y) des(w) 
 (   1.00000) X(i,x,A,a) t1(i,y,a,z) v(z,w,Y,u) cre(Z) cre(x) cre(u) des(X) des(y) des(w) 
 (   0.50000) X(i,x,A,a) t1(i,y,a,z) v(w,u,X,y) cre(Z) cre(x) cre(z) des(Y) des(w) des(u) 
 (  -0.50000) X(i,x,A,a) t1(i,y,a,z) v(w,u,Y,y) cre(Z) cre(x) cre(z) des(X) des(w) des(u) 

Total terms : 34
SQA automation time :  1.022 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('ixAa, iZya, xyXY->XYAZ', X, v_caae_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, iyXa, ZxYy->XYAZ', X, v_caae_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, iyYa, ZxXy->XYAZ', X, v_caae_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('ixab, iAab, ZxXY->XYAZ', X, v_ceee_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, i, iZay, xyXY->XYAZ', X, e_core_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, i, iyaX, ZxYy->XYAZ', X, e_core_so, t1_caea, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, i, iyaY, ZxXy->XYAZ', X, e_core_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, a, iZay, xyXY->XYAZ', X, e_extern_so, t1_caea, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, a, iyaX, ZxYy->XYAZ', X, e_extern_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, a, iyaY, ZxXy->XYAZ', X, e_extern_so, t1_caea, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, Xy, izay, ZxYz->XYAZ', X, h_aa_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, Yy, izay, ZxXz->XYAZ', X, h_aa_so, t1_caea, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, Zy, iyaz, xzXY->XYAZ', X, h_aa_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, yz, iZay, xzXY->XYAZ', X, h_aa_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, yz, iyaX, ZxYz->XYAZ', X, h_aa_so, t1_caea, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, yz, iyaY, ZxXz->XYAZ', X, h_aa_so, t1_caea, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, iZay, jzjy, xzXY->XYAZ', X, t1_caea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, iyaX, jyjz, ZxYz->XYAZ', X, t1_caea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('ixAa, iyaX, zwYy, Zxzw->XYAZ', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, iyaY, jyjz, ZxXz->XYAZ', X, t1_caea, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('ixAa, iyaY, zwXy, Zxzw->XYAZ', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, iyaz, jXjz, ZxYy->XYAZ', X, t1_caea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, iyaz, jYjz, ZxXy->XYAZ', X, t1_caea, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixAa, iyaz, jyjZ, xzXY->XYAZ', X, t1_caea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('ixAa, iyaz, zwXY, Zxyw->XYAZ', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('ixAa, iZay, yzwu, xwuXYz->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('ixAa, iyaX, zwyu, ZxuYzw->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('ixAa, iyaY, zwyu, ZxuXzw->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('ixAa, iyaz, Zzwu, xwuXYy->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= np.einsum('ixAa, iyaz, Zwyu, xzuXYw->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= np.einsum('ixAa, iyaz, zwXu, ZxuYyw->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += np.einsum('ixAa, iyaz, zwYu, ZxuXyw->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('ixAa, iyaz, wuXy, ZxzYwu->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('ixAa, iyaz, wuYy, ZxzXwu->XYAZ', X, t1_caea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
