
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(i,x,A,y) h(i,y) cre(X) des(x) 
 (   1.00000) X(i,x,A,y) v(i,j,j,y) cre(X) des(x) 
 (  -1.00000) X(i,x,a,y) v(i,A,y,a) cre(X) des(x) 
 (   1.00000) X(i,x,A,y) e(i) t1(i,y) cre(X) des(x) 
 (  -1.00000) X(i,x,A,y) h(y,z) t1(i,z) cre(X) des(x) 
 (  -1.00000) X(i,x,A,y) t1(i,z) v(j,z,j,y) cre(X) des(x) 
 (  -1.00000) X(i,x,A,y) h(i,z) cre(X) cre(y) des(x) des(z) 
 (   1.00000) X(i,x,A,y) v(i,w,y,z) cre(X) cre(w) des(x) des(z) 
 (   1.00000) X(i,x,A,y) v(i,j,j,z) cre(X) cre(y) des(x) des(z) 
 (  -1.00000) X(i,x,a,y) v(i,A,z,a) cre(X) cre(y) des(x) des(z) 
 (   1.00000) X(i,x,A,y) e(i) t1(i,z) cre(X) cre(y) des(x) des(z) 
 (  -1.00000) X(i,x,A,y) e(i) t1(i,z,y,w) cre(X) cre(z) des(x) des(w) 
 (   1.00000) X(i,x,A,y) h(y,z) t1(i,w,z,u) cre(X) cre(w) des(x) des(u) 
 (  -1.00000) X(i,x,A,y) h(z,w) t1(i,z) cre(X) cre(y) des(x) des(w) 
 (  -1.00000) X(i,x,A,y) h(z,w) t1(i,z,y,u) cre(X) cre(w) des(x) des(u) 
 (   1.00000) X(i,x,A,y) h(z,w) t1(i,u,y,z) cre(X) cre(u) des(x) des(w) 
 (   1.00000) X(i,x,A,y) t1(i,z) v(y,w,z,u) cre(X) cre(u) des(x) des(w) 
 (  -1.00000) X(i,x,A,y) t1(i,z) v(j,z,j,w) cre(X) cre(y) des(x) des(w) 
 (   1.00000) X(i,x,A,y) t1(i,z,y,w) v(j,w,j,u) cre(X) cre(z) des(x) des(u) 
 (  -1.00000) X(i,x,A,y) t1(i,z,y,w) v(j,u,j,z) cre(X) cre(u) des(x) des(w) 
 (   0.50000) X(i,x,A,y) t1(i,z,w,u) v(y,v,w,u) cre(X) cre(z) des(x) des(v) 
 (   1.00000) X(i,x,A,y) t1(i,z,w,u) v(j,w,j,y) cre(X) cre(z) des(x) des(u) 
 (  -0.50000) X(i,x,A,y) v(i,u,z,w) cre(X) cre(y) cre(u) des(x) des(z) des(w) 
 (   0.50000) X(i,x,A,y) e(i) t1(i,z,w,u) cre(X) cre(y) cre(z) des(x) des(w) des(u) 
 (   0.50000) X(i,x,A,y) h(z,w) t1(i,z,u,v) cre(X) cre(y) cre(w) des(x) des(u) des(v) 
 (  -1.00000) X(i,x,A,y) h(z,w) t1(i,u,z,v) cre(X) cre(y) cre(u) des(x) des(w) des(v) 
 (  -0.50000) X(i,x,A,y) t1(i,z) v(w,u,z,v) cre(X) cre(y) cre(v) des(x) des(w) des(u) 
 (  -0.50000) X(i,x,A,y) t1(i,z,y,w) v(z,u,v,s) cre(X) cre(v) cre(s) des(x) des(w) des(u) 
 (   0.50000) X(i,x,A,y) t1(i,z,y,w) v(u,v,w,s) cre(X) cre(z) cre(s) des(x) des(u) des(v) 
 (   0.25000) X(i,x,A,y) t1(i,z,w,u) v(y,z,v,s) cre(X) cre(v) cre(s) des(x) des(w) des(u) 
 (   1.00000) X(i,x,A,y) t1(i,z,w,u) v(y,v,w,s) cre(X) cre(z) cre(s) des(x) des(u) des(v) 
 (   1.00000) X(i,x,A,y) t1(i,z,w,u) v(j,w,j,v) cre(X) cre(y) cre(z) des(x) des(u) des(v) 
 (  -0.25000) X(i,x,A,y) t1(i,z,w,u) v(v,s,w,u) cre(X) cre(y) cre(z) des(x) des(v) des(s) 
 (   0.50000) X(i,x,A,y) t1(i,z,w,u) v(j,v,j,z) cre(X) cre(y) cre(v) des(x) des(w) des(u) 
 (  -0.25000) X(i,x,A,y) t1(i,z,w,u) v(z,v,s,t) cre(X) cre(y) cre(s) cre(t) des(x) des(w) des(u) des(v) 
 (  -0.50000) X(i,x,A,y) t1(i,z,w,u) v(v,s,w,t) cre(X) cre(y) cre(z) cre(t) des(x) des(u) des(v) des(s) 

Total terms : 36
SQA automation time :  0.446 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('ixAy, iy, Xx->XA', X, h_ca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('ixAy, ijjy, Xx->XA', X, v_ccca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('ixay, iAya, Xx->XA', X, v_ceae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('ixAy, i, iy, Xx->XA', X, e_core_so, t1_ca, rdm_ca_so, optimize = True)
    temp -= np.einsum('ixAy, yz, iz, Xx->XA', X, h_aa_so, t1_ca, rdm_ca_so, optimize = True)
    temp -= np.einsum('ixAy, iz, jzjy, Xx->XA', X, t1_ca, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('ixAy, iz, Xyxz->XA', X, h_ca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, iwyz, Xwxz->XA', X, v_caaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, ijjz, Xyxz->XA', X, v_ccca_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ixay, iAza, Xyxz->XA', X, v_ceae_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, i, iz, Xyxz->XA', X, e_core_so, t1_ca, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ixAy, i, izyw, Xzxw->XA', X, e_core_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, yz, iwzu, Xwxu->XA', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ixAy, zw, iz, Xyxw->XA', X, h_aa_so, t1_ca, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ixAy, zw, izyu, Xwxu->XA', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, zw, iuyz, Xuxw->XA', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, iz, ywzu, Xuxw->XA', X, t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ixAy, iz, jzjw, Xyxw->XA', X, t1_ca, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, izyw, jwju, Xzxu->XA', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ixAy, izyw, jujz, Xuxw->XA', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('ixAy, izwu, yvwu, Xzxv->XA', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('ixAy, izwu, jwjy, Xzxu->XA', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('ixAy, iuzw, Xyuxzw->XA', X, v_caaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('ixAy, i, izwu, Xyzxwu->XA', X, e_core_so, t1_caaa, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('ixAy, zw, izuv, Xywxuv->XA', X, h_aa_so, t1_caaa, rdm_cccaaa_so, optimize = True)
    temp -= np.einsum('ixAy, zw, iuzv, Xyuxwv->XA', X, h_aa_so, t1_caaa, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('ixAy, iz, wuzv, Xyvxwu->XA', X, t1_ca, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('ixAy, izyw, zuvs, Xvsxwu->XA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('ixAy, izyw, uvws, Xzsxuv->XA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('ixAy, izwu, yzvs, Xvsxwu->XA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('ixAy, izwu, yvws, Xzsxuv->XA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('ixAy, izwu, jwjv, Xyzxuv->XA', X, t1_caaa, v_caca_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('ixAy, izwu, vswu, Xyzxvs->XA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('ixAy, izwu, jvjz, Xyvxwu->XA', X, t1_caaa, v_caca_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('ixAy, izwu, zvst, Xystxwuv->XA', X, t1_caaa, v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('ixAy, izwu, vswt, Xyztxuvs->XA', X, t1_caaa, v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
