
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(I,i,A,x) h(i,x) 
 (  -1.00000) X(I,i,A,x) v(i,j,j,x) 
 (   1.00000) X(I,i,a,x) v(i,A,x,a) 
 (  -0.50000) X(i,j,A,x) v(i,j,I,x) 
 (  -1.00000) X(I,i,A,x) e(i) t1(i,x) 
 (   1.00000) X(I,i,A,x) h(x,y) t1(i,y) 
 (   1.00000) X(I,i,A,x) t1(i,y) v(j,y,j,x) 
 (  -1.00000) X(I,i,A,x) h(i,y) cre(x) des(y) 
 (   1.00000) X(I,i,A,x) v(i,z,x,y) cre(z) des(y) 
 (   1.00000) X(I,i,A,x) v(i,j,j,y) cre(x) des(y) 
 (  -1.00000) X(I,i,a,x) v(i,A,y,a) cre(x) des(y) 
 (   0.50000) X(i,j,A,x) v(i,j,I,y) cre(x) des(y) 
 (   1.00000) X(I,i,A,x) e(i) t1(i,y) cre(x) des(y) 
 (  -1.00000) X(I,i,A,x) e(i) t1(i,y,x,z) cre(y) des(z) 
 (   1.00000) X(I,i,A,x) h(x,y) t1(i,z,y,w) cre(z) des(w) 
 (  -1.00000) X(I,i,A,x) h(y,z) t1(i,y) cre(x) des(z) 
 (  -1.00000) X(I,i,A,x) h(y,z) t1(i,y,x,w) cre(z) des(w) 
 (   1.00000) X(I,i,A,x) h(y,z) t1(i,w,x,y) cre(w) des(z) 
 (   1.00000) X(I,i,A,x) t1(i,y) v(x,z,y,w) cre(w) des(z) 
 (  -1.00000) X(I,i,A,x) t1(i,y) v(j,y,j,z) cre(x) des(z) 
 (   1.00000) X(I,i,A,x) t1(i,y,x,z) v(j,z,j,w) cre(y) des(w) 
 (  -1.00000) X(I,i,A,x) t1(i,y,x,z) v(j,w,j,y) cre(w) des(z) 
 (   0.50000) X(I,i,A,x) t1(i,y,z,w) v(x,u,z,w) cre(y) des(u) 
 (   1.00000) X(I,i,A,x) t1(i,y,z,w) v(j,z,j,x) cre(y) des(w) 
 (   0.50000) X(I,i,A,x) v(i,w,y,z) cre(x) cre(w) des(y) des(z) 
 (  -0.50000) X(I,i,A,x) e(i) t1(i,y,z,w) cre(x) cre(y) des(z) des(w) 
 (  -0.50000) X(I,i,A,x) h(y,z) t1(i,y,w,u) cre(x) cre(z) des(w) des(u) 
 (   1.00000) X(I,i,A,x) h(y,z) t1(i,w,y,u) cre(x) cre(w) des(z) des(u) 
 (   0.50000) X(I,i,A,x) t1(i,y) v(z,w,y,u) cre(x) cre(u) des(z) des(w) 
 (   0.50000) X(I,i,A,x) t1(i,y,x,z) v(y,w,u,v) cre(u) cre(v) des(z) des(w) 
 (  -0.50000) X(I,i,A,x) t1(i,y,x,z) v(w,u,z,v) cre(y) cre(v) des(w) des(u) 
 (  -0.25000) X(I,i,A,x) t1(i,y,z,w) v(x,y,u,v) cre(u) cre(v) des(z) des(w) 
 (  -1.00000) X(I,i,A,x) t1(i,y,z,w) v(x,u,z,v) cre(y) cre(v) des(w) des(u) 
 (  -1.00000) X(I,i,A,x) t1(i,y,z,w) v(j,z,j,u) cre(x) cre(y) des(w) des(u) 
 (   0.25000) X(I,i,A,x) t1(i,y,z,w) v(u,v,z,w) cre(x) cre(y) des(u) des(v) 
 (  -0.50000) X(I,i,A,x) t1(i,y,z,w) v(j,u,j,y) cre(x) cre(u) des(z) des(w) 
 (  -0.25000) X(I,i,A,x) t1(i,y,z,w) v(y,u,v,s) cre(x) cre(v) cre(s) des(z) des(w) des(u) 
 (  -0.50000) X(I,i,A,x) t1(i,y,z,w) v(u,v,z,s) cre(x) cre(y) cre(s) des(w) des(u) des(v) 

Total terms : 38
SQA automation time :  0.775 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('IiAx, ix->IA', X, h_ca_so, optimize = True)
    temp -= np.einsum('IiAx, ijjx->IA', X, v_ccca_so, optimize = True)
    temp += np.einsum('Iiax, iAxa->IA', X, v_ceae_so, optimize = True)
    temp -= 0.5 * np.einsum('ijAx, ijIx->IA', X, v_ccca_so, optimize = True)
    temp -= np.einsum('IiAx, i, ix->IA', X, e_core_so, t1_ca, optimize = True)
    temp += np.einsum('IiAx, xy, iy->IA', X, h_aa_so, t1_ca, optimize = True)
    temp += np.einsum('IiAx, iy, jyjx->IA', X, t1_ca, v_caca_so, optimize = True)
    temp -= np.einsum('IiAx, iy, xy->IA', X, h_ca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, izxy, zy->IA', X, v_caaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, ijjy, xy->IA', X, v_ccca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Iiax, iAya, xy->IA', X, v_ceae_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('ijAx, ijIy, xy->IA', X, v_ccca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, i, iy, xy->IA', X, e_core_so, t1_ca, rdm_ca_so, optimize = True)
    temp -= np.einsum('IiAx, i, iyxz, yz->IA', X, e_core_so, t1_caaa, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, xy, izyw, zw->IA', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('IiAx, yz, iy, xz->IA', X, h_aa_so, t1_ca, rdm_ca_so, optimize = True)
    temp -= np.einsum('IiAx, yz, iyxw, zw->IA', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, yz, iwxy, wz->IA', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, iy, xzyw, wz->IA', X, t1_ca, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IiAx, iy, jyjz, xz->IA', X, t1_ca, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, iyxz, jzjw, yw->IA', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IiAx, iyxz, jwjy, wz->IA', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('IiAx, iyzw, xuzw, yu->IA', X, t1_caaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IiAx, iyzw, jzjx, yw->IA', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('IiAx, iwyz, xwyz->IA', X, v_caaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IiAx, i, iyzw, xyzw->IA', X, e_core_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IiAx, yz, iywu, xzwu->IA', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IiAx, yz, iwyu, xwzu->IA', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IiAx, iy, zwyu, xuzw->IA', X, t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IiAx, iyxz, ywuv, uvzw->IA', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IiAx, iyxz, wuzv, yvwu->IA', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.25 * np.einsum('IiAx, iyzw, xyuv, uvzw->IA', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('IiAx, iyzw, xuzv, yvwu->IA', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('IiAx, iyzw, jzju, xywu->IA', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('IiAx, iyzw, uvzw, xyuv->IA', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IiAx, iyzw, jujy, xuzw->IA', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.25 * np.einsum('IiAx, iyzw, yuvs, xvszwu->IA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IiAx, iyzw, uvzs, xyswuv->IA', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
