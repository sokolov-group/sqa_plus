
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(I,x) v(x,y,A,B) cre(X) des(y) 
 (   1.00000) X(I,x) e(A) t1(x,y,A,B) cre(X) des(y) 
 (   1.00000) X(I,x) e(B) t1(x,y,A,B) cre(X) des(y) 
 (  -1.00000) X(I,x) h(x,y) t1(y,z,A,B) cre(X) des(z) 
 (  -1.00000) X(I,x) h(y,z) t1(x,y,A,B) cre(X) des(z) 
 (  -1.00000) X(I,x) t1(x,y,A,B) v(i,y,i,z) cre(X) des(z) 
 (  -0.50000) X(I,x) t1(y,z,A,B) v(x,w,y,z) cre(X) des(w) 
 (  -1.00000) X(I,x) t1(y,z,A,B) v(i,y,i,x) cre(X) des(z) 
 (   0.50000) X(I,x) t1(x,y,A,B) v(z,w,y,u) cre(X) cre(u) des(z) des(w) 
 (   1.00000) X(I,x) t1(y,z,A,B) v(x,w,y,u) cre(X) cre(u) des(z) des(w) 

Total terms : 10
SQA automation time :  0.054 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('Ix, xyAB, Xy->IXAB', X, v_aaee_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, A, xyAB, Xy->IXAB', X, e_extern_so, t1_aaee, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, B, xyAB, Xy->IXAB', X, e_extern_so, t1_aaee, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xy, yzAB, Xz->IXAB', X, h_aa_so, t1_aaee, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, yz, xyAB, Xz->IXAB', X, h_aa_so, t1_aaee, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xyAB, iyiz, Xz->IXAB', X, t1_aaee, v_caca_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('Ix, yzAB, xwyz, Xw->IXAB', X, t1_aaee, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, yzAB, iyix, Xz->IXAB', X, t1_aaee, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('Ix, xyAB, zwyu, Xuzw->IXAB', X, t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, yzAB, xwyu, Xuzw->IXAB', X, t1_aaee, v_aaaa_so, rdm_ccaa_so, optimize = True)
