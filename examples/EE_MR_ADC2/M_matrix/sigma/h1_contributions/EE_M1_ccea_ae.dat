
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(x,A) v(I,J,X,x) 
 (  -1.00000) X(x,A) e(I) t1(I,J,X,x) 
 (  -1.00000) X(x,A) e(J) t1(I,J,X,x) 
 (  -1.00000) X(x,A) h(X,y) t1(I,J,x,y) 
 (   1.00000) X(x,A) h(x,y) t1(I,J,X,y) 
 (   1.00000) X(x,A) t1(I,J,X,y) v(i,x,i,y) 
 (  -1.00000) X(x,A) t1(I,J,x,y) v(i,X,i,y) 
 (   0.50000) X(x,A) t1(I,J,y,z) v(y,z,X,x) 
 (   1.00000) X(x,A) v(I,J,x,y) cre(y) des(X) 
 (  -1.00000) X(x,A) e(I) t1(I,J,x,y) cre(y) des(X) 
 (  -1.00000) X(x,A) e(J) t1(I,J,x,y) cre(y) des(X) 
 (   1.00000) X(x,A) h(x,y) t1(I,J,y,z) cre(z) des(X) 
 (   1.00000) X(x,A) h(y,z) t1(I,J,x,y) cre(z) des(X) 
 (   1.00000) X(x,A) t1(I,J,X,y) v(y,z,x,w) cre(w) des(z) 
 (  -1.00000) X(x,A) t1(I,J,x,y) v(y,z,X,w) cre(w) des(z) 
 (   1.00000) X(x,A) t1(I,J,x,y) v(i,z,i,y) cre(z) des(X) 
 (   1.00000) X(x,A) t1(I,J,y,z) v(i,x,i,y) cre(z) des(X) 
 (   0.50000) X(x,A) t1(I,J,y,z) v(y,z,x,w) cre(w) des(X) 
 (  -1.00000) X(x,A) t1(I,J,y,z) v(y,w,X,x) cre(z) des(w) 
 (  -0.50000) X(x,A) t1(I,J,x,y) v(y,z,w,u) cre(w) cre(u) des(X) des(z) 
 (  -1.00000) X(x,A) t1(I,J,y,z) v(y,w,x,u) cre(z) cre(u) des(X) des(w) 

Total terms : 21
SQA automation time :  0.602 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('xA, IJXx->IJAX', X, v_ccaa_so, optimize = True)
    temp -= np.einsum('xA, I, IJXx->IJAX', X, e_core_so, t1_ccaa, optimize = True)
    temp -= np.einsum('xA, J, IJXx->IJAX', X, e_core_so, t1_ccaa, optimize = True)
    temp -= np.einsum('xA, Xy, IJxy->IJAX', X, h_aa_so, t1_ccaa, optimize = True)
    temp += np.einsum('xA, xy, IJXy->IJAX', X, h_aa_so, t1_ccaa, optimize = True)
    temp += np.einsum('xA, IJXy, ixiy->IJAX', X, t1_ccaa, v_caca_so, optimize = True)
    temp -= np.einsum('xA, IJxy, iXiy->IJAX', X, t1_ccaa, v_caca_so, optimize = True)
    temp += 0.5 * np.einsum('xA, IJyz, yzXx->IJAX', X, t1_ccaa, v_aaaa_so, optimize = True)
    temp += np.einsum('xA, IJxy, yX->IJAX', X, v_ccaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, I, IJxy, yX->IJAX', X, e_core_so, t1_ccaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, J, IJxy, yX->IJAX', X, e_core_so, t1_ccaa, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, xy, IJyz, zX->IJAX', X, h_aa_so, t1_ccaa, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, yz, IJxy, zX->IJAX', X, h_aa_so, t1_ccaa, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, IJXy, yzxw, wz->IJAX', X, t1_ccaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, IJxy, yzXw, wz->IJAX', X, t1_ccaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, IJxy, iziy, zX->IJAX', X, t1_ccaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, IJyz, ixiy, zX->IJAX', X, t1_ccaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('xA, IJyz, yzxw, wX->IJAX', X, t1_ccaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, IJyz, ywXx, zw->IJAX', X, t1_ccaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, IJxy, yzwu, wuXz->IJAX', X, t1_ccaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, IJyz, ywxu, zuXw->IJAX', X, t1_ccaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
