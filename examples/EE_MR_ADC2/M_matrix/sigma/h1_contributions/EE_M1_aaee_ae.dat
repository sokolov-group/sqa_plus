
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   0.50000) X(x,A) v(y,z,x,B) cre(X) cre(Y) des(y) des(z) 
 (  -0.50000) X(x,B) v(y,z,x,A) cre(X) cre(Y) des(y) des(z) 
 (   1.00000) X(x,a) v(y,a,A,B) cre(X) cre(Y) des(x) des(y) 
 (  -0.50000) X(x,A) e(B) t1(y,z,B,x) cre(X) cre(Y) des(y) des(z) 
 (   0.50000) X(x,B) e(A) t1(y,z,A,x) cre(X) cre(Y) des(y) des(z) 
 (  -0.50000) X(x,A) h(x,y) t1(z,w,B,y) cre(X) cre(Y) des(z) des(w) 
 (   1.00000) X(x,A) h(y,z) t1(y,w,B,x) cre(X) cre(Y) des(z) des(w) 
 (   0.50000) X(x,B) h(x,y) t1(z,w,A,y) cre(X) cre(Y) des(z) des(w) 
 (  -1.00000) X(x,B) h(y,z) t1(y,w,A,x) cre(X) cre(Y) des(z) des(w) 
 (  -0.50000) X(x,A) t1(y,B) v(z,w,x,y) cre(X) cre(Y) des(z) des(w) 
 (  -1.00000) X(x,A) t1(y,z,B,x) v(i,y,i,w) cre(X) cre(Y) des(z) des(w) 
 (   0.25000) X(x,A) t1(y,z,B,x) v(w,u,y,z) cre(X) cre(Y) des(w) des(u) 
 (  -0.50000) X(x,A) t1(y,z,B,w) v(i,x,i,w) cre(X) cre(Y) des(y) des(z) 
 (   0.50000) X(x,B) t1(y,A) v(z,w,x,y) cre(X) cre(Y) des(z) des(w) 
 (   1.00000) X(x,B) t1(y,z,A,x) v(i,y,i,w) cre(X) cre(Y) des(z) des(w) 
 (  -0.25000) X(x,B) t1(y,z,A,x) v(w,u,y,z) cre(X) cre(Y) des(w) des(u) 
 (   0.50000) X(x,B) t1(y,z,A,w) v(i,x,i,w) cre(X) cre(Y) des(y) des(z) 
 (  -0.50000) X(x,A) t1(y,z,B,x) v(w,u,y,v) cre(X) cre(Y) cre(v) des(z) des(w) des(u) 
 (  -0.50000) X(x,A) t1(y,z,B,w) v(w,u,x,v) cre(X) cre(Y) cre(v) des(y) des(z) des(u) 
 (  -0.50000) X(x,A) t1(y,z,B,w) v(u,v,x,y) cre(X) cre(Y) cre(w) des(z) des(u) des(v) 
 (   0.50000) X(x,B) t1(y,z,A,x) v(w,u,y,v) cre(X) cre(Y) cre(v) des(z) des(w) des(u) 
 (   0.50000) X(x,B) t1(y,z,A,w) v(w,u,x,v) cre(X) cre(Y) cre(v) des(y) des(z) des(u) 
 (   0.50000) X(x,B) t1(y,z,A,w) v(u,v,x,y) cre(X) cre(Y) cre(w) des(z) des(u) des(v) 

Total terms : 23
SQA automation time :  0.087 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp = 0.5 * np.einsum('xA, yzxB, XYyz->XYAB', X, v_aaae_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xB, yzxA, XYyz->XYAB', X, v_aaae_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xa, yaAB, XYxy->XYAB', X, v_aeee_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, B, yzBx, XYyz->XYAB', X, e_extern_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, A, yzAx, XYyz->XYAB', X, e_extern_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, xy, zwBy, XYzw->XYAB', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, yz, ywBx, XYzw->XYAB', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, xy, zwAy, XYzw->XYAB', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xB, yz, ywAx, XYzw->XYAB', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yB, zwxy, XYzw->XYAB', X, t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, yzBx, iyiw, XYzw->XYAB', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('xA, yzBx, wuyz, XYwu->XYAB', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yzBw, ixiw, XYyz->XYAB', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, yA, zwxy, XYzw->XYAB', X, t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xB, yzAx, iyiw, XYzw->XYAB', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xB, yzAx, wuyz, XYwu->XYAB', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, yzAw, ixiw, XYyz->XYAB', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yzBx, wuyv, XYvzwu->XYAB', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yzBw, wuxv, XYvyzu->XYAB', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yzBw, uvxy, XYwzuv->XYAB', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, yzAx, wuyv, XYvzwu->XYAB', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, yzAw, wuxv, XYvyzu->XYAB', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xB, yzAw, uvxy, XYwzuv->XYAB', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
