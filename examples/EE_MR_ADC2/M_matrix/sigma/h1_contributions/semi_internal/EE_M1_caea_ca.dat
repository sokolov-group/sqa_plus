
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(I,x) h(x,A) cre(X) des(Y) 
 (  -1.00000) X(I,x) v(x,y,Y,A) cre(X) des(y) 
 (   1.00000) X(I,x) v(i,x,i,A) cre(X) des(Y) 
 (   1.00000) X(i,Y) v(I,x,i,A) cre(X) des(x) 
 (  -1.00000) X(i,x) v(I,x,i,A) cre(X) des(Y) 
 (   1.00000) X(I,x) e(A) t1(x,A) cre(X) des(Y) 
 (   1.00000) X(I,x) e(A) t1(x,y,A,Y) cre(X) des(y) 
 (   1.00000) X(I,x) h(Y,y) t1(x,z,A,y) cre(X) des(z) 
 (  -1.00000) X(I,x) h(x,y) t1(y,A) cre(X) des(Y) 
 (  -1.00000) X(I,x) h(x,y) t1(y,z,A,Y) cre(X) des(z) 
 (  -1.00000) X(I,x) h(y,z) t1(x,y,A,Y) cre(X) des(z) 
 (   1.00000) X(I,x) t1(y,A) v(x,z,Y,y) cre(X) des(z) 
 (  -1.00000) X(I,x) t1(y,A) v(i,y,i,x) cre(X) des(Y) 
 (  -1.00000) X(I,x) t1(x,y,A,Y) v(i,y,i,z) cre(X) des(z) 
 (   1.00000) X(I,x) t1(x,y,A,z) v(i,Y,i,z) cre(X) des(y) 
 (  -0.50000) X(I,x) t1(y,z,A,Y) v(x,w,y,z) cre(X) des(w) 
 (  -1.00000) X(I,x) t1(y,z,A,Y) v(i,y,i,x) cre(X) des(z) 
 (   1.00000) X(I,x) v(x,y,z,A) cre(X) cre(z) des(Y) des(y) 
 (  -1.00000) X(i,x) v(I,y,i,A) cre(X) cre(x) des(Y) des(y) 
 (  -1.00000) X(I,x) e(A) t1(x,y,A,z) cre(X) cre(z) des(Y) des(y) 
 (   1.00000) X(I,x) h(x,y) t1(y,z,A,w) cre(X) cre(w) des(Y) des(z) 
 (   1.00000) X(I,x) h(y,z) t1(x,y,A,w) cre(X) cre(w) des(Y) des(z) 
 (  -1.00000) X(I,x) h(y,z) t1(x,w,A,y) cre(X) cre(z) des(Y) des(w) 
 (   1.00000) X(I,x) t1(y,A) v(x,z,y,w) cre(X) cre(w) des(Y) des(z) 
 (   0.50000) X(I,x) t1(x,y,A,Y) v(z,w,y,u) cre(X) cre(u) des(z) des(w) 
 (   1.00000) X(I,x) t1(x,y,A,z) v(i,y,i,w) cre(X) cre(z) des(Y) des(w) 
 (  -1.00000) X(I,x) t1(x,y,A,z) v(z,w,Y,u) cre(X) cre(u) des(y) des(w) 
 (   0.50000) X(I,x) t1(x,y,A,z) v(w,u,Y,y) cre(X) cre(z) des(w) des(u) 
 (  -1.00000) X(I,x) t1(x,y,A,z) v(i,w,i,z) cre(X) cre(w) des(Y) des(y) 
 (   1.00000) X(I,x) t1(y,z,A,Y) v(x,w,y,u) cre(X) cre(u) des(z) des(w) 
 (   0.50000) X(I,x) t1(y,z,A,w) v(x,w,Y,u) cre(X) cre(u) des(y) des(z) 
 (   1.00000) X(I,x) t1(y,z,A,w) v(x,u,Y,y) cre(X) cre(w) des(z) des(u) 
 (   0.50000) X(I,x) t1(y,z,A,w) v(x,u,y,z) cre(X) cre(w) des(Y) des(u) 
 (   1.00000) X(I,x) t1(y,z,A,w) v(i,y,i,x) cre(X) cre(w) des(Y) des(z) 
 (  -0.50000) X(I,x) t1(x,y,A,z) v(z,w,u,v) cre(X) cre(u) cre(v) des(Y) des(y) des(w) 
 (   0.50000) X(I,x) t1(x,y,A,z) v(w,u,y,v) cre(X) cre(z) cre(v) des(Y) des(w) des(u) 
 (   0.25000) X(I,x) t1(y,z,A,w) v(x,w,u,v) cre(X) cre(u) cre(v) des(Y) des(y) des(z) 
 (   1.00000) X(I,x) t1(y,z,A,w) v(x,u,y,v) cre(X) cre(w) cre(v) des(Y) des(z) des(u) 

Total terms : 38
SQA automation time :  0.218 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('Ix, xA, XY->IXAY', X, h_ae_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xyYA, Xy->IXAY', X, v_aaae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, ixiA, XY->IXAY', X, v_cace_so, rdm_ca_so, optimize = True)
    temp += np.einsum('iY, IxiA, Xx->IXAY', X, v_cace_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('ix, IxiA, XY->IXAY', X, v_cace_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, A, xA, XY->IXAY', X, e_extern_so, t1_ae, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, A, xyAY, Xy->IXAY', X, e_extern_so, t1_aaea, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, Yy, xzAy, Xz->IXAY', X, h_aa_so, t1_aaea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xy, yA, XY->IXAY', X, h_aa_so, t1_ae, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xy, yzAY, Xz->IXAY', X, h_aa_so, t1_aaea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, yz, xyAY, Xz->IXAY', X, h_aa_so, t1_aaea, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, yA, xzYy, Xz->IXAY', X, t1_ae, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, yA, iyix, XY->IXAY', X, t1_ae, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xyAY, iyiz, Xz->IXAY', X, t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, xyAz, iYiz, Xy->IXAY', X, t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('Ix, yzAY, xwyz, Xw->IXAY', X, t1_aaea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, yzAY, iyix, Xz->IXAY', X, t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, xyzA, XzYy->IXAY', X, v_aaae_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('ix, IyiA, XxYy->IXAY', X, v_cace_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Ix, A, xyAz, XzYy->IXAY', X, e_extern_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, xy, yzAw, XwYz->IXAY', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, yz, xyAw, XwYz->IXAY', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Ix, yz, xwAy, XzYw->IXAY', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, yA, xzyw, XwYz->IXAY', X, t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Ix, xyAY, zwyu, Xuzw->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, xyAz, iyiw, XzYw->IXAY', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Ix, xyAz, zwYu, Xuyw->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Ix, xyAz, wuYy, Xzwu->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Ix, xyAz, iwiz, XwYy->IXAY', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, yzAY, xwyu, Xuzw->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Ix, yzAw, xwYu, Xuyz->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, yzAw, xuYy, Xwzu->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Ix, yzAw, xuyz, XwYu->IXAY', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, yzAw, iyix, XwYz->IXAY', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Ix, xyAz, zwuv, XuvYyw->IXAY', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('Ix, xyAz, wuyv, XzvYwu->IXAY', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('Ix, yzAw, xwuv, XuvYyz->IXAY', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('Ix, yzAw, xuyv, XwvYzu->IXAY', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
