
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(x,A) h(I,x) cre(X) des(Y) 
 (   1.00000) X(x,A) v(I,y,Y,x) cre(X) des(y) 
 (   1.00000) X(x,A) v(I,i,i,x) cre(X) des(Y) 
 (  -1.00000) X(x,a) v(I,a,Y,A) cre(X) des(x) 
 (   1.00000) X(x,A) e(I) t1(I,x) cre(X) des(Y) 
 (  -1.00000) X(x,A) e(I) t1(I,y,Y,x) cre(X) des(y) 
 (  -1.00000) X(x,A) h(Y,y) t1(I,z,x,y) cre(X) des(z) 
 (  -1.00000) X(x,A) h(x,y) t1(I,y) cre(X) des(Y) 
 (   1.00000) X(x,A) h(x,y) t1(I,z,Y,y) cre(X) des(z) 
 (  -1.00000) X(x,A) h(y,z) t1(I,y,Y,x) cre(X) des(z) 
 (  -1.00000) X(x,A) t1(I,y) v(i,x,i,y) cre(X) des(Y) 
 (   1.00000) X(x,A) t1(I,y) v(y,z,Y,x) cre(X) des(z) 
 (  -1.00000) X(x,A) t1(I,y,Y,x) v(i,y,i,z) cre(X) des(z) 
 (   1.00000) X(x,A) t1(I,y,Y,z) v(i,x,i,z) cre(X) des(y) 
 (  -1.00000) X(x,A) t1(I,y,x,z) v(i,Y,i,z) cre(X) des(y) 
 (   0.50000) X(x,A) t1(I,y,z,w) v(z,w,Y,x) cre(X) des(y) 
 (   1.00000) X(x,A) v(I,y,x,z) cre(X) cre(z) des(Y) des(y) 
 (   1.00000) X(x,a) v(I,a,y,A) cre(X) cre(y) des(Y) des(x) 
 (  -1.00000) X(x,A) e(I) t1(I,y,x,z) cre(X) cre(z) des(Y) des(y) 
 (   1.00000) X(x,A) h(x,y) t1(I,z,y,w) cre(X) cre(w) des(Y) des(z) 
 (  -1.00000) X(x,A) h(y,z) t1(I,y,x,w) cre(X) cre(w) des(Y) des(z) 
 (   1.00000) X(x,A) h(y,z) t1(I,w,x,y) cre(X) cre(z) des(Y) des(w) 
 (   1.00000) X(x,A) t1(I,y) v(y,z,x,w) cre(X) cre(w) des(Y) des(z) 
 (   0.50000) X(x,A) t1(I,y,Y,x) v(z,w,y,u) cre(X) cre(u) des(z) des(w) 
 (  -1.00000) X(x,A) t1(I,y,Y,z) v(z,w,x,u) cre(X) cre(u) des(y) des(w) 
 (   0.50000) X(x,A) t1(I,y,Y,z) v(w,u,x,y) cre(X) cre(z) des(w) des(u) 
 (  -1.00000) X(x,A) t1(I,y,x,z) v(i,y,i,w) cre(X) cre(z) des(Y) des(w) 
 (   1.00000) X(x,A) t1(I,y,x,z) v(z,w,Y,u) cre(X) cre(u) des(y) des(w) 
 (  -0.50000) X(x,A) t1(I,y,x,z) v(w,u,Y,y) cre(X) cre(z) des(w) des(u) 
 (   1.00000) X(x,A) t1(I,y,x,z) v(i,w,i,z) cre(X) cre(w) des(Y) des(y) 
 (   1.00000) X(x,A) t1(I,y,z,w) v(i,x,i,z) cre(X) cre(w) des(Y) des(y) 
 (   0.50000) X(x,A) t1(I,y,z,w) v(z,w,x,u) cre(X) cre(u) des(Y) des(y) 
 (   1.00000) X(x,A) t1(I,y,z,w) v(z,u,Y,x) cre(X) cre(w) des(y) des(u) 
 (   0.50000) X(x,A) t1(I,y,x,z) v(z,w,u,v) cre(X) cre(u) cre(v) des(Y) des(y) des(w) 
 (  -0.50000) X(x,A) t1(I,y,x,z) v(w,u,y,v) cre(X) cre(z) cre(v) des(Y) des(w) des(u) 
 (   1.00000) X(x,A) t1(I,y,z,w) v(z,u,x,v) cre(X) cre(w) cre(v) des(Y) des(y) des(u) 
 (   0.25000) X(x,A) t1(I,y,z,w) v(u,v,x,y) cre(X) cre(z) cre(w) des(Y) des(u) des(v) 

Total terms : 37
SQA automation time :  0.239 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('xA, Ix, XY->IXAY', X, h_ca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, IyYx, Xy->IXAY', X, v_caaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, Iiix, XY->IXAY', X, v_ccca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xa, IaYA, Xx->IXAY', X, v_ceae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, I, Ix, XY->IXAY', X, e_core_so, t1_ca, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, I, IyYx, Xy->IXAY', X, e_core_so, t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, Yy, Izxy, Xz->IXAY', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, xy, Iy, XY->IXAY', X, h_aa_so, t1_ca, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, xy, IzYy, Xz->IXAY', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, yz, IyYx, Xz->IXAY', X, h_aa_so, t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, Iy, ixiy, XY->IXAY', X, t1_ca, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, Iy, yzYx, Xz->IXAY', X, t1_ca, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, IyYx, iyiz, Xz->IXAY', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, IyYz, ixiz, Xy->IXAY', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, Iyxz, iYiz, Xy->IXAY', X, t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('xA, Iyzw, zwYx, Xy->IXAY', X, t1_caaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, Iyxz, XzYy->IXAY', X, v_caaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xa, IayA, XyYx->IXAY', X, v_ceae_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, I, Iyxz, XzYy->IXAY', X, e_core_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, xy, Izyw, XwYz->IXAY', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, yz, Iyxw, XwYz->IXAY', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, yz, Iwxy, XzYw->IXAY', X, h_aa_so, t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, Iy, yzxw, XwYz->IXAY', X, t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xA, IyYx, zwyu, Xuzw->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, IyYz, zwxu, Xuyw->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xA, IyYz, wuxy, Xzwu->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, Iyxz, iyiw, XzYw->IXAY', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, Iyxz, zwYu, Xuyw->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, Iyxz, wuYy, Xzwu->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, Iyxz, iwiz, XwYy->IXAY', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, Iyzw, ixiz, XwYy->IXAY', X, t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xA, Iyzw, zwxu, XuYy->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xA, Iyzw, zuYx, Xwyu->IXAY', X, t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xA, Iyxz, zwuv, XuvYyw->IXAY', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, Iyxz, wuyv, XzvYwu->IXAY', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('xA, Iyzw, zuxv, XwvYyu->IXAY', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('xA, Iyzw, uvxy, XzwYuv->IXAY', X, t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
