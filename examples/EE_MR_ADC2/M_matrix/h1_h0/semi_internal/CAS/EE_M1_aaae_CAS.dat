
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) h(x,A) cre(X) cre(Y) des(Z) des(x) 
 (   0.50000) v(x,y,Z,A) cre(X) cre(Y) des(x) des(y) 
 (   1.00000) v(i,x,i,A) cre(X) cre(Y) des(Z) des(x) 
 (   1.00000) e(A) t1(x,A) cre(X) cre(Y) des(Z) des(x) 
 (  -0.50000) e(A) t1(x,y,A,Z) cre(X) cre(Y) des(x) des(y) 
 (  -0.50000) h(Z,x) t1(y,z,A,x) cre(X) cre(Y) des(y) des(z) 
 (  -1.00000) h(x,y) t1(x,A) cre(X) cre(Y) des(Z) des(y) 
 (   1.00000) h(x,y) t1(x,z,A,Z) cre(X) cre(Y) des(y) des(z) 
 (  -1.00000) t1(x,A) v(i,x,i,y) cre(X) cre(Y) des(Z) des(y) 
 (  -0.50000) t1(x,A) v(y,z,Z,x) cre(X) cre(Y) des(y) des(z) 
 (  -1.00000) t1(x,y,A,Z) v(i,x,i,z) cre(X) cre(Y) des(y) des(z) 
 (   0.25000) t1(x,y,A,Z) v(z,w,x,y) cre(X) cre(Y) des(z) des(w) 
 (  -0.50000) t1(x,y,A,z) v(i,Z,i,z) cre(X) cre(Y) des(x) des(y) 
 (  -0.50000) v(x,y,z,A) cre(X) cre(Y) cre(z) des(Z) des(x) des(y) 
 (   0.50000) e(A) t1(x,y,A,z) cre(X) cre(Y) cre(z) des(Z) des(x) des(y) 
 (  -1.00000) h(x,y) t1(x,z,A,w) cre(X) cre(Y) cre(w) des(Z) des(y) des(z) 
 (   0.50000) h(x,y) t1(z,w,A,x) cre(X) cre(Y) cre(y) des(Z) des(z) des(w) 
 (  -0.50000) t1(x,A) v(y,z,x,w) cre(X) cre(Y) cre(w) des(Z) des(y) des(z) 
 (  -0.50000) t1(x,y,A,Z) v(z,w,x,u) cre(X) cre(Y) cre(u) des(y) des(z) des(w) 
 (   1.00000) t1(x,y,A,z) v(i,x,i,w) cre(X) cre(Y) cre(z) des(Z) des(y) des(w) 
 (  -0.50000) t1(x,y,A,z) v(z,w,Z,u) cre(X) cre(Y) cre(u) des(x) des(y) des(w) 
 (  -0.50000) t1(x,y,A,z) v(w,u,Z,x) cre(X) cre(Y) cre(z) des(y) des(w) des(u) 
 (  -0.25000) t1(x,y,A,z) v(w,u,x,y) cre(X) cre(Y) cre(z) des(Z) des(w) des(u) 
 (   0.50000) t1(x,y,A,z) v(i,w,i,z) cre(X) cre(Y) cre(w) des(Z) des(x) des(y) 
 (  -0.25000) t1(x,y,A,z) v(z,w,u,v) cre(X) cre(Y) cre(u) cre(v) des(Z) des(x) des(y) des(w) 
 (  -0.50000) t1(x,y,A,z) v(w,u,x,v) cre(X) cre(Y) cre(z) cre(v) des(Z) des(y) des(w) des(u) 

Total terms : 26
SQA automation time :  0.318 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('xA, IXYZx->XYAZI', h_ae_so, trdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyZA, IXYxy->XYAZI', v_aaae_so, trdm_ccaa_so, optimize = True)
    temp += np.einsum('ixiA, IXYZx->XYAZI', v_cace_so, trdm_ccaa_so, optimize = True)
    temp += np.einsum('A, xA, IXYZx->XYAZI', e_extern_so, t1_ae, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('A, xyAZ, IXYxy->XYAZI', e_extern_so, t1_aaea, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Zx, yzAx, IXYyz->XYAZI', h_aa_so, t1_aaea, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, xA, IXYZy->XYAZI', h_aa_so, t1_ae, trdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, xzAZ, IXYyz->XYAZI', h_aa_so, t1_aaea, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, ixiy, IXYZy->XYAZI', t1_ae, v_caca_so, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yzZx, IXYyz->XYAZI', t1_ae, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xyAZ, ixiz, IXYyz->XYAZI', t1_aaea, v_caca_so, trdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('xyAZ, zwxy, IXYzw->XYAZI', t1_aaea, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, iZiz, IXYxy->XYAZI', t1_aaea, v_caca_so, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyzA, IXYzZxy->XYAZI', v_aaae_so, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('A, xyAz, IXYzZxy->XYAZI', e_extern_so, t1_aaea, trdm_cccaaa_so, optimize = True)
    temp -= np.einsum('xy, xzAw, IXYwZyz->XYAZI', h_aa_so, t1_aaea, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xy, zwAx, IXYyZzw->XYAZI', h_aa_so, t1_aaea, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, yzxw, IXYwZyz->XYAZI', t1_ae, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAZ, zwxu, IXYuyzw->XYAZI', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp += np.einsum('xyAz, ixiw, IXYzZyw->XYAZI', t1_aaea, v_caca_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, zwZu, IXYuxyw->XYAZI', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, wuZx, IXYzywu->XYAZI', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAz, wuxy, IXYzZwu->XYAZI', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyAz, iwiz, IXYwZxy->XYAZI', t1_aaea, v_caca_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAz, zwuv, IXYuvZxyw->XYAZI', t1_aaea, v_aaaa_so, trdm_ccccaaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, wuxv, IXYzvZywu->XYAZI', t1_aaea, v_aaaa_so, trdm_ccccaaaa_so, optimize = True)
