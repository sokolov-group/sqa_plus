
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) v(x,A,B,C) cre(Y) cre(Z) des(X) des(x) 
 (   0.50000) kdelta(A,B) v(x,y,X,C) cre(Y) cre(Z) des(x) des(y) 
 (  -0.50000) kdelta(A,C) v(x,y,X,B) cre(Y) cre(Z) des(x) des(y) 
 (   0.50000) e(B) kdelta(A,C) t1(x,y,B,X) cre(Y) cre(Z) des(x) des(y) 
 (  -0.50000) e(C) kdelta(A,B) t1(x,y,C,X) cre(Y) cre(Z) des(x) des(y) 
 (  -0.50000) h(X,x) kdelta(A,B) t1(y,z,C,x) cre(Y) cre(Z) des(y) des(z) 
 (   0.50000) h(X,x) kdelta(A,C) t1(y,z,B,x) cre(Y) cre(Z) des(y) des(z) 
 (   1.00000) h(x,y) kdelta(A,B) t1(x,z,C,X) cre(Y) cre(Z) des(y) des(z) 
 (  -1.00000) h(x,y) kdelta(A,C) t1(x,z,B,X) cre(Y) cre(Z) des(y) des(z) 
 (  -0.50000) kdelta(A,B) t1(x,C) v(y,z,X,x) cre(Y) cre(Z) des(y) des(z) 
 (  -1.00000) kdelta(A,B) t1(x,y,C,X) v(i,x,i,z) cre(Y) cre(Z) des(y) des(z) 
 (   0.25000) kdelta(A,B) t1(x,y,C,X) v(z,w,x,y) cre(Y) cre(Z) des(z) des(w) 
 (  -0.50000) kdelta(A,B) t1(x,y,C,z) v(i,X,i,z) cre(Y) cre(Z) des(x) des(y) 
 (   0.50000) kdelta(A,C) t1(x,B) v(y,z,X,x) cre(Y) cre(Z) des(y) des(z) 
 (   1.00000) kdelta(A,C) t1(x,y,B,X) v(i,x,i,z) cre(Y) cre(Z) des(y) des(z) 
 (  -0.25000) kdelta(A,C) t1(x,y,B,X) v(z,w,x,y) cre(Y) cre(Z) des(z) des(w) 
 (   0.50000) kdelta(A,C) t1(x,y,B,z) v(i,X,i,z) cre(Y) cre(Z) des(x) des(y) 
 (  -0.50000) kdelta(A,B) t1(x,y,C,X) v(z,w,x,u) cre(Y) cre(Z) cre(u) des(y) des(z) des(w) 
 (  -0.50000) kdelta(A,B) t1(x,y,C,z) v(z,w,X,u) cre(Y) cre(Z) cre(u) des(x) des(y) des(w) 
 (  -0.50000) kdelta(A,B) t1(x,y,C,z) v(w,u,X,x) cre(Y) cre(Z) cre(z) des(y) des(w) des(u) 
 (   0.50000) kdelta(A,C) t1(x,y,B,X) v(z,w,x,u) cre(Y) cre(Z) cre(u) des(y) des(z) des(w) 
 (   0.50000) kdelta(A,C) t1(x,y,B,z) v(z,w,X,u) cre(Y) cre(Z) cre(u) des(x) des(y) des(w) 
 (   0.50000) kdelta(A,C) t1(x,y,B,z) v(w,u,X,x) cre(Y) cre(Z) cre(z) des(y) des(w) des(u) 

Total terms : 23
SQA automation time :  0.133 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('xABC, YZXx->YZBCXA', v_aeee_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, xyXC, YZxy->YZBCXA', np.identity(nextern), v_aaae_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AC, xyXB, YZxy->YZBCXA', np.identity(nextern), v_aaae_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('B, AC, xyBX, YZxy->YZBCXA', e_extern_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('C, AB, xyCX, YZxy->YZBCXA', e_extern_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Xx, AB, yzCx, YZyz->YZBCXA', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Xx, AC, yzBx, YZyz->YZBCXA', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, AB, xzCX, YZyz->YZBCXA', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, AC, xzBX, YZyz->YZBCXA', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, xC, yzXx, YZyz->YZBCXA', np.identity(nextern), t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, xyCX, ixiz, YZyz->YZBCXA', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('AB, xyCX, zwxy, YZzw->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, xyCz, iXiz, YZxy->YZBCXA', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AC, xB, yzXx, YZyz->YZBCXA', np.identity(nextern), t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AC, xyBX, ixiz, YZyz->YZBCXA', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.25 * np.einsum('AC, xyBX, zwxy, YZzw->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AC, xyBz, iXiz, YZxy->YZBCXA', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, xyCX, zwxu, YZuyzw->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, xyCz, zwXu, YZuxyw->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, xyCz, wuXx, YZzywu->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('AC, xyBX, zwxu, YZuyzw->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('AC, xyBz, zwXu, YZuxyw->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('AC, xyBz, wuXx, YZzywu->YZBCXA', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
