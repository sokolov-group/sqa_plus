
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) kdelta(I,J) v(K,X,A,B) 
 (   1.00000) kdelta(I,K) v(J,X,A,B) 
 (  -1.00000) e(A) kdelta(I,J) t1(K,X,A,B) 
 (   1.00000) e(A) kdelta(I,K) t1(J,X,A,B) 
 (  -1.00000) e(B) kdelta(I,J) t1(K,X,A,B) 
 (   1.00000) e(B) kdelta(I,K) t1(J,X,A,B) 
 (  -1.00000) e(J) kdelta(I,K) t1(J,X,A,B) 
 (   1.00000) e(K) kdelta(I,J) t1(K,X,A,B) 
 (   1.00000) h(X,x) kdelta(I,J) t1(K,x,A,B) 
 (  -1.00000) h(X,x) kdelta(I,K) t1(J,x,A,B) 
 (   1.00000) kdelta(I,J) t1(K,x,A,B) v(i,x,i,X) 
 (  -1.00000) kdelta(I,K) t1(J,x,A,B) v(i,x,i,X) 
 (   1.00000) kdelta(I,J) t1(K,x,A,B) v(X,y,x,z) cre(z) des(y) 
 (  -1.00000) kdelta(I,K) t1(J,x,A,B) v(X,y,x,z) cre(z) des(y) 

Total terms : 14
SQA automation time :  0.062 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('IJ, KXAB->JKABIX', np.identity(ncore), v_caee_so, optimize = True)
    temp += np.einsum('IK, JXAB->JKABIX', np.identity(ncore), v_caee_so, optimize = True)
    temp -= np.einsum('A, IJ, KXAB->JKABIX', e_extern_so, np.identity(ncore), t1_caee, optimize = True)
    temp += np.einsum('A, IK, JXAB->JKABIX', e_extern_so, np.identity(ncore), t1_caee, optimize = True)
    temp -= np.einsum('B, IJ, KXAB->JKABIX', e_extern_so, np.identity(ncore), t1_caee, optimize = True)
    temp += np.einsum('B, IK, JXAB->JKABIX', e_extern_so, np.identity(ncore), t1_caee, optimize = True)
    temp -= np.einsum('J, IK, JXAB->JKABIX', e_core_so, np.identity(ncore), t1_caee, optimize = True)
    temp += np.einsum('K, IJ, KXAB->JKABIX', e_core_so, np.identity(ncore), t1_caee, optimize = True)
    temp += np.einsum('Xx, IJ, KxAB->JKABIX', h_aa_so, np.identity(ncore), t1_caee, optimize = True)
    temp -= np.einsum('Xx, IK, JxAB->JKABIX', h_aa_so, np.identity(ncore), t1_caee, optimize = True)
    temp += np.einsum('IJ, KxAB, ixiX->JKABIX', np.identity(ncore), t1_caee, v_caca_so, optimize = True)
    temp -= np.einsum('IK, JxAB, ixiX->JKABIX', np.identity(ncore), t1_caee, v_caca_so, optimize = True)
    temp += np.einsum('IJ, KxAB, Xyxz, zy->JKABIX', np.identity(ncore), t1_caee, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IK, JxAB, Xyxz, zy->JKABIX', np.identity(ncore), t1_caee, v_aaaa_so, rdm_ca_so, optimize = True)
