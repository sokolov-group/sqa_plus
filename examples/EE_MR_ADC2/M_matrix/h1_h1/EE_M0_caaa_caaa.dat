
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(0) ----------------------
Done ...
--------------------------------------------------------------
 (   1.00000) E_fc(Const.) 
 (  -1.00000) e(c1) des(c1) cre(c1) 
 (   1.00000) e(v1) cre(v1) des(v1) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a3,c2,a2,c2) cre(a3) des(a2) 
 (   0.25000) v(a6,a7,a4,a5) cre(a4) cre(a5) des(a7) des(a6) 
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) kdelta(I,L) v(V,W,Y,Z) cre(X) des(U) 
 (   1.00000) h(V,Y) kdelta(I,L) kdelta(W,Z) cre(X) des(U) 
 (  -1.00000) h(V,Z) kdelta(I,L) kdelta(W,Y) cre(X) des(U) 
 (  -1.00000) h(W,Y) kdelta(I,L) kdelta(V,Z) cre(X) des(U) 
 (   1.00000) h(W,Z) kdelta(I,L) kdelta(V,Y) cre(X) des(U) 
 (   1.00000) v(i,Y,i,V) kdelta(I,L) kdelta(W,Z) cre(X) des(U) 
 (  -1.00000) v(i,Y,i,W) kdelta(I,L) kdelta(V,Z) cre(X) des(U) 
 (  -1.00000) v(i,Z,i,V) kdelta(I,L) kdelta(W,Y) cre(X) des(U) 
 (   1.00000) v(i,Z,i,W) kdelta(I,L) kdelta(V,Y) cre(X) des(U) 
 (  -1.00000) e(L) kdelta(I,L) kdelta(V,Y) kdelta(W,Z) cre(X) des(U) 
 (   1.00000) e(L) kdelta(I,L) kdelta(V,Z) kdelta(W,Y) cre(X) des(U) 
 (  -1.00000) h(U,x) kdelta(I,L) kdelta(V,Y) kdelta(W,Z) cre(X) des(x) 
 (   1.00000) h(U,x) kdelta(I,L) kdelta(V,Z) kdelta(W,Y) cre(X) des(x) 
 (  -1.00000) v(i,U,i,x) kdelta(I,L) kdelta(V,Y) kdelta(W,Z) cre(X) des(x) 
 (   1.00000) v(i,U,i,x) kdelta(I,L) kdelta(V,Z) kdelta(W,Y) cre(X) des(x) 
 (  -1.00000) h(V,Y) kdelta(I,L) cre(W) cre(X) des(U) des(Z) 
 (   1.00000) h(V,Z) kdelta(I,L) cre(W) cre(X) des(U) des(Y) 
 (   1.00000) h(W,Y) kdelta(I,L) cre(V) cre(X) des(U) des(Z) 
 (  -1.00000) h(W,Z) kdelta(I,L) cre(V) cre(X) des(U) des(Y) 
 (   1.00000) kdelta(I,L) v(V,W,Y,x) cre(X) cre(x) des(U) des(Z) 
 (  -1.00000) kdelta(I,L) v(V,W,Z,x) cre(X) cre(x) des(U) des(Y) 
 (  -1.00000) kdelta(I,L) v(V,x,Y,Z) cre(W) cre(X) des(U) des(x) 
 (   1.00000) kdelta(I,L) v(W,x,Y,Z) cre(V) cre(X) des(U) des(x) 
 (  -1.00000) kdelta(I,L) v(i,Y,i,V) cre(W) cre(X) des(U) des(Z) 
 (   1.00000) kdelta(I,L) v(i,Y,i,W) cre(V) cre(X) des(U) des(Z) 
 (   1.00000) kdelta(I,L) v(i,Z,i,V) cre(W) cre(X) des(U) des(Y) 
 (  -1.00000) kdelta(I,L) v(i,Z,i,W) cre(V) cre(X) des(U) des(Y) 
 (   1.00000) e(L) kdelta(I,L) kdelta(V,Y) cre(W) cre(X) des(U) des(Z) 
 (  -1.00000) e(L) kdelta(I,L) kdelta(V,Z) cre(W) cre(X) des(U) des(Y) 
 (  -1.00000) e(L) kdelta(I,L) kdelta(W,Y) cre(V) cre(X) des(U) des(Z) 
 (   1.00000) e(L) kdelta(I,L) kdelta(W,Z) cre(V) cre(X) des(U) des(Y) 
 (  -1.00000) h(U,x) kdelta(I,L) kdelta(V,Y) cre(W) cre(X) des(Z) des(x) 
 (   1.00000) h(U,x) kdelta(I,L) kdelta(V,Z) cre(W) cre(X) des(Y) des(x) 
 (   1.00000) h(U,x) kdelta(I,L) kdelta(W,Y) cre(V) cre(X) des(Z) des(x) 
 (  -1.00000) h(U,x) kdelta(I,L) kdelta(W,Z) cre(V) cre(X) des(Y) des(x) 
 (  -1.00000) h(V,x) kdelta(I,L) kdelta(W,Y) cre(X) cre(x) des(U) des(Z) 
 (   1.00000) h(V,x) kdelta(I,L) kdelta(W,Z) cre(X) cre(x) des(U) des(Y) 
 (   1.00000) h(W,x) kdelta(I,L) kdelta(V,Y) cre(X) cre(x) des(U) des(Z) 
 (  -1.00000) h(W,x) kdelta(I,L) kdelta(V,Z) cre(X) cre(x) des(U) des(Y) 
 (  -1.00000) v(i,U,i,x) kdelta(I,L) kdelta(V,Y) cre(W) cre(X) des(Z) des(x) 
 (   1.00000) v(i,U,i,x) kdelta(I,L) kdelta(V,Z) cre(W) cre(X) des(Y) des(x) 
 (   1.00000) v(i,U,i,x) kdelta(I,L) kdelta(W,Y) cre(V) cre(X) des(Z) des(x) 
 (  -1.00000) v(i,U,i,x) kdelta(I,L) kdelta(W,Z) cre(V) cre(X) des(Y) des(x) 
 (  -1.00000) v(V,x,Y,y) kdelta(I,L) kdelta(W,Z) cre(X) cre(y) des(U) des(x) 
 (   1.00000) v(V,x,Z,y) kdelta(I,L) kdelta(W,Y) cre(X) cre(y) des(U) des(x) 
 (   1.00000) v(W,x,Y,y) kdelta(I,L) kdelta(V,Z) cre(X) cre(y) des(U) des(x) 
 (  -1.00000) v(W,x,Z,y) kdelta(I,L) kdelta(V,Y) cre(X) cre(y) des(U) des(x) 
 (  -0.50000) v(x,y,U,Y) kdelta(I,L) kdelta(V,Z) cre(W) cre(X) des(x) des(y) 
 (   0.50000) v(x,y,U,Y) kdelta(I,L) kdelta(W,Z) cre(V) cre(X) des(x) des(y) 
 (   0.50000) v(x,y,U,Z) kdelta(I,L) kdelta(V,Y) cre(W) cre(X) des(x) des(y) 
 (  -0.50000) v(x,y,U,Z) kdelta(I,L) kdelta(W,Y) cre(V) cre(X) des(x) des(y) 
 (  -1.00000) v(i,x,i,V) kdelta(I,L) kdelta(W,Y) cre(X) cre(x) des(U) des(Z) 
 (   1.00000) v(i,x,i,V) kdelta(I,L) kdelta(W,Z) cre(X) cre(x) des(U) des(Y) 
 (   1.00000) v(i,x,i,W) kdelta(I,L) kdelta(V,Y) cre(X) cre(x) des(U) des(Z) 
 (  -1.00000) v(i,x,i,W) kdelta(I,L) kdelta(V,Z) cre(X) cre(x) des(U) des(Y) 
 (   0.50000) v(x,y,U,z) kdelta(I,L) kdelta(V,Y) kdelta(W,Z) cre(X) cre(z) des(x) des(y) 
 (  -0.50000) v(x,y,U,z) kdelta(I,L) kdelta(V,Z) kdelta(W,Y) cre(X) cre(z) des(x) des(y) 
 (   1.00000) e(L) kdelta(I,L) cre(V) cre(W) cre(X) des(U) des(Y) des(Z) 
 (   1.00000) h(U,x) kdelta(I,L) cre(V) cre(W) cre(X) des(Y) des(Z) des(x) 
 (  -1.00000) h(V,x) kdelta(I,L) cre(W) cre(X) cre(x) des(U) des(Y) des(Z) 
 (   1.00000) h(W,x) kdelta(I,L) cre(V) cre(X) cre(x) des(U) des(Y) des(Z) 
 (   1.00000) kdelta(I,L) v(i,U,i,x) cre(V) cre(W) cre(X) des(Y) des(Z) des(x) 
 (  -0.50000) kdelta(I,L) v(V,W,x,y) cre(X) cre(x) cre(y) des(U) des(Y) des(Z) 
 (  -1.00000) kdelta(I,L) v(V,x,Y,y) cre(W) cre(X) cre(y) des(U) des(Z) des(x) 
 (   1.00000) kdelta(I,L) v(V,x,Z,y) cre(W) cre(X) cre(y) des(U) des(Y) des(x) 
 (   1.00000) kdelta(I,L) v(W,x,Y,y) cre(V) cre(X) cre(y) des(U) des(Z) des(x) 
 (  -1.00000) kdelta(I,L) v(W,x,Z,y) cre(V) cre(X) cre(y) des(U) des(Y) des(x) 
 (   0.50000) kdelta(I,L) v(x,y,U,Y) cre(V) cre(W) cre(X) des(Z) des(x) des(y) 
 (  -0.50000) kdelta(I,L) v(x,y,U,Z) cre(V) cre(W) cre(X) des(Y) des(x) des(y) 
 (  -1.00000) kdelta(I,L) v(i,x,i,V) cre(W) cre(X) cre(x) des(U) des(Y) des(Z) 
 (   1.00000) kdelta(I,L) v(i,x,i,W) cre(V) cre(X) cre(x) des(U) des(Y) des(Z) 
 (  -0.50000) v(V,x,y,z) kdelta(I,L) kdelta(W,Y) cre(X) cre(y) cre(z) des(U) des(Z) des(x) 
 (   0.50000) v(V,x,y,z) kdelta(I,L) kdelta(W,Z) cre(X) cre(y) cre(z) des(U) des(Y) des(x) 
 (   0.50000) v(W,x,y,z) kdelta(I,L) kdelta(V,Y) cre(X) cre(y) cre(z) des(U) des(Z) des(x) 
 (  -0.50000) v(W,x,y,z) kdelta(I,L) kdelta(V,Z) cre(X) cre(y) cre(z) des(U) des(Y) des(x) 
 (  -0.50000) v(x,y,U,z) kdelta(I,L) kdelta(V,Y) cre(W) cre(X) cre(z) des(Z) des(x) des(y) 
 (   0.50000) v(x,y,U,z) kdelta(I,L) kdelta(V,Z) cre(W) cre(X) cre(z) des(Y) des(x) des(y) 
 (   0.50000) v(x,y,U,z) kdelta(I,L) kdelta(W,Y) cre(V) cre(X) cre(z) des(Z) des(x) des(y) 
 (  -0.50000) v(x,y,U,z) kdelta(I,L) kdelta(W,Z) cre(V) cre(X) cre(z) des(Y) des(x) des(y) 
 (   0.50000) kdelta(I,L) v(V,x,y,z) cre(W) cre(X) cre(y) cre(z) des(U) des(Y) des(Z) des(x) 
 (  -0.50000) kdelta(I,L) v(W,x,y,z) cre(V) cre(X) cre(y) cre(z) des(U) des(Y) des(Z) des(x) 
 (  -0.50000) kdelta(I,L) v(x,y,U,z) cre(V) cre(W) cre(X) cre(z) des(Y) des(Z) des(x) des(y) 

Total terms : 82
SQA automation time :  15.748 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('IL, VWYZ, XU->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('VY, IL, WZ, XU->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('VZ, IL, WY, XU->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('WY, IL, VZ, XU->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('WZ, IL, VY, XU->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('iYiV, IL, WZ, XU->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('iYiW, IL, VZ, XU->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('iZiV, IL, WY, XU->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('iZiW, IL, VY, XU->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('L, IL, VY, WZ, XU->IXYZLUVW', e_core_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('L, IL, VZ, WY, XU->IXYZLUVW', e_core_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('Ux, IL, VY, WZ, Xx->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('Ux, IL, VZ, WY, Xx->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('iUix, IL, VY, WZ, Xx->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('iUix, IL, VZ, WY, Xx->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('VY, IL, WXUZ->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('VZ, IL, WXUY->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('WY, IL, VXUZ->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('WZ, IL, VXUY->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('IL, VWYx, XxUZ->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IL, VWZx, XxUY->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IL, VxYZ, WXUx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IL, WxYZ, VXUx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IL, iYiV, WXUZ->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IL, iYiW, VXUZ->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IL, iZiV, WXUY->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IL, iZiW, VXUY->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('L, IL, VY, WXUZ->IXYZLUVW', e_core_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('L, IL, VZ, WXUY->IXYZLUVW', e_core_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('L, IL, WY, VXUZ->IXYZLUVW', e_core_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('L, IL, WZ, VXUY->IXYZLUVW', e_core_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Ux, IL, VY, WXZx->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Ux, IL, VZ, WXYx->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Ux, IL, WY, VXZx->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Ux, IL, WZ, VXYx->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Vx, IL, WY, XxUZ->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Vx, IL, WZ, XxUY->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Wx, IL, VY, XxUZ->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Wx, IL, VZ, XxUY->IXYZLUVW', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('iUix, IL, VY, WXZx->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('iUix, IL, VZ, WXYx->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('iUix, IL, WY, VXZx->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('iUix, IL, WZ, VXYx->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('VxYy, IL, WZ, XyUx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('VxZy, IL, WY, XyUx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('WxYy, IL, VZ, XyUx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('WxZy, IL, VY, XyUx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUY, IL, VZ, WXxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUY, IL, WZ, VXxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUZ, IL, VY, WXxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUZ, IL, WY, VXxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixiV, IL, WY, XxUZ->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('ixiV, IL, WZ, XxUY->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('ixiW, IL, VY, XxUZ->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixiW, IL, VZ, XxUY->IXYZLUVW', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUz, IL, VY, WZ, Xzxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUz, IL, VZ, WY, Xzxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('L, IL, VWXUYZ->IXYZLUVW', e_core_so, np.identity(ncore_so), rdm_cccaaa_so, optimize = True)
temp += np.einsum('Ux, IL, VWXYZx->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_cccaaa_so, optimize = True)
temp -= np.einsum('Vx, IL, WXxUYZ->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_cccaaa_so, optimize = True)
temp += np.einsum('Wx, IL, VXxUYZ->IXYZLUVW', h_aa_so, np.identity(ncore_so), rdm_cccaaa_so, optimize = True)
temp += np.einsum('IL, iUix, VWXYZx->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('IL, VWxy, XxyUYZ->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= np.einsum('IL, VxYy, WXyUZx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += np.einsum('IL, VxZy, WXyUYx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += np.einsum('IL, WxYy, VXyUZx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= np.einsum('IL, WxZy, VXyUYx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('IL, xyUY, VWXZxy->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('IL, xyUZ, VWXYxy->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= np.einsum('IL, ixiV, WXxUYZ->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_cccaaa_so, optimize = True)
temp += np.einsum('IL, ixiW, VXxUYZ->IXYZLUVW', np.identity(ncore_so), v_caca_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('Vxyz, IL, WY, XyzUZx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('Vxyz, IL, WZ, XyzUYx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('Wxyz, IL, VY, XyzUZx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('Wxyz, IL, VZ, XyzUYx->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUz, IL, VY, WXzZxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUz, IL, VZ, WXzYxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUz, IL, WY, VXzZxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUz, IL, WZ, VXzYxy->IXYZLUVW', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('IL, Vxyz, WXyzUYZx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
temp -= 0.5 * np.einsum('IL, Wxyz, VXyzUYZx->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
temp -= 0.5 * np.einsum('IL, xyUz, VWXzYZxy->IXYZLUVW', np.identity(ncore_so), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
