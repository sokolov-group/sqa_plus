
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(0) ----------------------
Done ...
--------------------------------------------------------------
 (   1.00000) E_fc(Const.) 
 (  -1.00000) e(c1) des(c1) cre(c1) 
 (   1.00000) e(v1) cre(v1) des(v1) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a3,c2,a2,c2) cre(a3) des(a2) 
 (   0.25000) v(a6,a7,a4,a5) cre(a4) cre(a5) des(a7) des(a6) 
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) e(D) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(U) des(V) 
 (   1.00000) e(D) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) e(E) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(U) des(V) 
 (   1.00000) e(E) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) h(U,x) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) h(U,x) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) h(V,x) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(U) des(x) 
 (  -1.00000) h(V,x) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(U) des(x) 
 (  -1.00000) v(i,U,i,x) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) v(i,U,i,x) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) v(i,V,i,x) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(U) des(x) 
 (  -1.00000) v(i,V,i,x) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(U) des(x) 
 (   0.50000) v(x,y,U,V) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) des(x) des(y) 
 (  -0.50000) v(x,y,U,V) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) des(x) des(y) 
 (  -0.50000) v(x,y,U,z) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) cre(z) des(V) des(x) des(y) 
 (   0.50000) v(x,y,U,z) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) cre(z) des(V) des(x) des(y) 
 (   0.50000) v(x,y,V,z) kdelta(A,D) kdelta(B,E) cre(X) cre(Y) cre(z) des(U) des(x) des(y) 
 (  -0.50000) v(x,y,V,z) kdelta(A,E) kdelta(B,D) cre(X) cre(Y) cre(z) des(U) des(x) des(y) 

Total terms : 18
SQA automation time :  0.493 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('D, AD, BE, XYUV->XYABUVDE', e_extern_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('D, AE, BD, XYUV->XYABUVDE', e_extern_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('E, AD, BE, XYUV->XYABUVDE', e_extern_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('E, AE, BD, XYUV->XYABUVDE', e_extern_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Ux, AD, BE, XYVx->XYABUVDE', h_aa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Ux, AE, BD, XYVx->XYABUVDE', h_aa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Vx, AD, BE, XYUx->XYABUVDE', h_aa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Vx, AE, BD, XYUx->XYABUVDE', h_aa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('iUix, AD, BE, XYVx->XYABUVDE', v_caca_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('iUix, AE, BD, XYVx->XYABUVDE', v_caca_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('iVix, AD, BE, XYUx->XYABUVDE', v_caca_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('iVix, AE, BD, XYUx->XYABUVDE', v_caca_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUV, AD, BE, XYxy->XYABUVDE', v_aaaa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUV, AE, BD, XYxy->XYABUVDE', v_aaaa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUz, AD, BE, XYzVxy->XYABUVDE', v_aaaa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUz, AE, BD, XYzVxy->XYABUVDE', v_aaaa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('xyVz, AD, BE, XYzUxy->XYABUVDE', v_aaaa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyVz, AE, BD, XYzUxy->XYABUVDE', v_aaaa_so, np.identity(nextern_so), np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
