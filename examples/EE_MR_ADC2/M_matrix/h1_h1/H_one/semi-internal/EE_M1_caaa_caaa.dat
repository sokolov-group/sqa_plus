
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) kdelta(V,Y) v(I,W,J,Z) cre(X) des(U) 
 (   1.00000) kdelta(V,Z) v(I,W,J,Y) cre(X) des(U) 
 (   1.00000) kdelta(W,Y) v(I,V,J,Z) cre(X) des(U) 
 (  -1.00000) kdelta(W,Z) v(I,V,J,Y) cre(X) des(U) 
 (   1.00000) gamma(x,y) v(I,x,J,y) kdelta(V,Y) kdelta(W,Z) cre(X) des(U) 
 (  -1.00000) gamma(x,y) v(I,x,J,y) kdelta(V,Z) kdelta(W,Y) cre(X) des(U) 
 (   1.00000) v(I,V,J,Y) cre(W) cre(X) des(U) des(Z) 
 (  -1.00000) v(I,V,J,Z) cre(W) cre(X) des(U) des(Y) 
 (  -1.00000) v(I,W,J,Y) cre(V) cre(X) des(U) des(Z) 
 (   1.00000) v(I,W,J,Z) cre(V) cre(X) des(U) des(Y) 
 (  -1.00000) kdelta(V,Y) v(I,W,J,x) cre(X) cre(x) des(U) des(Z) 
 (   1.00000) kdelta(V,Y) v(I,x,J,Z) cre(W) cre(X) des(U) des(x) 
 (   1.00000) kdelta(V,Z) v(I,W,J,x) cre(X) cre(x) des(U) des(Y) 
 (  -1.00000) kdelta(V,Z) v(I,x,J,Y) cre(W) cre(X) des(U) des(x) 
 (   1.00000) kdelta(W,Y) v(I,V,J,x) cre(X) cre(x) des(U) des(Z) 
 (  -1.00000) kdelta(W,Y) v(I,x,J,Z) cre(V) cre(X) des(U) des(x) 
 (  -1.00000) kdelta(W,Z) v(I,V,J,x) cre(X) cre(x) des(U) des(Y) 
 (   1.00000) kdelta(W,Z) v(I,x,J,Y) cre(V) cre(X) des(U) des(x) 
 (  -1.00000) gamma(x,y) kdelta(V,Y) v(I,x,J,y) cre(W) cre(X) des(U) des(Z) 
 (   1.00000) gamma(x,y) kdelta(V,Z) v(I,x,J,y) cre(W) cre(X) des(U) des(Y) 
 (   1.00000) gamma(x,y) kdelta(W,Y) v(I,x,J,y) cre(V) cre(X) des(U) des(Z) 
 (  -1.00000) gamma(x,y) kdelta(W,Z) v(I,x,J,y) cre(V) cre(X) des(U) des(Y) 
 (   1.00000) v(I,x,J,y) kdelta(V,Y) kdelta(W,Z) cre(X) cre(y) des(U) des(x) 
 (  -1.00000) v(I,x,J,y) kdelta(V,Z) kdelta(W,Y) cre(X) cre(y) des(U) des(x) 
 (   1.00000) v(I,V,J,x) cre(W) cre(X) cre(x) des(U) des(Y) des(Z) 
 (  -1.00000) v(I,W,J,x) cre(V) cre(X) cre(x) des(U) des(Y) des(Z) 
 (  -1.00000) v(I,x,J,Y) cre(V) cre(W) cre(X) des(U) des(Z) des(x) 
 (   1.00000) v(I,x,J,Z) cre(V) cre(W) cre(X) des(U) des(Y) des(x) 
 (  -1.00000) gamma(x,y) v(I,x,J,y) cre(V) cre(W) cre(X) des(U) des(Y) des(Z) 
 (   1.00000) kdelta(V,Y) v(I,x,J,y) cre(W) cre(X) cre(y) des(U) des(Z) des(x) 
 (  -1.00000) kdelta(V,Z) v(I,x,J,y) cre(W) cre(X) cre(y) des(U) des(Y) des(x) 
 (  -1.00000) kdelta(W,Y) v(I,x,J,y) cre(V) cre(X) cre(y) des(U) des(Z) des(x) 
 (   1.00000) kdelta(W,Z) v(I,x,J,y) cre(V) cre(X) cre(y) des(U) des(Y) des(x) 
 (  -1.00000) v(I,x,J,y) cre(V) cre(W) cre(X) cre(y) des(U) des(Y) des(Z) des(x) 

Total terms : 34
SQA automation time :  69.721 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
        temp =- np.einsum('VY, IWJZ, XU->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
        temp += np.einsum('VZ, IWJY, XU->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
        temp += np.einsum('WY, IVJZ, XU->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
        temp -= np.einsum('WZ, IVJY, XU->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
        temp += np.einsum('xy, IxJy, VY, WZ, XU->IXYZJUVW', rdm_ca_so, v_caca_so, np.identity(ncas), np.identity(ncas), rdm_ca_so, optimize = True)
        temp -= np.einsum('xy, IxJy, VZ, WY, XU->IXYZJUVW', rdm_ca_so, v_caca_so, np.identity(ncas), np.identity(ncas), rdm_ca_so, optimize = True)
        temp += np.einsum('IVJY, WXUZ->IXYZJUVW', v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('IVJZ, WXUY->IXYZJUVW', v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('IWJY, VXUZ->IXYZJUVW', v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('IWJZ, VXUY->IXYZJUVW', v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('VY, IWJx, XxUZ->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('VY, IxJZ, WXUx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('VZ, IWJx, XxUY->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('VZ, IxJY, WXUx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('WY, IVJx, XxUZ->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('WY, IxJZ, VXUx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('WZ, IVJx, XxUY->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('WZ, IxJY, VXUx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('xy, VY, IxJy, WXUZ->IXYZJUVW', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('xy, VZ, IxJy, WXUY->IXYZJUVW', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('xy, WY, IxJy, VXUZ->IXYZJUVW', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('xy, WZ, IxJy, VXUY->IXYZJUVW', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
        temp += np.einsum('IxJy, VY, WZ, XyUx->IXYZJUVW', v_caca_so, np.identity(ncas), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp -= np.einsum('IxJy, VZ, WY, XyUx->IXYZJUVW', v_caca_so, np.identity(ncas), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp += np.einsum('IVJx, WXxUYZ->IXYZJUVW', v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('IWJx, VXxUYZ->IXYZJUVW', v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('IxJY, VWXUZx->IXYZJUVW', v_caca_so, rdm_cccaaa_so, optimize = True)
        temp += np.einsum('IxJZ, VWXUYx->IXYZJUVW', v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('xy, IxJy, VWXUYZ->IXYZJUVW', rdm_ca_so, v_caca_so, rdm_cccaaa_so, optimize = True)
        temp += np.einsum('VY, IxJy, WXyUZx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('VZ, IxJy, WXyUYx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('WY, IxJy, VXyUZx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp += np.einsum('WZ, IxJy, VXyUYx->IXYZJUVW', np.identity(ncas), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('IxJy, VWXyUYZx->IXYZJUVW', v_caca_so, rdm_ccccaaaa_so, optimize = True)
