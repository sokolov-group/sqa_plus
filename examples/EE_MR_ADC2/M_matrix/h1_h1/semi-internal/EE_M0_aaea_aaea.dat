
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(0) ----------------------
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) h(W,Z) kdelta(A,B) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) kdelta(A,B) v(i,Z,i,W) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) e(B) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) h(U,x) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) h(V,x) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) des(U) des(x) 
 (  -1.00000) v(i,U,i,x) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) v(i,V,i,x) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) des(U) des(x) 
 (   0.50000) v(x,y,U,V) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) des(x) des(y) 
 (   1.00000) e(B) kdelta(A,B) cre(W) cre(X) cre(Y) des(U) des(V) des(Z) 
 (  -1.00000) h(U,x) kdelta(A,B) cre(W) cre(X) cre(Y) des(V) des(Z) des(x) 
 (   1.00000) h(V,x) kdelta(A,B) cre(W) cre(X) cre(Y) des(U) des(Z) des(x) 
 (   1.00000) h(W,x) kdelta(A,B) cre(X) cre(Y) cre(x) des(U) des(V) des(Z) 
 (  -1.00000) kdelta(A,B) v(i,U,i,x) cre(W) cre(X) cre(Y) des(V) des(Z) des(x) 
 (   1.00000) kdelta(A,B) v(i,V,i,x) cre(W) cre(X) cre(Y) des(U) des(Z) des(x) 
 (  -1.00000) kdelta(A,B) v(W,x,Z,y) cre(X) cre(Y) cre(y) des(U) des(V) des(x) 
 (  -0.50000) kdelta(A,B) v(x,y,U,V) cre(W) cre(X) cre(Y) des(Z) des(x) des(y) 
 (   0.50000) kdelta(A,B) v(x,y,U,Z) cre(W) cre(X) cre(Y) des(V) des(x) des(y) 
 (  -0.50000) kdelta(A,B) v(x,y,V,Z) cre(W) cre(X) cre(Y) des(U) des(x) des(y) 
 (   1.00000) kdelta(A,B) v(i,x,i,W) cre(X) cre(Y) cre(x) des(U) des(V) des(Z) 
 (  -0.50000) v(x,y,U,z) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) cre(z) des(V) des(x) des(y) 
 (   0.50000) v(x,y,V,z) kdelta(A,B) kdelta(W,Z) cre(X) cre(Y) cre(z) des(U) des(x) des(y) 
 (  -0.50000) kdelta(A,B) v(W,x,y,z) cre(X) cre(Y) cre(y) cre(z) des(U) des(V) des(Z) des(x) 
 (   0.50000) kdelta(A,B) v(x,y,U,z) cre(W) cre(X) cre(Y) cre(z) des(V) des(Z) des(x) des(y) 
 (  -0.50000) kdelta(A,B) v(x,y,V,z) cre(W) cre(X) cre(Y) cre(z) des(U) des(Z) des(x) des(y) 

Total terms : 24
SQA automation time :  0.141 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
        temp =- np.einsum('WZ, AB, XYUV->XYAZUVBW', h_aa_so, np.identity(nextern), rdm_ccaa_so, optimize = True)
        temp -= np.einsum('AB, iZiW, XYUV->XYAZUVBW', np.identity(nextern), v_caca_so, rdm_ccaa_so, optimize = True)
        temp -= np.einsum('B, AB, WZ, XYUV->XYAZUVBW', e_extern_so, np.identity(nextern), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp -= np.einsum('Ux, AB, WZ, XYVx->XYAZUVBW', h_aa_so, np.identity(nextern), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp += np.einsum('Vx, AB, WZ, XYUx->XYAZUVBW', h_aa_so, np.identity(nextern), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp -= np.einsum('iUix, AB, WZ, XYVx->XYAZUVBW', v_caca_so, np.identity(nextern), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp += np.einsum('iVix, AB, WZ, XYUx->XYAZUVBW', v_caca_so, np.identity(nextern), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp += 0.5 * np.einsum('xyUV, AB, WZ, XYxy->XYAZUVBW', v_aaaa_so, np.identity(nextern), np.identity(ncas), rdm_ccaa_so, optimize = True)
        temp += np.einsum('B, AB, WXYUVZ->XYAZUVBW', e_extern_so, np.identity(nextern), rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('Ux, AB, WXYVZx->XYAZUVBW', h_aa_so, np.identity(nextern), rdm_cccaaa_so, optimize = True)
        temp += np.einsum('Vx, AB, WXYUZx->XYAZUVBW', h_aa_so, np.identity(nextern), rdm_cccaaa_so, optimize = True)
        temp += np.einsum('Wx, AB, XYxUVZ->XYAZUVBW', h_aa_so, np.identity(nextern), rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('AB, iUix, WXYVZx->XYAZUVBW', np.identity(nextern), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp += np.einsum('AB, iVix, WXYUZx->XYAZUVBW', np.identity(nextern), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= np.einsum('AB, WxZy, XYyUVx->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_cccaaa_so, optimize = True)
        temp -= 0.5 * np.einsum('AB, xyUV, WXYZxy->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_cccaaa_so, optimize = True)
        temp += 0.5 * np.einsum('AB, xyUZ, WXYVxy->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_cccaaa_so, optimize = True)
        temp -= 0.5 * np.einsum('AB, xyVZ, WXYUxy->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_cccaaa_so, optimize = True)
        temp += np.einsum('AB, ixiW, XYxUVZ->XYAZUVBW', np.identity(nextern), v_caca_so, rdm_cccaaa_so, optimize = True)
        temp -= 0.5 * np.einsum('xyUz, AB, WZ, XYzVxy->XYAZUVBW', v_aaaa_so, np.identity(nextern), np.identity(ncas), rdm_cccaaa_so, optimize = True)
        temp += 0.5 * np.einsum('xyVz, AB, WZ, XYzUxy->XYAZUVBW', v_aaaa_so, np.identity(nextern), np.identity(ncas), rdm_cccaaa_so, optimize = True)
        temp -= 0.5 * np.einsum('AB, Wxyz, XYyzUVZx->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
        temp += 0.5 * np.einsum('AB, xyUz, WXYzVZxy->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
        temp -= 0.5 * np.einsum('AB, xyVz, WXYzUZxy->XYAZUVBW', np.identity(nextern), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
