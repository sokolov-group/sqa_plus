
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) h(J,X) 
 (  -1.00000) v(J,i,i,X) 
 (  -1.00000) e(J) t1(J,X) 
 (   1.00000) h(X,x) t1(J,x) 
 (   1.00000) t1(J,x) v(i,X,i,x) 
 (  -1.00000) h(J,x) cre(x) des(X) 
 (   1.00000) v(J,x,X,y) cre(y) des(x) 
 (   1.00000) v(J,i,i,x) cre(x) des(X) 
 (   1.00000) e(J) t1(J,x) cre(x) des(X) 
 (  -1.00000) e(J) t1(J,x,X,y) cre(y) des(x) 
 (   1.00000) h(X,x) t1(J,y,x,z) cre(z) des(y) 
 (  -1.00000) h(x,y) t1(J,x) cre(y) des(X) 
 (  -1.00000) h(x,y) t1(J,x,X,z) cre(z) des(y) 
 (   1.00000) h(x,y) t1(J,z,X,x) cre(y) des(z) 
 (   1.00000) t1(J,x) v(x,y,X,z) cre(z) des(y) 
 (  -1.00000) t1(J,x) v(i,y,i,x) cre(y) des(X) 
 (  -1.00000) t1(J,x,X,y) v(i,x,i,z) cre(y) des(z) 
 (   1.00000) t1(J,x,X,y) v(i,z,i,y) cre(z) des(x) 
 (   1.00000) t1(J,x,y,z) v(i,X,i,y) cre(z) des(x) 
 (   0.50000) t1(J,x,y,z) v(y,z,X,w) cre(w) des(x) 
 (   0.50000) v(J,x,y,z) cre(y) cre(z) des(X) des(x) 
 (  -0.50000) e(J) t1(J,x,y,z) cre(y) cre(z) des(X) des(x) 
 (  -0.50000) h(x,y) t1(J,x,z,w) cre(z) cre(w) des(X) des(y) 
 (   1.00000) h(x,y) t1(J,z,x,w) cre(y) cre(w) des(X) des(z) 
 (   0.50000) t1(J,x) v(x,y,z,w) cre(z) cre(w) des(X) des(y) 
 (  -0.50000) t1(J,x,X,y) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   0.50000) t1(J,x,X,y) v(z,w,x,u) cre(y) cre(u) des(z) des(w) 
 (  -0.50000) t1(J,x,y,z) v(i,x,i,w) cre(y) cre(z) des(X) des(w) 
 (   0.25000) t1(J,x,y,z) v(y,z,w,u) cre(w) cre(u) des(X) des(x) 
 (  -1.00000) t1(J,x,y,z) v(y,w,X,u) cre(z) cre(u) des(x) des(w) 
 (  -0.25000) t1(J,x,y,z) v(w,u,X,x) cre(y) cre(z) des(w) des(u) 
 (  -1.00000) t1(J,x,y,z) v(i,w,i,y) cre(z) cre(w) des(X) des(x) 
 (  -0.50000) t1(J,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(X) des(x) des(w) 
 (  -0.25000) t1(J,x,y,z) v(w,u,x,v) cre(y) cre(z) cre(v) des(X) des(w) des(u) 

Total terms : 34
SQA automation time :  0.327 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
        temp =  np.einsum('JX->IJX', h_ca_so, optimize = True).copy()
        temp -= np.einsum('JiiX->IJX', v_ccca_so, optimize = True).copy()
        temp -= np.einsum('J, JX->IJX', e_core_so, t1_ca, optimize = True)
        temp += np.einsum('Xx, Jx->IJX', h_aa_so, t1_ca, optimize = True)
        temp += np.einsum('Jx, iXix->IJX', t1_ca, v_caca_so, optimize = True)
        temp -= np.einsum('Jx, IxX->IJX', h_ca_so, trdm_ca_so, optimize = True)
        temp += np.einsum('JxXy, Iyx->IJX', v_caaa_so, trdm_ca_so, optimize = True)
        temp += np.einsum('Jiix, IxX->IJX', v_ccca_so, trdm_ca_so, optimize = True)
        temp += np.einsum('J, Jx, IxX->IJX', e_core_so, t1_ca, trdm_ca_so, optimize = True)
        temp -= np.einsum('J, JxXy, Iyx->IJX', e_core_so, t1_caaa, trdm_ca_so, optimize = True)
        temp += np.einsum('Xx, Jyxz, Izy->IJX', h_aa_so, t1_caaa, trdm_ca_so, optimize = True)
        temp -= np.einsum('xy, Jx, IyX->IJX', h_aa_so, t1_ca, trdm_ca_so, optimize = True)
        temp -= np.einsum('xy, JxXz, Izy->IJX', h_aa_so, t1_caaa, trdm_ca_so, optimize = True)
        temp += np.einsum('xy, JzXx, Iyz->IJX', h_aa_so, t1_caaa, trdm_ca_so, optimize = True)
        temp += np.einsum('Jx, xyXz, Izy->IJX', t1_ca, v_aaaa_so, trdm_ca_so, optimize = True)
        temp -= np.einsum('Jx, iyix, IyX->IJX', t1_ca, v_caca_so, trdm_ca_so, optimize = True)
        temp -= np.einsum('JxXy, ixiz, Iyz->IJX', t1_caaa, v_caca_so, trdm_ca_so, optimize = True)
        temp += np.einsum('JxXy, iziy, Izx->IJX', t1_caaa, v_caca_so, trdm_ca_so, optimize = True)
        temp += np.einsum('Jxyz, iXiy, Izx->IJX', t1_caaa, v_caca_so, trdm_ca_so, optimize = True)
        temp += 0.5 * np.einsum('Jxyz, yzXw, Iwx->IJX', t1_caaa, v_aaaa_so, trdm_ca_so, optimize = True)
        temp += 0.5 * np.einsum('Jxyz, IyzXx->IJX', v_caaa_so, trdm_ccaa_so, optimize = True)
        temp -= 0.5 * np.einsum('J, Jxyz, IyzXx->IJX', e_core_so, t1_caaa, trdm_ccaa_so, optimize = True)
        temp -= 0.5 * np.einsum('xy, Jxzw, IzwXy->IJX', h_aa_so, t1_caaa, trdm_ccaa_so, optimize = True)
        temp += np.einsum('xy, Jzxw, IywXz->IJX', h_aa_so, t1_caaa, trdm_ccaa_so, optimize = True)
        temp += 0.5 * np.einsum('Jx, xyzw, IzwXy->IJX', t1_ca, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp -= 0.5 * np.einsum('JxXy, yzwu, Iwuxz->IJX', t1_caaa, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp += 0.5 * np.einsum('JxXy, zwxu, Iyuzw->IJX', t1_caaa, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp -= 0.5 * np.einsum('Jxyz, ixiw, IyzXw->IJX', t1_caaa, v_caca_so, trdm_ccaa_so, optimize = True)
        temp += 0.25 * np.einsum('Jxyz, yzwu, IwuXx->IJX', t1_caaa, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp -= np.einsum('Jxyz, ywXu, Izuxw->IJX', t1_caaa, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp -= 0.25 * np.einsum('Jxyz, wuXx, Iyzwu->IJX', t1_caaa, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp -= np.einsum('Jxyz, iwiy, IzwXx->IJX', t1_caaa, v_caca_so, trdm_ccaa_so, optimize = True)
        temp -= 0.5 * np.einsum('Jxyz, ywuv, IzuvXxw->IJX', t1_caaa, v_aaaa_so, trdm_cccaaa_so, optimize = True)
        temp -= 0.25 * np.einsum('Jxyz, wuxv, IyzvXwu->IJX', t1_caaa, v_aaaa_so, trdm_cccaaa_so, optimize = True)
