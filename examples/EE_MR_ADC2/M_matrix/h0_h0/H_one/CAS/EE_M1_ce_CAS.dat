
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) h(J,A) 
 (  -1.00000) v(J,i,i,A) 
 (   1.00000) e(A) t1(J,A) 
 (  -1.00000) e(J) t1(J,A) 
 (  -1.00000) v(J,x,y,A) cre(y) des(x) 
 (   1.00000) e(A) t1(J,x,A,y) cre(y) des(x) 
 (  -1.00000) e(J) t1(J,x,A,y) cre(y) des(x) 
 (  -1.00000) h(x,y) t1(J,x,A,z) cre(z) des(y) 
 (   1.00000) h(x,y) t1(J,z,A,x) cre(y) des(z) 
 (  -1.00000) t1(J,x,A,y) v(i,x,i,z) cre(y) des(z) 
 (   1.00000) t1(J,x,A,y) v(i,z,i,y) cre(z) des(x) 
 (  -0.50000) t1(J,x,A,y) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   0.50000) t1(J,x,A,y) v(z,w,x,u) cre(y) cre(u) des(z) des(w) 

Total terms : 13
SQA automation time :  0.117 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
        temp =  np.einsum('JA->IJA', h_ce_so, optimize = True).copy()
        temp -= np.einsum('JiiA->IJA', v_ccce_so, optimize = True).copy()
        temp += np.einsum('A, JA->IJA', e_extern_so, t1_ce, optimize = True)
        temp -= np.einsum('J, JA->IJA', e_core_so, t1_ce, optimize = True)
        temp -= np.einsum('JxyA, Iyx->IJA', v_caae_so, trdm_ca_so, optimize = True)
        temp += np.einsum('A, JxAy, Iyx->IJA', e_extern_so, t1_caea, trdm_ca_so, optimize = True)
        temp -= np.einsum('J, JxAy, Iyx->IJA', e_core_so, t1_caea, trdm_ca_so, optimize = True)
        temp -= np.einsum('xy, JxAz, Izy->IJA', h_aa_so, t1_caea, trdm_ca_so, optimize = True)
        temp += np.einsum('xy, JzAx, Iyz->IJA', h_aa_so, t1_caea, trdm_ca_so, optimize = True)
        temp -= np.einsum('JxAy, ixiz, Iyz->IJA', t1_caea, v_caca_so, trdm_ca_so, optimize = True)
        temp += np.einsum('JxAy, iziy, Izx->IJA', t1_caea, v_caca_so, trdm_ca_so, optimize = True)
        temp -= 0.5 * np.einsum('JxAy, yzwu, Iwuxz->IJA', t1_caea, v_aaaa_so, trdm_ccaa_so, optimize = True)
        temp += 0.5 * np.einsum('JxAy, zwxu, Iyuzw->IJA', t1_caea, v_aaaa_so, trdm_ccaa_so, optimize = True)
