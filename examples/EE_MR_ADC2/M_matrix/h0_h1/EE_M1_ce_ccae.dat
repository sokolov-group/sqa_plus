
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) kdelta(A,B) v(J,K,I,X) 
 (   1.00000) kdelta(I,J) v(K,A,X,B) 
 (  -1.00000) kdelta(I,K) v(J,A,X,B) 
 (  -1.00000) h(J,X) kdelta(A,B) kdelta(I,K) 
 (   1.00000) h(K,X) kdelta(A,B) kdelta(I,J) 
 (   1.00000) v(J,i,i,X) kdelta(A,B) kdelta(I,K) 
 (  -1.00000) v(K,i,i,X) kdelta(A,B) kdelta(I,J) 
 (   1.00000) e(J) t1(J,X) kdelta(A,B) kdelta(I,K) 
 (  -1.00000) e(K) t1(K,X) kdelta(A,B) kdelta(I,J) 
 (  -1.00000) h(X,x) t1(J,x) kdelta(A,B) kdelta(I,K) 
 (   1.00000) h(X,x) t1(K,x) kdelta(A,B) kdelta(I,J) 
 (  -1.00000) t1(J,x) v(i,x,i,X) kdelta(A,B) kdelta(I,K) 
 (   1.00000) t1(K,x) v(i,x,i,X) kdelta(A,B) kdelta(I,J) 
 (   1.00000) kdelta(A,B) v(J,K,I,x) cre(X) des(x) 
 (  -1.00000) kdelta(I,J) v(K,A,x,B) cre(X) des(x) 
 (   1.00000) kdelta(I,K) v(J,A,x,B) cre(X) des(x) 
 (   1.00000) h(J,x) kdelta(A,B) kdelta(I,K) cre(X) des(x) 
 (  -1.00000) h(K,x) kdelta(A,B) kdelta(I,J) cre(X) des(x) 
 (  -1.00000) v(J,y,X,x) kdelta(A,B) kdelta(I,K) cre(y) des(x) 
 (   1.00000) v(K,y,X,x) kdelta(A,B) kdelta(I,J) cre(y) des(x) 
 (  -1.00000) v(J,i,i,x) kdelta(A,B) kdelta(I,K) cre(X) des(x) 
 (   1.00000) v(K,i,i,x) kdelta(A,B) kdelta(I,J) cre(X) des(x) 
 (  -1.00000) e(J) t1(J,x) kdelta(A,B) kdelta(I,K) cre(X) des(x) 
 (   1.00000) e(J) t1(J,x,X,y) kdelta(A,B) kdelta(I,K) cre(x) des(y) 
 (   1.00000) e(K) t1(K,x) kdelta(A,B) kdelta(I,J) cre(X) des(x) 
 (  -1.00000) e(K) t1(K,x,X,y) kdelta(A,B) kdelta(I,J) cre(x) des(y) 
 (  -1.00000) h(X,x) t1(J,y,x,z) kdelta(A,B) kdelta(I,K) cre(y) des(z) 
 (   1.00000) h(X,x) t1(K,y,x,z) kdelta(A,B) kdelta(I,J) cre(y) des(z) 
 (   1.00000) h(x,y) t1(J,x) kdelta(A,B) kdelta(I,K) cre(X) des(y) 
 (   1.00000) h(x,y) t1(J,x,X,z) kdelta(A,B) kdelta(I,K) cre(y) des(z) 
 (  -1.00000) h(x,y) t1(J,z,X,x) kdelta(A,B) kdelta(I,K) cre(z) des(y) 
 (  -1.00000) h(x,y) t1(K,x) kdelta(A,B) kdelta(I,J) cre(X) des(y) 
 (  -1.00000) h(x,y) t1(K,x,X,z) kdelta(A,B) kdelta(I,J) cre(y) des(z) 
 (   1.00000) h(x,y) t1(K,z,X,x) kdelta(A,B) kdelta(I,J) cre(z) des(y) 
 (  -1.00000) t1(J,x) v(X,y,x,z) kdelta(A,B) kdelta(I,K) cre(z) des(y) 
 (   1.00000) t1(J,x) v(i,x,i,y) kdelta(A,B) kdelta(I,K) cre(X) des(y) 
 (  -1.00000) t1(J,x,X,y) v(i,y,i,z) kdelta(A,B) kdelta(I,K) cre(x) des(z) 
 (   1.00000) t1(J,x,X,y) v(i,z,i,x) kdelta(A,B) kdelta(I,K) cre(z) des(y) 
 (  -0.50000) t1(J,x,y,z) v(X,w,y,z) kdelta(A,B) kdelta(I,K) cre(x) des(w) 
 (  -1.00000) t1(J,x,y,z) v(i,y,i,X) kdelta(A,B) kdelta(I,K) cre(x) des(z) 
 (   1.00000) t1(K,x) v(X,y,x,z) kdelta(A,B) kdelta(I,J) cre(z) des(y) 
 (  -1.00000) t1(K,x) v(i,x,i,y) kdelta(A,B) kdelta(I,J) cre(X) des(y) 
 (   1.00000) t1(K,x,X,y) v(i,y,i,z) kdelta(A,B) kdelta(I,J) cre(x) des(z) 
 (  -1.00000) t1(K,x,X,y) v(i,z,i,x) kdelta(A,B) kdelta(I,J) cre(z) des(y) 
 (   0.50000) t1(K,x,y,z) v(X,w,y,z) kdelta(A,B) kdelta(I,J) cre(x) des(w) 
 (   1.00000) t1(K,x,y,z) v(i,y,i,X) kdelta(A,B) kdelta(I,J) cre(x) des(z) 
 (  -0.50000) v(J,z,x,y) kdelta(A,B) kdelta(I,K) cre(X) cre(z) des(x) des(y) 
 (   0.50000) v(K,z,x,y) kdelta(A,B) kdelta(I,J) cre(X) cre(z) des(x) des(y) 
 (   0.50000) e(J) t1(J,x,y,z) kdelta(A,B) kdelta(I,K) cre(X) cre(x) des(y) des(z) 
 (  -0.50000) e(K) t1(K,x,y,z) kdelta(A,B) kdelta(I,J) cre(X) cre(x) des(y) des(z) 
 (   0.50000) h(x,y) t1(J,x,z,w) kdelta(A,B) kdelta(I,K) cre(X) cre(y) des(z) des(w) 
 (  -1.00000) h(x,y) t1(J,z,x,w) kdelta(A,B) kdelta(I,K) cre(X) cre(z) des(y) des(w) 
 (  -0.50000) h(x,y) t1(K,x,z,w) kdelta(A,B) kdelta(I,J) cre(X) cre(y) des(z) des(w) 
 (   1.00000) h(x,y) t1(K,z,x,w) kdelta(A,B) kdelta(I,J) cre(X) cre(z) des(y) des(w) 
 (  -0.50000) t1(J,x) v(y,z,x,w) kdelta(A,B) kdelta(I,K) cre(X) cre(w) des(y) des(z) 
 (  -0.50000) t1(J,x,X,y) v(x,z,w,u) kdelta(A,B) kdelta(I,K) cre(w) cre(u) des(y) des(z) 
 (   0.50000) t1(J,x,X,y) v(z,w,y,u) kdelta(A,B) kdelta(I,K) cre(x) cre(u) des(z) des(w) 
 (   0.25000) t1(J,x,y,z) v(X,x,w,u) kdelta(A,B) kdelta(I,K) cre(w) cre(u) des(y) des(z) 
 (   1.00000) t1(J,x,y,z) v(X,w,y,u) kdelta(A,B) kdelta(I,K) cre(x) cre(u) des(z) des(w) 
 (   1.00000) t1(J,x,y,z) v(i,y,i,w) kdelta(A,B) kdelta(I,K) cre(X) cre(x) des(z) des(w) 
 (  -0.25000) t1(J,x,y,z) v(w,u,y,z) kdelta(A,B) kdelta(I,K) cre(X) cre(x) des(w) des(u) 
 (   0.50000) t1(J,x,y,z) v(i,w,i,x) kdelta(A,B) kdelta(I,K) cre(X) cre(w) des(y) des(z) 
 (   0.50000) t1(K,x) v(y,z,x,w) kdelta(A,B) kdelta(I,J) cre(X) cre(w) des(y) des(z) 
 (   0.50000) t1(K,x,X,y) v(x,z,w,u) kdelta(A,B) kdelta(I,J) cre(w) cre(u) des(y) des(z) 
 (  -0.50000) t1(K,x,X,y) v(z,w,y,u) kdelta(A,B) kdelta(I,J) cre(x) cre(u) des(z) des(w) 
 (  -0.25000) t1(K,x,y,z) v(X,x,w,u) kdelta(A,B) kdelta(I,J) cre(w) cre(u) des(y) des(z) 
 (  -1.00000) t1(K,x,y,z) v(X,w,y,u) kdelta(A,B) kdelta(I,J) cre(x) cre(u) des(z) des(w) 
 (  -1.00000) t1(K,x,y,z) v(i,y,i,w) kdelta(A,B) kdelta(I,J) cre(X) cre(x) des(z) des(w) 
 (   0.25000) t1(K,x,y,z) v(w,u,y,z) kdelta(A,B) kdelta(I,J) cre(X) cre(x) des(w) des(u) 
 (  -0.50000) t1(K,x,y,z) v(i,w,i,x) kdelta(A,B) kdelta(I,J) cre(X) cre(w) des(y) des(z) 
 (   0.25000) t1(J,x,y,z) v(x,w,u,v) kdelta(A,B) kdelta(I,K) cre(X) cre(u) cre(v) des(y) des(z) des(w) 
 (   0.50000) t1(J,x,y,z) v(w,u,y,v) kdelta(A,B) kdelta(I,K) cre(X) cre(x) cre(v) des(z) des(w) des(u) 
 (  -0.25000) t1(K,x,y,z) v(x,w,u,v) kdelta(A,B) kdelta(I,J) cre(X) cre(u) cre(v) des(y) des(z) des(w) 
 (  -0.50000) t1(K,x,y,z) v(w,u,y,v) kdelta(A,B) kdelta(I,J) cre(X) cre(x) cre(v) des(z) des(w) des(u) 

Total terms : 74
SQA automation time :  1.971 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('AB, JKIX->IAJKBX', np.identity(nextern), v_ccca_so, optimize = True)
    temp += np.einsum('IJ, KAXB->IAJKBX', np.identity(ncore), v_ceae_so, optimize = True)
    temp -= np.einsum('IK, JAXB->IAJKBX', np.identity(ncore), v_ceae_so, optimize = True)
    temp -= np.einsum('JX, AB, IK->IAJKBX', h_ca_so, np.identity(nextern), np.identity(ncore), optimize = True)
    temp += np.einsum('KX, AB, IJ->IAJKBX', h_ca_so, np.identity(nextern), np.identity(ncore), optimize = True)
    temp += np.einsum('JiiX, AB, IK->IAJKBX', v_ccca_so, np.identity(nextern), np.identity(ncore), optimize = True)
    temp -= np.einsum('KiiX, AB, IJ->IAJKBX', v_ccca_so, np.identity(nextern), np.identity(ncore), optimize = True)
    temp += np.einsum('J, JX, AB, IK->IAJKBX', e_core_so, t1_ca, np.identity(nextern), np.identity(ncore), optimize = True)
    temp -= np.einsum('K, KX, AB, IJ->IAJKBX', e_core_so, t1_ca, np.identity(nextern), np.identity(ncore), optimize = True)
    temp -= np.einsum('Xx, Jx, AB, IK->IAJKBX', h_aa_so, t1_ca, np.identity(nextern), np.identity(ncore), optimize = True)
    temp += np.einsum('Xx, Kx, AB, IJ->IAJKBX', h_aa_so, t1_ca, np.identity(nextern), np.identity(ncore), optimize = True)
    temp -= np.einsum('Jx, ixiX, AB, IK->IAJKBX', t1_ca, v_caca_so, np.identity(nextern), np.identity(ncore), optimize = True)
    temp += np.einsum('Kx, ixiX, AB, IJ->IAJKBX', t1_ca, v_caca_so, np.identity(nextern), np.identity(ncore), optimize = True)
    temp += np.einsum('AB, JKIx, Xx->IAJKBX', np.identity(nextern), v_ccca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, KAxB, Xx->IAJKBX', np.identity(ncore), v_ceae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IK, JAxB, Xx->IAJKBX', np.identity(ncore), v_ceae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, AB, IK, Xx->IAJKBX', h_ca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('Kx, AB, IJ, Xx->IAJKBX', h_ca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('JyXx, AB, IK, yx->IAJKBX', v_caaa_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('KyXx, AB, IJ, yx->IAJKBX', v_caaa_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('Jiix, AB, IK, Xx->IAJKBX', v_ccca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('Kiix, AB, IJ, Xx->IAJKBX', v_ccca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('J, Jx, AB, IK, Xx->IAJKBX', e_core_so, t1_ca, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('J, JxXy, AB, IK, xy->IAJKBX', e_core_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('K, Kx, AB, IJ, Xx->IAJKBX', e_core_so, t1_ca, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('K, KxXy, AB, IJ, xy->IAJKBX', e_core_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('Xx, Jyxz, AB, IK, yz->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('Xx, Kyxz, AB, IJ, yz->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('xy, Jx, AB, IK, Xy->IAJKBX', h_aa_so, t1_ca, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('xy, JxXz, AB, IK, yz->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('xy, JzXx, AB, IK, zy->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('xy, Kx, AB, IJ, Xy->IAJKBX', h_aa_so, t1_ca, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('xy, KxXz, AB, IJ, yz->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('xy, KzXx, AB, IJ, zy->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('Jx, Xyxz, AB, IK, zy->IAJKBX', t1_ca, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, ixiy, AB, IK, Xy->IAJKBX', t1_ca, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('JxXy, iyiz, AB, IK, xz->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('JxXy, izix, AB, IK, zy->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('Jxyz, Xwyz, AB, IK, xw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('Jxyz, iyiX, AB, IK, xz->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('Kx, Xyxz, AB, IJ, zy->IAJKBX', t1_ca, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('Kx, ixiy, AB, IJ, Xy->IAJKBX', t1_ca, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('KxXy, iyiz, AB, IJ, xz->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('KxXy, izix, AB, IJ, zy->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('Kxyz, Xwyz, AB, IJ, xw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp += np.einsum('Kxyz, iyiX, AB, IJ, xz->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('Jzxy, AB, IK, Xzxy->IAJKBX', v_caaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Kzxy, AB, IJ, Xzxy->IAJKBX', v_caaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('J, Jxyz, AB, IK, Xxyz->IAJKBX', e_core_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('K, Kxyz, AB, IJ, Xxyz->IAJKBX', e_core_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xy, Jxzw, AB, IK, Xyzw->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, Jzxw, AB, IK, Xzyw->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xy, Kxzw, AB, IJ, Xyzw->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, Kzxw, AB, IJ, Xzyw->IAJKBX', h_aa_so, t1_caaa, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Jx, yzxw, AB, IK, Xwyz->IAJKBX', t1_ca, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('JxXy, xzwu, AB, IK, wuyz->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('JxXy, zwyu, AB, IK, xuzw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('Jxyz, Xxwu, AB, IK, wuyz->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += np.einsum('Jxyz, Xwyu, AB, IK, xuzw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += np.einsum('Jxyz, iyiw, AB, IK, Xxzw->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.25 * np.einsum('Jxyz, wuyz, AB, IK, Xxwu->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Jxyz, iwix, AB, IK, Xwyz->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Kx, yzxw, AB, IJ, Xwyz->IAJKBX', t1_ca, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('KxXy, xzwu, AB, IJ, wuyz->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('KxXy, zwyu, AB, IJ, xuzw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.25 * np.einsum('Kxyz, Xxwu, AB, IJ, wuyz->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Kxyz, Xwyu, AB, IJ, xuzw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Kxyz, iyiw, AB, IJ, Xxzw->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('Kxyz, wuyz, AB, IJ, Xxwu->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Kxyz, iwix, AB, IJ, Xwyz->IAJKBX', t1_caaa, v_caca_so, np.identity(nextern), np.identity(ncore), rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('Jxyz, xwuv, AB, IK, Xuvyzw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('Jxyz, wuyv, AB, IK, Xxvzwu->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('Kxyz, xwuv, AB, IJ, Xuvyzw->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Kxyz, wuyv, AB, IJ, Xxvzwu->IAJKBX', t1_caaa, v_aaaa_so, np.identity(nextern), np.identity(ncore), rdm_cccaaa_so, optimize = True)
