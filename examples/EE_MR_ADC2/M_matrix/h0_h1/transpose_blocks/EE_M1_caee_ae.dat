
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) v(I,A,B,C) cre(Y) des(X) 
 (  -1.00000) kdelta(A,B) v(I,x,X,C) cre(Y) des(x) 
 (   1.00000) kdelta(A,C) v(I,x,X,B) cre(Y) des(x) 
 (  -1.00000) e(B) kdelta(A,C) t1(I,x,B,X) cre(Y) des(x) 
 (   1.00000) e(C) kdelta(A,B) t1(I,x,C,X) cre(Y) des(x) 
 (  -1.00000) e(I) kdelta(A,B) t1(I,x,C,X) cre(Y) des(x) 
 (   1.00000) e(I) kdelta(A,C) t1(I,x,B,X) cre(Y) des(x) 
 (   1.00000) h(X,x) kdelta(A,B) t1(I,y,C,x) cre(Y) des(y) 
 (  -1.00000) h(X,x) kdelta(A,C) t1(I,y,B,x) cre(Y) des(y) 
 (  -1.00000) h(x,y) kdelta(A,B) t1(I,x,C,X) cre(Y) des(y) 
 (   1.00000) h(x,y) kdelta(A,C) t1(I,x,B,X) cre(Y) des(y) 
 (  -1.00000) kdelta(A,B) t1(I,x,C,X) v(i,x,i,y) cre(Y) des(y) 
 (   1.00000) kdelta(A,B) t1(I,x,C,y) v(i,X,i,y) cre(Y) des(x) 
 (   1.00000) kdelta(A,C) t1(I,x,B,X) v(i,x,i,y) cre(Y) des(y) 
 (  -1.00000) kdelta(A,C) t1(I,x,B,y) v(i,X,i,y) cre(Y) des(x) 
 (   0.50000) kdelta(A,B) t1(I,x,C,X) v(y,z,x,w) cre(Y) cre(w) des(y) des(z) 
 (  -1.00000) kdelta(A,B) t1(I,x,C,y) v(y,z,X,w) cre(Y) cre(w) des(x) des(z) 
 (   0.50000) kdelta(A,B) t1(I,x,C,y) v(z,w,X,x) cre(Y) cre(y) des(z) des(w) 
 (  -0.50000) kdelta(A,C) t1(I,x,B,X) v(y,z,x,w) cre(Y) cre(w) des(y) des(z) 
 (   1.00000) kdelta(A,C) t1(I,x,B,y) v(y,z,X,w) cre(Y) cre(w) des(x) des(z) 
 (  -0.50000) kdelta(A,C) t1(I,x,B,y) v(z,w,X,x) cre(Y) cre(y) des(z) des(w) 

Total terms : 21
SQA automation time :  0.086 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('IABC, YX->IYBCXA', v_ceee_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('AB, IxXC, Yx->IYBCXA', np.identity(nextern), v_caae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('AC, IxXB, Yx->IYBCXA', np.identity(nextern), v_caae_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('B, AC, IxBX, Yx->IYBCXA', e_extern_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('C, AB, IxCX, Yx->IYBCXA', e_extern_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('I, AB, IxCX, Yx->IYBCXA', e_core_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('I, AC, IxBX, Yx->IYBCXA', e_core_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('Xx, AB, IyCx, Yy->IYBCXA', h_aa_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Xx, AC, IyBx, Yy->IYBCXA', h_aa_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xy, AB, IxCX, Yy->IYBCXA', h_aa_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('xy, AC, IxBX, Yy->IYBCXA', h_aa_so, np.identity(nextern), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('AB, IxCX, ixiy, Yy->IYBCXA', np.identity(nextern), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('AB, IxCy, iXiy, Yx->IYBCXA', np.identity(nextern), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('AC, IxBX, ixiy, Yy->IYBCXA', np.identity(nextern), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('AC, IxBy, iXiy, Yx->IYBCXA', np.identity(nextern), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('AB, IxCX, yzxw, Ywyz->IYBCXA', np.identity(nextern), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, IxCy, yzXw, Ywxz->IYBCXA', np.identity(nextern), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, IxCy, zwXx, Yyzw->IYBCXA', np.identity(nextern), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AC, IxBX, yzxw, Ywyz->IYBCXA', np.identity(nextern), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AC, IxBy, yzXw, Ywxz->IYBCXA', np.identity(nextern), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AC, IxBy, zwXx, Yyzw->IYBCXA', np.identity(nextern), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
