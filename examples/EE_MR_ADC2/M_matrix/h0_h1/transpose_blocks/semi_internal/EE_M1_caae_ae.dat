
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) v(I,A,Z,B) cre(Y) des(X) 
 (  -1.00000) h(I,X) kdelta(A,B) cre(Y) des(Z) 
 (  -1.00000) kdelta(A,B) v(I,x,X,Z) cre(Y) des(x) 
 (   1.00000) kdelta(A,B) v(I,i,i,X) cre(Y) des(Z) 
 (   1.00000) e(I) kdelta(A,B) t1(I,X) cre(Y) des(Z) 
 (   1.00000) e(I) kdelta(A,B) t1(I,x,X,Z) cre(Y) des(x) 
 (  -1.00000) h(X,x) kdelta(A,B) t1(I,x) cre(Y) des(Z) 
 (   1.00000) h(X,x) kdelta(A,B) t1(I,y,Z,x) cre(Y) des(y) 
 (  -1.00000) h(Z,x) kdelta(A,B) t1(I,y,X,x) cre(Y) des(y) 
 (   1.00000) h(x,y) kdelta(A,B) t1(I,x,X,Z) cre(Y) des(y) 
 (  -1.00000) kdelta(A,B) t1(I,x) v(i,X,i,x) cre(Y) des(Z) 
 (  -1.00000) kdelta(A,B) t1(I,x) v(x,y,X,Z) cre(Y) des(y) 
 (   1.00000) kdelta(A,B) t1(I,x,X,Z) v(i,x,i,y) cre(Y) des(y) 
 (  -1.00000) kdelta(A,B) t1(I,x,X,y) v(i,Z,i,y) cre(Y) des(x) 
 (   1.00000) kdelta(A,B) t1(I,x,Z,y) v(i,X,i,y) cre(Y) des(x) 
 (  -0.50000) kdelta(A,B) t1(I,x,y,z) v(y,z,X,Z) cre(Y) des(x) 
 (  -1.00000) v(I,A,x,B) cre(Y) cre(x) des(X) des(Z) 
 (   1.00000) kdelta(A,B) v(I,x,X,y) cre(Y) cre(y) des(Z) des(x) 
 (  -1.00000) e(I) kdelta(A,B) t1(I,x,X,y) cre(Y) cre(y) des(Z) des(x) 
 (   1.00000) h(X,x) kdelta(A,B) t1(I,y,x,z) cre(Y) cre(z) des(Z) des(y) 
 (  -1.00000) h(x,y) kdelta(A,B) t1(I,x,X,z) cre(Y) cre(z) des(Z) des(y) 
 (   1.00000) h(x,y) kdelta(A,B) t1(I,z,X,x) cre(Y) cre(y) des(Z) des(z) 
 (   1.00000) kdelta(A,B) t1(I,x) v(x,y,X,z) cre(Y) cre(z) des(Z) des(y) 
 (  -0.50000) kdelta(A,B) t1(I,x,X,Z) v(y,z,x,w) cre(Y) cre(w) des(y) des(z) 
 (  -1.00000) kdelta(A,B) t1(I,x,X,y) v(i,x,i,z) cre(Y) cre(y) des(Z) des(z) 
 (   1.00000) kdelta(A,B) t1(I,x,X,y) v(y,z,Z,w) cre(Y) cre(w) des(x) des(z) 
 (  -0.50000) kdelta(A,B) t1(I,x,X,y) v(z,w,Z,x) cre(Y) cre(y) des(z) des(w) 
 (   1.00000) kdelta(A,B) t1(I,x,X,y) v(i,z,i,y) cre(Y) cre(z) des(Z) des(x) 
 (  -1.00000) kdelta(A,B) t1(I,x,Z,y) v(y,z,X,w) cre(Y) cre(w) des(x) des(z) 
 (   0.50000) kdelta(A,B) t1(I,x,Z,y) v(z,w,X,x) cre(Y) cre(y) des(z) des(w) 
 (   1.00000) kdelta(A,B) t1(I,x,y,z) v(i,X,i,y) cre(Y) cre(z) des(Z) des(x) 
 (   0.50000) kdelta(A,B) t1(I,x,y,z) v(y,z,X,w) cre(Y) cre(w) des(Z) des(x) 
 (  -1.00000) kdelta(A,B) t1(I,x,y,z) v(y,w,X,Z) cre(Y) cre(z) des(x) des(w) 
 (   0.50000) kdelta(A,B) t1(I,x,X,y) v(y,z,w,u) cre(Y) cre(w) cre(u) des(Z) des(x) des(z) 
 (  -0.50000) kdelta(A,B) t1(I,x,X,y) v(z,w,x,u) cre(Y) cre(y) cre(u) des(Z) des(z) des(w) 
 (   1.00000) kdelta(A,B) t1(I,x,y,z) v(y,w,X,u) cre(Y) cre(z) cre(u) des(Z) des(x) des(w) 
 (   0.25000) kdelta(A,B) t1(I,x,y,z) v(w,u,X,x) cre(Y) cre(y) cre(z) des(Z) des(w) des(u) 

Total terms : 37
SQA automation time :  0.371 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('IAZB, YX->IYBZXA', v_ceae_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IX, AB, YZ->IYBZXA', h_ca_so, np.identity(nextern), rdm_ca_so, optimize = True)
    temp -= np.einsum('AB, IxXZ, Yx->IYBZXA', np.identity(nextern), v_caaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('AB, IiiX, YZ->IYBZXA', np.identity(nextern), v_ccca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('I, AB, IX, YZ->IYBZXA', e_core_so, np.identity(nextern), t1_ca, rdm_ca_so, optimize = True)
    temp += np.einsum('I, AB, IxXZ, Yx->IYBZXA', e_core_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('Xx, AB, Ix, YZ->IYBZXA', h_aa_so, np.identity(nextern), t1_ca, rdm_ca_so, optimize = True)
    temp += np.einsum('Xx, AB, IyZx, Yy->IYBZXA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('Zx, AB, IyXx, Yy->IYBZXA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
    temp += np.einsum('xy, AB, IxXZ, Yy->IYBZXA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ca_so, optimize = True)
    temp -= np.einsum('AB, Ix, iXix, YZ->IYBZXA', np.identity(nextern), t1_ca, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('AB, Ix, xyXZ, Yy->IYBZXA', np.identity(nextern), t1_ca, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('AB, IxXZ, ixiy, Yy->IYBZXA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('AB, IxXy, iZiy, Yx->IYBZXA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('AB, IxZy, iXiy, Yx->IYBZXA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ixyz, yzXZ, Yx->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IAxB, YxXZ->IYBZXA', v_ceae_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AB, IxXy, YyZx->IYBZXA', np.identity(nextern), v_caaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('I, AB, IxXy, YyZx->IYBZXA', e_core_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Xx, AB, Iyxz, YzZy->IYBZXA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, AB, IxXz, YzZy->IYBZXA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, AB, IzXx, YyZz->IYBZXA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AB, Ix, xyXz, YzZy->IYBZXA', np.identity(nextern), t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, IxXZ, yzxw, Ywyz->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, IxXy, ixiz, YyZz->IYBZXA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AB, IxXy, yzZw, Ywxz->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, IxXy, zwZx, Yyzw->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AB, IxXy, iziy, YzZx->IYBZXA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, IxZy, yzXw, Ywxz->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, IxZy, zwXx, Yyzw->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AB, Ixyz, iXiy, YzZx->IYBZXA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, Ixyz, yzXw, YwZx->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, Ixyz, ywXZ, Yzxw->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, IxXy, yzwu, YwuZxz->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, IxXy, zwxu, YyuZzw->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('AB, Ixyz, ywXu, YzuZxw->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('AB, Ixyz, wuXx, YyzZwu->IYBZXA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
