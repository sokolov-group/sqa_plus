
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) h(x,A) cre(Z) cre(x) des(X) des(Y) 
 (   0.50000) v(x,y,Z,A) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) v(i,x,i,A) cre(Z) cre(x) des(X) des(Y) 
 (   1.00000) e(A) t1(x,A) cre(Z) cre(x) des(X) des(Y) 
 (  -0.50000) e(A) t1(x,y,A,Z) cre(x) cre(y) des(X) des(Y) 
 (  -0.50000) h(Z,x) t1(y,z,A,x) cre(y) cre(z) des(X) des(Y) 
 (  -1.00000) h(x,y) t1(x,A) cre(Z) cre(y) des(X) des(Y) 
 (   1.00000) h(x,y) t1(x,z,A,Z) cre(y) cre(z) des(X) des(Y) 
 (  -0.50000) t1(x,A) v(Z,x,y,z) cre(y) cre(z) des(X) des(Y) 
 (  -1.00000) t1(x,A) v(i,y,i,x) cre(Z) cre(y) des(X) des(Y) 
 (   0.25000) t1(x,y,A,Z) v(x,y,z,w) cre(z) cre(w) des(X) des(Y) 
 (  -1.00000) t1(x,y,A,Z) v(i,z,i,x) cre(y) cre(z) des(X) des(Y) 
 (  -0.50000) t1(x,y,A,z) v(i,z,i,Z) cre(x) cre(y) des(X) des(Y) 
 (  -0.50000) v(y,z,x,A) cre(Z) cre(y) cre(z) des(X) des(Y) des(x) 
 (   0.50000) e(A) t1(x,y,A,z) cre(Z) cre(x) cre(y) des(X) des(Y) des(z) 
 (  -1.00000) h(x,y) t1(x,z,A,w) cre(Z) cre(y) cre(z) des(X) des(Y) des(w) 
 (   0.50000) h(x,y) t1(z,w,A,x) cre(Z) cre(z) cre(w) des(X) des(Y) des(y) 
 (  -0.50000) t1(x,A) v(x,y,z,w) cre(Z) cre(z) cre(w) des(X) des(Y) des(y) 
 (  -0.50000) t1(x,y,A,Z) v(x,z,w,u) cre(y) cre(w) cre(u) des(X) des(Y) des(z) 
 (  -0.50000) t1(x,y,A,z) v(Z,x,w,u) cre(y) cre(w) cre(u) des(X) des(Y) des(z) 
 (  -0.50000) t1(x,y,A,z) v(Z,w,z,u) cre(x) cre(y) cre(u) des(X) des(Y) des(w) 
 (  -0.25000) t1(x,y,A,z) v(x,y,w,u) cre(Z) cre(w) cre(u) des(X) des(Y) des(z) 
 (   0.50000) t1(x,y,A,z) v(i,z,i,w) cre(Z) cre(x) cre(y) des(X) des(Y) des(w) 
 (   1.00000) t1(x,y,A,z) v(i,w,i,x) cre(Z) cre(y) cre(w) des(X) des(Y) des(z) 
 (  -0.50000) t1(x,y,A,z) v(x,w,u,v) cre(Z) cre(y) cre(u) cre(v) des(X) des(Y) des(z) des(w) 
 (  -0.25000) t1(x,y,A,z) v(w,u,z,v) cre(Z) cre(x) cre(y) cre(v) des(X) des(Y) des(w) des(u) 

Total terms : 26
SQA automation time :  0.294 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('xA, IZxXY->IXYAZ', h_ae_so, trdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyZA, IxyXY->IXYAZ', v_aaae_so, trdm_ccaa_so, optimize = True)
    temp += np.einsum('ixiA, IZxXY->IXYAZ', v_cace_so, trdm_ccaa_so, optimize = True)
    temp += np.einsum('A, xA, IZxXY->IXYAZ', e_extern_so, t1_ae, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('A, xyAZ, IxyXY->IXYAZ', e_extern_so, t1_aaea, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Zx, yzAx, IyzXY->IXYAZ', h_aa_so, t1_aaea, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, xA, IZyXY->IXYAZ', h_aa_so, t1_ae, trdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, xzAZ, IyzXY->IXYAZ', h_aa_so, t1_aaea, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, Zxyz, IyzXY->IXYAZ', t1_ae, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, iyix, IZyXY->IXYAZ', t1_ae, v_caca_so, trdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('xyAZ, xyzw, IzwXY->IXYAZ', t1_aaea, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xyAZ, izix, IyzXY->IXYAZ', t1_aaea, v_caca_so, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, iziZ, IxyXY->IXYAZ', t1_aaea, v_caca_so, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('yzxA, IZyzXYx->IXYAZ', v_aaae_so, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('A, xyAz, IZxyXYz->IXYAZ', e_extern_so, t1_aaea, trdm_cccaaa_so, optimize = True)
    temp -= np.einsum('xy, xzAw, IZyzXYw->IXYAZ', h_aa_so, t1_aaea, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xy, zwAx, IZzwXYy->IXYAZ', h_aa_so, t1_aaea, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xA, xyzw, IZzwXYy->IXYAZ', t1_ae, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAZ, xzwu, IywuXYz->IXYAZ', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, Zxwu, IywuXYz->IXYAZ', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, Zwzu, IxyuXYw->IXYAZ', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAz, xywu, IZwuXYz->IXYAZ', t1_aaea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyAz, iziw, IZxyXYw->IXYAZ', t1_aaea, v_caca_so, trdm_cccaaa_so, optimize = True)
    temp += np.einsum('xyAz, iwix, IZywXYz->IXYAZ', t1_aaea, v_caca_so, trdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAz, xwuv, IZyuvXYzw->IXYAZ', t1_aaea, v_aaaa_so, trdm_ccccaaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAz, wuzv, IZxyvXYwu->IXYAZ', t1_aaea, v_aaaa_so, trdm_ccccaaaa_so, optimize = True)
