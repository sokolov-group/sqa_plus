
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) kdelta(I,L) kdelta(J,M) kdelta(U,X) kdelta(V,Y) 
 (  -1.00000) kdelta(I,L) kdelta(J,M) kdelta(U,Y) kdelta(V,X) 
 (  -1.00000) kdelta(I,M) kdelta(J,L) kdelta(U,X) kdelta(V,Y) 
 (   1.00000) kdelta(I,M) kdelta(J,L) kdelta(U,Y) kdelta(V,X) 
 (  -1.00000) kdelta(I,L) kdelta(J,M) kdelta(U,X) cre(V) des(Y) 
 (   1.00000) kdelta(I,L) kdelta(J,M) kdelta(U,Y) cre(V) des(X) 
 (   1.00000) kdelta(I,L) kdelta(J,M) kdelta(V,X) cre(U) des(Y) 
 (  -1.00000) kdelta(I,L) kdelta(J,M) kdelta(V,Y) cre(U) des(X) 
 (   1.00000) kdelta(I,M) kdelta(J,L) kdelta(U,X) cre(V) des(Y) 
 (  -1.00000) kdelta(I,M) kdelta(J,L) kdelta(U,Y) cre(V) des(X) 
 (  -1.00000) kdelta(I,M) kdelta(J,L) kdelta(V,X) cre(U) des(Y) 
 (   1.00000) kdelta(I,M) kdelta(J,L) kdelta(V,Y) cre(U) des(X) 
 (  -1.00000) kdelta(I,L) kdelta(J,M) cre(U) cre(V) des(X) des(Y) 
 (   1.00000) kdelta(I,M) kdelta(J,L) cre(U) cre(V) des(X) des(Y) 

Total terms : 14
SQA automation time :  3.236 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('IL, JM, UX, VY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), optimize = True)
temp -= np.einsum('IL, JM, UY, VX->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), optimize = True)
temp -= np.einsum('IM, JL, UX, VY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), optimize = True)
temp += np.einsum('IM, JL, UY, VX->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), np.identity(ncas_so), optimize = True)
temp -= np.einsum('IL, JM, UX, VY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('IL, JM, UY, VX->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('IL, JM, VX, UY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('IL, JM, VY, UX->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('IM, JL, UX, VY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('IM, JL, UY, VX->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('IM, JL, VX, UY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('IM, JL, VY, UX->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('IL, JM, UVXY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('IM, JL, UVXY->IJXYLMUV', np.identity(ncore_so), np.identity(ncore_so), rdm_ccaa_so, optimize = True)
