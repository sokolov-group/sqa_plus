
----------------------------------------------------------------------------------------------------
sqa_plus: Code generator for quasi-particle systems.
Copyright 2009-2022 SecondQuantizationAlgebra Developers. All Rights Reserved.
Available at https://github.com/sokolov-group/sqa_plus

Licensed under the GNU General Public License v3.0;

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
----------------------------------------------------------------------------------------------------


------------------------------------- Spin-Adapted CVS-IP: M01 -------------------------------------


## Generating operators ...


----------------------------------------- Hamiltonian (1) ------------------------------------------

Commutation: Done ...
Done ...
----------------------------------------------------------------------------------------------------
## Calculating the commutator [H(0), a_S^\dag a_T^\dag a_U] ...

## Calculating a_Q [H(0), a_S^\dag a_T^\dag a_U] ...

------------------------------------------ SQA Automation ------------------------------------------

Computing expectation value with respect to virtual ...
Done!
----------------------------------------------------------------------------------------------------
Normal ordering with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Computing expectation value with respect to core ...
Done!
----------------------------------------------------------------------------------------------------
Contract delta function for non-dummy indices ...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

------------------------------------------ Final results -------------------------------------------

 (   1.00000) v(K,L,I,Y) 
 (  -1.00000) h(L,Y) kdelta(I,K) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (   1.00000) e(L) kdelta(I,K) t1(L,Y) 
 (  -1.00000) h(Y,x) kdelta(I,K) t1(L,x) 
 (  -2.00000) kdelta(I,K) t1(L,x) v(i,Y,i,x) 
 (  -2.00000) kdelta(I,K) t1(L,x) v(i,Y,i,x) 
 (  -2.00000) kdelta(I,K) t1(L,x) v(i,Y,i,x) 
 (  -2.00000) kdelta(I,K) t1(L,x) v(i,Y,i,x) 
 (  -1.00000) v(K,L,I,x) cre(x) des(Y) 
 (   1.00000) h(L,x) kdelta(I,K) cre(x) des(Y) 
 (  -1.00000) kdelta(I,K) v(L,x,Y,y) cre(y) des(x) 
 (  -1.00000) kdelta(I,K) v(L,i,i,x) cre(x) des(Y) 
 (  -1.00000) kdelta(I,K) v(L,i,i,x) cre(x) des(Y) 
 (  -1.00000) kdelta(I,K) v(L,x,Y,y) cre(y) des(x) 
 (  -1.00000) kdelta(I,K) v(L,i,i,x) cre(x) des(Y) 
 (  -1.00000) kdelta(I,K) v(L,i,i,x) cre(x) des(Y) 
 (  -1.00000) e(L) kdelta(I,K) t1(L,x) cre(x) des(Y) 
 (   1.00000) e(L) kdelta(I,K) t1(L,x,Y,y) cre(y) des(x) 
 (   1.00000) e(L) kdelta(I,K) t1(L,x,Y,y) cre(y) des(x) 
 (  -1.00000) h(Y,x) kdelta(I,K) t1(L,y,x,z) cre(z) des(y) 
 (  -1.00000) h(Y,x) kdelta(I,K) t1(L,y,x,z) cre(z) des(y) 
 (   1.00000) h(x,y) kdelta(I,K) t1(L,x) cre(y) des(Y) 
 (   1.00000) h(x,y) kdelta(I,K) t1(L,x,Y,z) cre(z) des(y) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(L,z,Y,x) cre(y) des(z) 
 (   1.00000) h(x,y) kdelta(I,K) t1(L,x,Y,z) cre(z) des(y) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(L,z,Y,x) cre(y) des(z) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(Y,y,x,z) cre(y) des(z) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(Y,y,x,z) cre(y) des(z) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,x,i,y) cre(y) des(Y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,x,i,y) cre(y) des(Y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,x,i,y) cre(y) des(Y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,x,i,y) cre(y) des(Y) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,i,z) cre(y) des(z) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,i,z) cre(y) des(z) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,i,z) cre(y) des(z) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,i,z) cre(y) des(z) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,i,z) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,i,z) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,i,z) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,i,z) cre(z) des(x) 
 (  -0.50000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,z) cre(w) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,i,y) cre(z) des(x) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,z) cre(w) des(x) 
 (  -0.50000) kdelta(I,K) v(L,x,y,z) cre(y) cre(z) des(Y) des(x) 
 (  -1.00000) kdelta(I,K) v(L,x,y,z) cre(y) cre(z) des(Y) des(x) 
 (   0.50000) e(L) kdelta(I,K) t1(L,x,y,z) cre(y) cre(z) des(Y) des(x) 
 (   1.00000) e(L) kdelta(I,K) t1(L,x,y,z) cre(y) cre(z) des(Y) des(x) 
 (   0.50000) h(x,y) kdelta(I,K) t1(L,x,z,w) cre(z) cre(w) des(Y) des(y) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(L,z,x,w) cre(y) cre(w) des(Y) des(z) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(L,z,x,w) cre(y) cre(w) des(Y) des(z) 
 (   1.00000) h(x,y) kdelta(I,K) t1(L,x,z,w) cre(z) cre(w) des(Y) des(y) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(L,z,x,w) cre(y) cre(w) des(Y) des(z) 
 (  -0.50000) kdelta(I,K) t1(L,x) v(x,y,z,w) cre(z) cre(w) des(Y) des(y) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(x,y,z,w) cre(z) cre(w) des(Y) des(y) 
 (  -0.50000) kdelta(I,K) t1(L,x,Y,y) v(x,z,w,u) cre(y) cre(z) des(w) des(u) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(x,z,w,u) cre(y) cre(z) des(w) des(u) 
 (   0.50000) kdelta(I,K) t1(L,x,Y,y) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   0.25000) kdelta(I,K) t1(L,x,y,z) v(Y,x,w,u) cre(y) cre(z) des(w) des(u) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,u) cre(z) cre(w) des(x) des(u) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,u) cre(z) cre(w) des(x) des(u) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(i,x,i,w) cre(y) cre(z) des(Y) des(w) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(i,x,i,w) cre(y) cre(z) des(Y) des(w) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(i,x,i,w) cre(y) cre(z) des(Y) des(w) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(i,x,i,w) cre(y) cre(z) des(Y) des(w) 
 (  -0.25000) kdelta(I,K) t1(L,x,y,z) v(y,z,w,u) cre(w) cre(u) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(x,z,w,u) cre(y) cre(z) des(w) des(u) 
 (  -0.50000) kdelta(I,K) t1(L,x,Y,y) v(x,z,w,u) cre(y) cre(z) des(w) des(u) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   0.50000) kdelta(I,K) t1(L,x,Y,y) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,u) cre(z) cre(w) des(x) des(u) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,u) cre(z) cre(w) des(x) des(u) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,i,w) cre(z) cre(w) des(Y) des(x) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,x,w,u) cre(y) cre(z) des(w) des(u) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,w,y,u) cre(z) cre(w) des(x) des(u) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(y,z,w,u) cre(w) cre(u) des(Y) des(x) 
 (   0.25000) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) cre(y) cre(z) cre(w) des(Y) des(u) des(v) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) cre(y) cre(z) cre(w) des(Y) des(u) des(v) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(Y) des(x) des(w) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(Y) des(x) des(w) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(Y) des(x) des(w) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(Y) des(x) des(w) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) cre(y) cre(z) cre(w) des(Y) des(u) des(v) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) cre(y) cre(z) cre(w) des(Y) des(u) des(v) 
 (   1.00000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(Y) des(x) des(w) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) cre(z) cre(u) cre(v) des(Y) des(x) des(w) 

Total terms : 104
SQA automation time :  40.115 seconds

------------------------ Converting Spin-Integrated Tensors to Spin-Adapted ------------------------

----------------------------------------------------------------------------------------------------
Convert Cre/Des objects to RDM objects...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices according to: alpha < beta
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Converting Kronecker Deltas to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting eigenvalues to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 1e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting 2e- integrals to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting T amplitudes to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------
Converting RDMs to spin-adapted formulation...

Converting 1-RDMs to spin-adapted formulation...
Converting 2-RDMs to spin-adapted formulation...
Converting 3-RDMs to spin-adapted formulation...
Converting 4-RDMs to spin-adapted formulation...
Done!
----------------------------------------------------------------------------------------------------

Combining 343 spin-adapted terms...

Reorder 2e- integrals in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reorder RDM tensor indices in Chemists' notation...
Done!
----------------------------------------------------------------------------------------------------
Reordering indices according to core < active < virtual...
Done!
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

230 spin-adapted terms combined.
----------------------------------------------------------------------------------------------------

-------------------------------------- Spin-adapted equations --------------------------------------

 (   1.00000) v(K,I,L,Y) 
 (  -1.00000) v(L,I,K,Y) 
 (  -1.00000) h(L,Y) kdelta(I,K) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (  -2.00000) kdelta(I,K) v(i,i,L,Y) 
 (  -2.00000) kdelta(I,K) v(i,i,L,Y) 
 (  -0.50000) v(K,I,L,x) rdm(Y,x) 
 (   0.50000) v(L,I,K,x) rdm(Y,x) 
 (   1.00000) e(L) kdelta(I,K) t1(L,Y) 
 (   0.50000) h(L,x) kdelta(I,K) rdm(Y,x) 
 (  -1.00000) h(Y,x) kdelta(I,K) t1(L,x) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,Y,x,i) 
 (  -4.00000) kdelta(I,K) t1(L,x) v(i,i,Y,x) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,Y,x,i) 
 (  -4.00000) kdelta(I,K) t1(L,x) v(i,i,Y,x) 
 (  -1.00000) kdelta(I,K) v(L,Y,x,y) rdm(x,y) 
 (  -0.50000) kdelta(I,K) v(L,i,i,x) rdm(Y,x) 
 (  -0.50000) kdelta(I,K) v(L,i,i,x) rdm(Y,x) 
 (   0.50000) kdelta(I,K) v(L,x,y,Y) rdm(y,x) 
 (   0.50000) kdelta(I,K) v(L,x,y,z) rdm(Y,y,x,z) 
 (   1.00000) kdelta(I,K) v(i,i,L,x) rdm(Y,x) 
 (   1.00000) kdelta(I,K) v(i,i,L,x) rdm(Y,x) 
 (  -0.50000) e(L) kdelta(I,K) t1(L,x) rdm(Y,x) 
 (   1.00000) e(L) kdelta(I,K) t1(L,x,Y,y) rdm(x,y) 
 (  -0.50000) e(L) kdelta(I,K) t1(L,x,y,Y) rdm(x,y) 
 (  -0.50000) e(L) kdelta(I,K) t1(L,x,y,z) rdm(Y,x,y,z) 
 (  -1.00000) h(Y,x) kdelta(I,K) t1(L,y,x,z) rdm(y,z) 
 (   0.50000) h(Y,x) kdelta(I,K) t1(L,y,z,x) rdm(y,z) 
 (   0.50000) h(x,y) kdelta(I,K) t1(L,x) rdm(Y,y) 
 (   1.00000) h(x,y) kdelta(I,K) t1(L,x,Y,z) rdm(y,z) 
 (  -0.50000) h(x,y) kdelta(I,K) t1(L,x,z,Y) rdm(y,z) 
 (  -0.50000) h(x,y) kdelta(I,K) t1(L,x,z,w) rdm(Y,y,z,w) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(L,z,Y,x) rdm(y,z) 
 (   0.50000) h(x,y) kdelta(I,K) t1(L,z,w,x) rdm(Y,z,w,y) 
 (   0.50000) h(x,y) kdelta(I,K) t1(L,z,x,Y) rdm(y,z) 
 (   0.50000) h(x,y) kdelta(I,K) t1(L,z,x,w) rdm(Y,z,y,w) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(Y,x,y,z) rdm(y,z) 
 (   0.50000) kdelta(I,K) t1(L,x) v(Y,y,z,x) rdm(z,y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,i,x,y) rdm(Y,y) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(i,x,y,i) rdm(Y,y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,i,x,y) rdm(Y,y) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(i,x,y,i) rdm(Y,y) 
 (   0.50000) kdelta(I,K) t1(L,x) v(x,y,z,w) rdm(Y,z,y,w) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,x,z) rdm(y,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,y,z) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,z,i) rdm(y,z) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,z,i) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,x,z) rdm(y,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,y,z) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,z,i) rdm(y,z) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,z,i) rdm(x,z) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(x,z,w,u) rdm(y,w,z,u) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(y,z,w,u) rdm(x,w,z,u) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,x,z) rdm(y,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,y,z) rdm(x,z) 
 (   1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,x,z,i) rdm(y,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,y,z,i) rdm(x,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,x,z) rdm(y,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,y,z) rdm(x,z) 
 (   1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,x,z,i) rdm(y,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,y,z,i) rdm(x,z) 
 (  -0.50000) kdelta(I,K) t1(L,x,y,Y) v(x,z,w,u) rdm(y,w,z,u) 
 (   0.50000) kdelta(I,K) t1(L,x,y,Y) v(y,z,w,u) rdm(x,w,z,u) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(Y,w,u,y) rdm(x,w,z,u) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(Y,w,u,z) rdm(x,w,u,y) 
 (  -0.50000) kdelta(I,K) t1(L,x,y,z) v(Y,w,x,u) rdm(y,z,w,u) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,y,w,u) rdm(x,u,z,w) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(Y,y,w,z) rdm(x,w) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(Y,z,w,u) rdm(x,u,y,w) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(Y,z,w,y) rdm(x,w) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,y,i) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,z,i) rdm(x,y) 
 (  -4.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,y) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,z) rdm(x,y) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,y,z) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,z,y) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,y,w) rdm(Y,x,w,z) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,w,y) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,y,w) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,y,z) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,z,y) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,w,i) rdm(Y,x,w,z) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,w,y) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,y,w) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,y,i) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,z,i) rdm(x,y) 
 (  -4.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,y) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,z) rdm(x,y) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,y,z) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,z,y) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,y,w) rdm(Y,x,w,z) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,w,y) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,y,w) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,y,z) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,z,y) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,w,i) rdm(Y,x,w,z) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,w,y) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,y,w) 
 (   0.12500) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) rdm(Y,w,v,u,y,z) 
 (   0.12500) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) rdm(Y,w,v,u,z,y) 
 (   0.12500) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) rdm(Y,w,v,y,u,z) 
 (  -0.37500) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) rdm(Y,w,v,y,z,u) 
 (   0.12500) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) rdm(Y,w,v,z,u,y) 
 (   0.12500) kdelta(I,K) t1(L,x,y,z) v(x,w,u,v) rdm(Y,w,v,z,y,u) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(y,w,u,v) rdm(Y,x,u,w,z,v) 
 (   0.50000) kdelta(I,K) t1(L,x,y,z) v(y,w,z,u) rdm(Y,x,w,u) 
 (  -0.08333) kdelta(I,K) t1(L,x,y,z) v(z,w,u,v) rdm(Y,x,u,v,w,y) 
 (  -0.08333) kdelta(I,K) t1(L,x,y,z) v(z,w,u,v) rdm(Y,x,u,v,y,w) 
 (  -0.08333) kdelta(I,K) t1(L,x,y,z) v(z,w,u,v) rdm(Y,x,u,w,v,y) 
 (  -0.08333) kdelta(I,K) t1(L,x,y,z) v(z,w,u,v) rdm(Y,x,u,w,y,v) 
 (  -0.08333) kdelta(I,K) t1(L,x,y,z) v(z,w,u,v) rdm(Y,x,u,y,v,w) 
 (   0.41667) kdelta(I,K) t1(L,x,y,z) v(z,w,u,v) rdm(Y,x,u,y,w,v) 

Total spin-integrated terms: 104
Total spin-adapted terms: 113
Spin-adaptation automation time :  29.904 seconds
----------------------------------------------------------------------------------------------------
Dummy indices relabelling...
Done!
----------------------------------------------------------------------------------------------------

--------------------------------------------- WARNING ----------------------------------------------

Terms with a contraction over repeating dummy core indices of 2e- integrals
will be removed. Set "remove_core_integrals" flag to FALSE to preserve terms

60 terms removed:
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (   1.00000) kdelta(I,K) v(L,i,i,Y) 
 (  -2.00000) kdelta(I,K) v(i,i,L,Y) 
 (  -2.00000) kdelta(I,K) v(i,i,L,Y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,Y,x,i) 
 (  -4.00000) kdelta(I,K) t1(L,x) v(i,i,Y,x) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,Y,x,i) 
 (  -4.00000) kdelta(I,K) t1(L,x) v(i,i,Y,x) 
 (  -0.50000) kdelta(I,K) v(L,i,i,x) rdm(Y,x) 
 (  -0.50000) kdelta(I,K) v(L,i,i,x) rdm(Y,x) 
 (   1.00000) kdelta(I,K) v(i,i,L,x) rdm(Y,x) 
 (   1.00000) kdelta(I,K) v(i,i,L,x) rdm(Y,x) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,i,x,y) rdm(Y,y) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(i,x,y,i) rdm(Y,y) 
 (   2.00000) kdelta(I,K) t1(L,x) v(i,i,x,y) rdm(Y,y) 
 (  -1.00000) kdelta(I,K) t1(L,x) v(i,x,y,i) rdm(Y,y) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,x,z) rdm(y,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,y,z) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,z,i) rdm(y,z) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,z,i) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,x,z) rdm(y,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,Y,y) v(i,i,y,z) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,x,z,i) rdm(y,z) 
 (   1.00000) kdelta(I,K) t1(L,x,Y,y) v(i,y,z,i) rdm(x,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,x,z) rdm(y,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,y,z) rdm(x,z) 
 (   1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,x,z,i) rdm(y,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,y,z,i) rdm(x,z) 
 (  -2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,x,z) rdm(y,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,Y) v(i,i,y,z) rdm(x,z) 
 (   1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,x,z,i) rdm(y,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,Y) v(i,y,z,i) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,y,i) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,z,i) rdm(x,y) 
 (  -4.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,y) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,z) rdm(x,y) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,y,z) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,z,y) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,y,w) rdm(Y,x,w,z) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,w,y) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,y,w) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,y,z) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,z,y) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,w,i) rdm(Y,x,w,z) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,w,y) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,y,w) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,y,i) rdm(x,z) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,Y,z,i) rdm(x,y) 
 (  -4.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,y) rdm(x,z) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,Y,z) rdm(x,y) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,y,z) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,x,w) rdm(Y,w,z,y) 
 (   2.00000) kdelta(I,K) t1(L,x,y,z) v(i,i,y,w) rdm(Y,x,w,z) 
 (  -0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,w,y) 
 (   0.66667) kdelta(I,K) t1(L,x,y,z) v(i,i,z,w) rdm(Y,x,y,w) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,y,z) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,x,w,i) rdm(Y,w,z,y) 
 (  -1.00000) kdelta(I,K) t1(L,x,y,z) v(i,y,w,i) rdm(Y,x,w,z) 
 (   0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,w,y) 
 (  -0.33333) kdelta(I,K) t1(L,x,y,z) v(i,z,w,i) rdm(Y,x,y,w) 
----------------------------------------------------------------------------------------------------
Remaining terms: 53


--------------------------------------- genEinsum equations ----------------------------------------

M_c_cva_a_aaa  = einsum('KILY->IKLY', v_xxva, optimize = einsum_type).copy()
M_c_cva_a_aaa -= einsum('LIKY->IKLY', v_vxxa, optimize = einsum_type).copy()
M_c_cva_a_aaa -= einsum('LY,IK->IKLY', h_va, np.identity(ncvs), optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('KILx,Yx->IKLY', v_xxva, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('LIKx,Yx->IKLY', v_vxxa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += einsum('L,IK,LY->IKLY', e_val, np.identity(ncvs), t1_va, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('Lx,IK,Yx->IKLY', h_va, np.identity(ncvs), rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('Yx,IK,Lx->IKLY', h_aa, np.identity(ncvs), t1_va, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('IK,LYxy,xy->IKLY', np.identity(ncvs), v_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,LxyY,yx->IKLY', np.identity(ncvs), v_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,Yyxz->IKLY', np.identity(ncvs), v_vaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('L,IK,Lx,Yx->IKLY', e_val, np.identity(ncvs), t1_va, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += einsum('L,IK,LxYy,xy->IKLY', e_val, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('L,IK,LxyY,xy->IKLY', e_val, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('L,IK,Lxyz,Yxyz->IKLY', e_val, np.identity(ncvs), t1_vaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('Yx,IK,Lyxz,yz->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('Yx,IK,Lyzx,yz->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('xy,IK,Lx,Yy->IKLY', h_aa, np.identity(ncvs), t1_va, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += einsum('xy,IK,LxYz,yz->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('xy,IK,LxzY,yz->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('xy,IK,Lxzw,Yyzw->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('xy,IK,LzYx,yz->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('xy,IK,Lzwx,Yzwy->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('xy,IK,LzxY,yz->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('xy,IK,Lzxw,Yzyw->IKLY', h_aa, np.identity(ncvs), t1_vaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('IK,Lx,Yxyz,yz->IKLY', np.identity(ncvs), t1_va, v_aaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lx,Yyzx,zy->IKLY', np.identity(ncvs), t1_va, v_aaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lx,xyzw,Yzyw->IKLY', np.identity(ncvs), t1_va, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa += einsum('IK,LxYy,xzwu,ywzu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('IK,LxYy,yzwu,xwzu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('IK,LxyY,xzwu,ywzu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,LxyY,yzwu,xwzu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,Ywuy,xwzu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,Ywuz,xwuy->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/2 * einsum('IK,Lxyz,Ywxu,yzwu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('IK,Lxyz,Yywu,xuzw->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= einsum('IK,Lxyz,Yywz,xw->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,Yzwu,xuyw->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,Yzwy,xw->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ca, optimize = einsum_type)
M_c_cva_a_aaa += 1/8 * einsum('IK,Lxyz,xwuv,Ywvuyz->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/8 * einsum('IK,Lxyz,xwuv,Ywvuzy->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/8 * einsum('IK,Lxyz,xwuv,Ywvyuz->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa -= 3/8 * einsum('IK,Lxyz,xwuv,Ywvyzu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/8 * einsum('IK,Lxyz,xwuv,Ywvzuy->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/8 * einsum('IK,Lxyz,xwuv,Ywvzyu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,ywuv,Yxuwzv->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 1/2 * einsum('IK,Lxyz,ywzu,Yxwu->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_ccaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/12 * einsum('IK,Lxyz,zwuv,Yxuvwy->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/12 * einsum('IK,Lxyz,zwuv,Yxuvyw->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/12 * einsum('IK,Lxyz,zwuv,Yxuwvy->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/12 * einsum('IK,Lxyz,zwuv,Yxuwyv->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa -= 1/12 * einsum('IK,Lxyz,zwuv,Yxuyvw->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
M_c_cva_a_aaa += 5/12 * einsum('IK,Lxyz,zwuv,Yxuywv->IKLY', np.identity(ncvs), t1_vaaa, v_aaaa, rdm_cccaaa, optimize = einsum_type)
----------------------------------------------------------------------------------------------------
> Total elapsed time: 220.67 seconds.
