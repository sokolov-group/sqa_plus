
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(I,A,a) h(X,a) 
 (  -1.00000) X(I,A,a) v(i,X,i,a) 
 (   0.50000) X(I,a,b) v(X,A,a,b) 
 (   1.00000) X(i,A,a) v(i,X,I,a) 
 (  -1.00000) X(I,A,a) e(a) t1(X,a) 
 (   1.00000) X(I,A,a) h(X,x) t1(x,a) 
 (   1.00000) X(I,A,a) t1(x,a) v(i,X,i,x) 
 (   1.00000) X(I,A,a) h(x,a) cre(x) des(X) 
 (   1.00000) X(I,A,a) v(X,y,x,a) cre(y) des(x) 
 (   1.00000) X(I,A,a) v(i,x,i,a) cre(x) des(X) 
 (  -0.50000) X(I,a,b) v(x,A,a,b) cre(x) des(X) 
 (  -1.00000) X(i,A,a) v(i,x,I,a) cre(x) des(X) 
 (  -1.00000) X(I,A,a) e(a) t1(X,x,a,y) cre(x) des(y) 
 (   1.00000) X(I,A,a) e(a) t1(x,a) cre(x) des(X) 
 (   1.00000) X(I,A,a) h(X,x) t1(x,y,a,z) cre(y) des(z) 
 (   1.00000) X(I,A,a) h(x,y) t1(X,x,a,z) cre(y) des(z) 
 (  -1.00000) X(I,A,a) h(x,y) t1(X,z,a,x) cre(z) des(y) 
 (  -1.00000) X(I,A,a) h(x,y) t1(x,a) cre(y) des(X) 
 (  -1.00000) X(I,A,a) t1(X,x,a,y) v(i,y,i,z) cre(x) des(z) 
 (   1.00000) X(I,A,a) t1(X,x,a,y) v(i,z,i,x) cre(z) des(y) 
 (   1.00000) X(I,A,a) t1(x,a) v(x,y,X,z) cre(z) des(y) 
 (  -1.00000) X(I,A,a) t1(x,a) v(i,y,i,x) cre(y) des(X) 
 (   1.00000) X(I,A,a) t1(x,y,a,z) v(i,X,i,x) cre(y) des(z) 
 (   0.50000) X(I,A,a) t1(x,y,a,z) v(x,y,X,w) cre(w) des(z) 
 (   0.50000) X(I,A,a) v(y,z,x,a) cre(y) cre(z) des(X) des(x) 
 (  -0.50000) X(I,A,a) e(a) t1(x,y,a,z) cre(x) cre(y) des(X) des(z) 
 (   1.00000) X(I,A,a) h(x,y) t1(x,z,a,w) cre(y) cre(z) des(X) des(w) 
 (  -0.50000) X(I,A,a) h(x,y) t1(z,w,a,x) cre(z) cre(w) des(X) des(y) 
 (  -0.50000) X(I,A,a) t1(X,x,a,y) v(x,z,w,u) cre(w) cre(u) des(y) des(z) 
 (   0.50000) X(I,A,a) t1(X,x,a,y) v(z,w,y,u) cre(x) cre(u) des(z) des(w) 
 (   0.50000) X(I,A,a) t1(x,a) v(x,y,z,w) cre(z) cre(w) des(X) des(y) 
 (   0.25000) X(I,A,a) t1(x,y,a,z) v(x,y,w,u) cre(w) cre(u) des(X) des(z) 
 (  -1.00000) X(I,A,a) t1(x,y,a,z) v(x,w,X,u) cre(y) cre(u) des(z) des(w) 
 (  -0.50000) X(I,A,a) t1(x,y,a,z) v(i,z,i,w) cre(x) cre(y) des(X) des(w) 
 (  -0.25000) X(I,A,a) t1(x,y,a,z) v(w,u,X,z) cre(x) cre(y) des(w) des(u) 
 (  -1.00000) X(I,A,a) t1(x,y,a,z) v(i,w,i,x) cre(y) cre(w) des(X) des(z) 
 (  -0.50000) X(I,A,a) t1(x,y,a,z) v(x,w,u,v) cre(y) cre(u) cre(v) des(X) des(z) des(w) 
 (  -0.25000) X(I,A,a) t1(x,y,a,z) v(w,u,z,v) cre(x) cre(y) cre(v) des(X) des(w) des(u) 

Total terms : 38
SQA automation time :  1.450 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('IAa, Xa->IXA', X, h_ae_so, optimize = True)
temp -= np.einsum('IAa, iXia->IXA', X, v_cace_so, optimize = True)
temp += 0.5 * np.einsum('Iab, XAab->IXA', X, v_aeee_so, optimize = True)
temp += np.einsum('iAa, iXIa->IXA', X, v_cace_so, optimize = True)
temp -= np.einsum('IAa, a, Xa->IXA', X, e_extern_so, t1_ae, optimize = True)
temp += np.einsum('IAa, Xx, xa->IXA', X, h_aa_so, t1_ae, optimize = True)
temp += np.einsum('IAa, xa, iXix->IXA', X, t1_ae, v_caca_so, optimize = True)
temp += np.einsum('IAa, xa, xX->IXA', X, h_ae_so, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, Xyxa, yx->IXA', X, v_aaae_so, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, ixia, xX->IXA', X, v_cace_so, rdm_ca_so, optimize = True)
temp -= 0.5 * np.einsum('Iab, xAab, xX->IXA', X, v_aeee_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iAa, ixIa, xX->IXA', X, v_cace_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IAa, a, Xxay, xy->IXA', X, e_extern_so, t1_aaea, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, a, xa, xX->IXA', X, e_extern_so, t1_ae, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, Xx, xyaz, yz->IXA', X, h_aa_so, t1_aaea, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, xy, Xxaz, yz->IXA', X, h_aa_so, t1_aaea, rdm_ca_so, optimize = True)
temp -= np.einsum('IAa, xy, Xzax, zy->IXA', X, h_aa_so, t1_aaea, rdm_ca_so, optimize = True)
temp -= np.einsum('IAa, xy, xa, yX->IXA', X, h_aa_so, t1_ae, rdm_ca_so, optimize = True)
temp -= np.einsum('IAa, Xxay, iyiz, xz->IXA', X, t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, Xxay, izix, zy->IXA', X, t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, xa, xyXz, zy->IXA', X, t1_ae, v_aaaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IAa, xa, iyix, yX->IXA', X, t1_ae, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IAa, xyaz, iXix, yz->IXA', X, t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('IAa, xyaz, xyXw, wz->IXA', X, t1_aaea, v_aaaa_so, rdm_ca_so, optimize = True)
temp += 0.5 * np.einsum('IAa, yzxa, yzXx->IXA', X, v_aaae_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IAa, a, xyaz, xyXz->IXA', X, e_extern_so, t1_aaea, rdm_ccaa_so, optimize = True)
temp += np.einsum('IAa, xy, xzaw, yzXw->IXA', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IAa, xy, zwax, zwXy->IXA', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IAa, Xxay, xzwu, wuyz->IXA', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('IAa, Xxay, zwyu, xuzw->IXA', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('IAa, xa, xyzw, zwXy->IXA', X, t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.25 * np.einsum('IAa, xyaz, xywu, wuXz->IXA', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IAa, xyaz, xwXu, yuzw->IXA', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IAa, xyaz, iziw, xyXw->IXA', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.25 * np.einsum('IAa, xyaz, wuXz, xywu->IXA', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IAa, xyaz, iwix, ywXz->IXA', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IAa, xyaz, xwuv, yuvXzw->IXA', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.25 * np.einsum('IAa, xyaz, wuzv, xyvXwu->IXA', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
