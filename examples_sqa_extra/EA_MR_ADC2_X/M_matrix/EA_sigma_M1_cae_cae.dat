
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(I,x,a) v(x,a,X,A) 
 (  -1.00000) X(i,X,a) v(I,a,i,A) 
 (  -1.00000) X(i,x,A) v(I,x,i,X) 
 (  -1.00000) X(I,X,a) gamma(x,y) v(x,a,y,A) 
 (   1.00000) X(i,X,A) gamma(x,y) v(I,x,i,y) 
 (   1.00000) X(I,X,a) v(x,a,y,A) cre(y) des(x) 
 (  -1.00000) X(I,x,a) v(x,a,y,A) cre(y) des(X) 
 (  -1.00000) X(I,x,a) v(y,a,X,A) cre(x) des(y) 
 (  -1.00000) X(i,X,A) v(I,x,i,y) cre(y) des(x) 
 (   1.00000) X(i,x,A) v(I,x,i,y) cre(y) des(X) 
 (   1.00000) X(i,x,A) v(I,y,i,X) cre(x) des(y) 
 (   1.00000) X(i,x,a) v(I,a,i,A) cre(x) des(X) 
 (   1.00000) X(I,x,a) gamma(y,z) v(y,a,z,A) cre(x) des(X) 
 (  -1.00000) X(i,x,A) gamma(y,z) v(I,y,i,z) cre(x) des(X) 
 (   1.00000) X(I,x,a) v(y,a,z,A) cre(x) cre(z) des(X) des(y) 
 (  -1.00000) X(i,x,A) v(I,y,i,z) cre(x) cre(z) des(X) des(y) 

Total terms : 16
SQA automation time :  4.249 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('Ixa, xaXA->IXA', X, v_aeae_so, optimize = True)
temp -= np.einsum('iXa, IaiA->IXA', X, v_cece_so, optimize = True)
temp -= np.einsum('ixA, IxiX->IXA', X, v_caca_so, optimize = True)
temp -= np.einsum('IXa, xy, xayA->IXA', X, rdm_ca_so, v_aeae_so, optimize = True)
temp += np.einsum('iXA, xy, Ixiy->IXA', X, rdm_ca_so, v_caca_so, optimize = True)
temp += np.einsum('IXa, xayA, yx->IXA', X, v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('Ixa, xayA, yX->IXA', X, v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('Ixa, yaXA, xy->IXA', X, v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('iXA, Ixiy, yx->IXA', X, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('ixA, Ixiy, yX->IXA', X, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('ixA, IyiX, xy->IXA', X, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('ixa, IaiA, xX->IXA', X, v_cece_so, rdm_ca_so, optimize = True)
temp += np.einsum('Ixa, yz, yazA, xX->IXA', X, rdm_ca_so, v_aeae_so, rdm_ca_so, optimize = True)
temp -= np.einsum('ixA, yz, Iyiz, xX->IXA', X, rdm_ca_so, v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('Ixa, yazA, xzXy->IXA', X, v_aeae_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('ixA, Iyiz, xzXy->IXA', X, v_caca_so, rdm_ccaa_so, optimize = True)
