
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) kdelta(W,X) v(I,Z,J,Y) 
 (   1.00000) kdelta(W,Y) v(I,Z,J,X) 
 (   1.00000) kdelta(X,Z) v(I,W,J,Y) 
 (  -1.00000) kdelta(Y,Z) v(I,W,J,X) 
 (   1.00000) gamma(x,y) v(I,x,J,y) kdelta(W,X) kdelta(Y,Z) 
 (  -1.00000) gamma(x,y) v(I,x,J,y) kdelta(W,Y) kdelta(X,Z) 
 (   1.00000) v(I,W,J,X) cre(Z) des(Y) 
 (  -1.00000) v(I,W,J,Y) cre(Z) des(X) 
 (  -1.00000) v(I,Z,J,X) cre(W) des(Y) 
 (   1.00000) v(I,Z,J,Y) cre(W) des(X) 
 (   1.00000) kdelta(W,X) v(I,Z,J,x) cre(x) des(Y) 
 (   1.00000) kdelta(W,X) v(I,x,J,Y) cre(Z) des(x) 
 (  -1.00000) kdelta(W,Y) v(I,Z,J,x) cre(x) des(X) 
 (  -1.00000) kdelta(W,Y) v(I,x,J,X) cre(Z) des(x) 
 (  -1.00000) kdelta(X,Z) v(I,W,J,x) cre(x) des(Y) 
 (  -1.00000) kdelta(X,Z) v(I,x,J,Y) cre(W) des(x) 
 (   1.00000) kdelta(Y,Z) v(I,W,J,x) cre(x) des(X) 
 (   1.00000) kdelta(Y,Z) v(I,x,J,X) cre(W) des(x) 
 (  -1.00000) gamma(x,y) kdelta(W,X) v(I,x,J,y) cre(Z) des(Y) 
 (   1.00000) gamma(x,y) kdelta(W,Y) v(I,x,J,y) cre(Z) des(X) 
 (   1.00000) gamma(x,y) kdelta(X,Z) v(I,x,J,y) cre(W) des(Y) 
 (  -1.00000) gamma(x,y) kdelta(Y,Z) v(I,x,J,y) cre(W) des(X) 
 (  -1.00000) v(I,x,J,y) kdelta(W,X) kdelta(Y,Z) cre(y) des(x) 
 (   1.00000) v(I,x,J,y) kdelta(W,Y) kdelta(X,Z) cre(y) des(x) 
 (  -1.00000) v(I,W,J,x) cre(Z) cre(x) des(X) des(Y) 
 (   1.00000) v(I,Z,J,x) cre(W) cre(x) des(X) des(Y) 
 (  -1.00000) v(I,x,J,X) cre(W) cre(Z) des(Y) des(x) 
 (   1.00000) v(I,x,J,Y) cre(W) cre(Z) des(X) des(x) 
 (  -1.00000) gamma(x,y) v(I,x,J,y) cre(W) cre(Z) des(X) des(Y) 
 (  -1.00000) kdelta(W,X) v(I,x,J,y) cre(Z) cre(y) des(Y) des(x) 
 (   1.00000) kdelta(W,Y) v(I,x,J,y) cre(Z) cre(y) des(X) des(x) 
 (   1.00000) kdelta(X,Z) v(I,x,J,y) cre(W) cre(y) des(Y) des(x) 
 (  -1.00000) kdelta(Y,Z) v(I,x,J,y) cre(W) cre(y) des(X) des(x) 
 (   1.00000) v(I,x,J,y) cre(W) cre(Z) cre(y) des(X) des(Y) des(x) 

Total terms : 34
SQA automation time :  18.965 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('WX, IZJY->IXYJWZ', np.identity(ncas), v_caca_so, optimize = True)
temp += np.einsum('WY, IZJX->IXYJWZ', np.identity(ncas), v_caca_so, optimize = True)
temp += np.einsum('XZ, IWJY->IXYJWZ', np.identity(ncas), v_caca_so, optimize = True)
temp -= np.einsum('YZ, IWJX->IXYJWZ', np.identity(ncas), v_caca_so, optimize = True)
temp += np.einsum('xy, IxJy, WX, YZ->IXYJWZ', rdm_ca_so, v_caca_so, np.identity(ncas), np.identity(ncas), optimize = True)
temp -= np.einsum('xy, IxJy, WY, XZ->IXYJWZ', rdm_ca_so, v_caca_so, np.identity(ncas), np.identity(ncas), optimize = True)
temp += np.einsum('IWJX, ZY->IXYJWZ', v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IWJY, ZX->IXYJWZ', v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IZJX, WY->IXYJWZ', v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IZJY, WX->IXYJWZ', v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('WX, IZJx, xY->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('WX, IxJY, Zx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('WY, IZJx, xX->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('WY, IxJX, Zx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('XZ, IWJx, xY->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('XZ, IxJY, Wx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('YZ, IWJx, xX->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('YZ, IxJX, Wx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, WX, IxJy, ZY->IXYJWZ', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xy, WY, IxJy, ZX->IXYJWZ', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('xy, XZ, IxJy, WY->IXYJWZ', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, YZ, IxJy, WX->IXYJWZ', rdm_ca_so, np.identity(ncas), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IxJy, WX, YZ, yx->IXYJWZ', v_caca_so, np.identity(ncas), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('IxJy, WY, XZ, yx->IXYJWZ', v_caca_so, np.identity(ncas), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('IWJx, ZxXY->IXYJWZ', v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IZJx, WxXY->IXYJWZ', v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IxJX, WZYx->IXYJWZ', v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IxJY, WZXx->IXYJWZ', v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('xy, IxJy, WZXY->IXYJWZ', rdm_ca_so, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('WX, IxJy, ZyYx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('WY, IxJy, ZyXx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('XZ, IxJy, WyYx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('YZ, IxJy, WyXx->IXYJWZ', np.identity(ncas), v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IxJy, WZyXYx->IXYJWZ', v_caca_so, rdm_cccaaa_so, optimize = True)
