
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(0) ----------------------
Done ...
--------------------------------------------------------------
 (   1.00000) E_fc(Const.) 
 (  -1.00000) e(c1) des(c1) cre(c1) 
 (   1.00000) e(v1) cre(v1) des(v1) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a3,c2,a2,c2) cre(a3) des(a2) 
 (   0.25000) v(a6,a7,a4,a5) cre(a4) cre(a5) des(a7) des(a6) 
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) h(W,Z) kdelta(A,D) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) kdelta(A,D) v(i,Z,i,W) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) e(D) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) des(U) des(V) 
 (  -1.00000) h(U,x) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) h(V,x) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) des(U) des(x) 
 (  -1.00000) v(i,U,i,x) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) des(V) des(x) 
 (   1.00000) v(i,V,i,x) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) des(U) des(x) 
 (   0.50000) v(x,y,U,V) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) des(x) des(y) 
 (   1.00000) e(D) kdelta(A,D) cre(W) cre(X) cre(Y) des(U) des(V) des(Z) 
 (  -1.00000) h(U,x) kdelta(A,D) cre(W) cre(X) cre(Y) des(V) des(Z) des(x) 
 (   1.00000) h(V,x) kdelta(A,D) cre(W) cre(X) cre(Y) des(U) des(Z) des(x) 
 (   1.00000) h(W,x) kdelta(A,D) cre(X) cre(Y) cre(x) des(U) des(V) des(Z) 
 (  -1.00000) kdelta(A,D) v(i,U,i,x) cre(W) cre(X) cre(Y) des(V) des(Z) des(x) 
 (   1.00000) kdelta(A,D) v(i,V,i,x) cre(W) cre(X) cre(Y) des(U) des(Z) des(x) 
 (  -1.00000) kdelta(A,D) v(W,x,Z,y) cre(X) cre(Y) cre(y) des(U) des(V) des(x) 
 (  -0.50000) kdelta(A,D) v(x,y,U,V) cre(W) cre(X) cre(Y) des(Z) des(x) des(y) 
 (   0.50000) kdelta(A,D) v(x,y,U,Z) cre(W) cre(X) cre(Y) des(V) des(x) des(y) 
 (  -0.50000) kdelta(A,D) v(x,y,V,Z) cre(W) cre(X) cre(Y) des(U) des(x) des(y) 
 (   1.00000) kdelta(A,D) v(i,x,i,W) cre(X) cre(Y) cre(x) des(U) des(V) des(Z) 
 (  -0.50000) v(x,y,U,z) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) cre(z) des(V) des(x) des(y) 
 (   0.50000) v(x,y,V,z) kdelta(A,D) kdelta(W,Z) cre(X) cre(Y) cre(z) des(U) des(x) des(y) 
 (  -0.50000) kdelta(A,D) v(W,x,y,z) cre(X) cre(Y) cre(y) cre(z) des(U) des(V) des(Z) des(x) 
 (   0.50000) kdelta(A,D) v(x,y,U,z) cre(W) cre(X) cre(Y) cre(z) des(V) des(Z) des(x) des(y) 
 (  -0.50000) kdelta(A,D) v(x,y,V,z) cre(W) cre(X) cre(Y) cre(z) des(U) des(Z) des(x) des(y) 

Total terms : 24
SQA automation time :  0.758 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('WZ, AD, XYUV->XYAZUVDW', h_aa_so, np.identity(nextern_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('AD, iZiW, XYUV->XYAZUVDW', np.identity(nextern_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('D, AD, WZ, XYUV->XYAZUVDW', e_extern_so, np.identity(nextern_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Ux, AD, WZ, XYVx->XYAZUVDW', h_aa_so, np.identity(nextern_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Vx, AD, WZ, XYUx->XYAZUVDW', h_aa_so, np.identity(nextern_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('iUix, AD, WZ, XYVx->XYAZUVDW', v_caca_so, np.identity(nextern_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('iVix, AD, WZ, XYUx->XYAZUVDW', v_caca_so, np.identity(nextern_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyUV, AD, WZ, XYxy->XYAZUVDW', v_aaaa_so, np.identity(nextern_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('D, AD, WXYUVZ->XYAZUVDW', e_extern_so, np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp -= np.einsum('Ux, AD, WXYVZx->XYAZUVDW', h_aa_so, np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp += np.einsum('Vx, AD, WXYUZx->XYAZUVDW', h_aa_so, np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp += np.einsum('Wx, AD, XYxUVZ->XYAZUVDW', h_aa_so, np.identity(nextern_so), rdm_cccaaa_so, optimize = True)
temp -= np.einsum('AD, iUix, WXYVZx->XYAZUVDW', np.identity(nextern_so), v_caca_so, rdm_cccaaa_so, optimize = True)
temp += np.einsum('AD, iVix, WXYUZx->XYAZUVDW', np.identity(nextern_so), v_caca_so, rdm_cccaaa_so, optimize = True)
temp -= np.einsum('AD, WxZy, XYyUVx->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('AD, xyUV, WXYZxy->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('AD, xyUZ, WXYVxy->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('AD, xyVZ, WXYUxy->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += np.einsum('AD, ixiW, XYxUVZ->XYAZUVDW', np.identity(nextern_so), v_caca_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyUz, AD, WZ, XYzVxy->XYAZUVDW', v_aaaa_so, np.identity(nextern_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('xyVz, AD, WZ, XYzUxy->XYAZUVDW', v_aaaa_so, np.identity(nextern_so), np.identity(ncas_so), rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('AD, Wxyz, XYyzUVZx->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
temp += 0.5 * np.einsum('AD, xyUz, WXYzVZxy->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
temp -= 0.5 * np.einsum('AD, xyVz, WXYzUZxy->XYAZUVDW', np.identity(nextern_so), v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
