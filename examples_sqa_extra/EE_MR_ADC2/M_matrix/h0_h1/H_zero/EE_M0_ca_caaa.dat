
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(0) ----------------------
Done ...
--------------------------------------------------------------
 (   1.00000) E_fc(Const.) 
 (  -1.00000) e(c1) des(c1) cre(c1) 
 (   1.00000) e(v1) cre(v1) des(v1) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a3,c2,a2,c2) cre(a3) des(a2) 
 (   0.25000) v(a6,a7,a4,a5) cre(a4) cre(a5) des(a7) des(a6) 
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) h(U,X) kdelta(I,J) cre(Z) des(Y) 
 (   1.00000) h(X,Z) kdelta(I,J) cre(U) des(Y) 
 (  -1.00000) kdelta(I,J) v(U,Z,X,x) cre(x) des(Y) 
 (  -1.00000) kdelta(I,J) v(i,X,i,U) cre(Z) des(Y) 
 (   1.00000) kdelta(I,J) v(i,X,i,Z) cre(U) des(Y) 
 (   1.00000) e(J) kdelta(I,J) kdelta(U,X) cre(Z) des(Y) 
 (  -1.00000) e(J) kdelta(I,J) kdelta(X,Z) cre(U) des(Y) 
 (   1.00000) h(U,x) kdelta(I,J) kdelta(X,Z) cre(x) des(Y) 
 (   1.00000) h(Y,x) kdelta(I,J) kdelta(U,X) cre(Z) des(x) 
 (  -1.00000) h(Y,x) kdelta(I,J) kdelta(X,Z) cre(U) des(x) 
 (  -1.00000) h(Z,x) kdelta(I,J) kdelta(U,X) cre(x) des(Y) 
 (   1.00000) v(i,Y,i,x) kdelta(I,J) kdelta(U,X) cre(Z) des(x) 
 (  -1.00000) v(i,Y,i,x) kdelta(I,J) kdelta(X,Z) cre(U) des(x) 
 (   1.00000) v(i,x,i,U) kdelta(I,J) kdelta(X,Z) cre(x) des(Y) 
 (  -1.00000) v(i,x,i,Z) kdelta(I,J) kdelta(U,X) cre(x) des(Y) 
 (   1.00000) e(J) kdelta(I,J) cre(U) cre(Z) des(X) des(Y) 
 (   1.00000) h(U,x) kdelta(I,J) cre(Z) cre(x) des(X) des(Y) 
 (   1.00000) h(Y,x) kdelta(I,J) cre(U) cre(Z) des(X) des(x) 
 (  -1.00000) h(Z,x) kdelta(I,J) cre(U) cre(x) des(X) des(Y) 
 (  -0.50000) kdelta(I,J) v(U,Z,x,y) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) kdelta(I,J) v(U,x,X,y) cre(Z) cre(y) des(Y) des(x) 
 (   1.00000) kdelta(I,J) v(i,Y,i,x) cre(U) cre(Z) des(X) des(x) 
 (  -1.00000) kdelta(I,J) v(Z,x,X,y) cre(U) cre(y) des(Y) des(x) 
 (   0.50000) kdelta(I,J) v(x,y,X,Y) cre(U) cre(Z) des(x) des(y) 
 (   1.00000) kdelta(I,J) v(i,x,i,U) cre(Z) cre(x) des(X) des(Y) 
 (  -1.00000) kdelta(I,J) v(i,x,i,Z) cre(U) cre(x) des(X) des(Y) 
 (  -0.50000) v(U,x,y,z) kdelta(I,J) kdelta(X,Z) cre(y) cre(z) des(Y) des(x) 
 (   0.50000) v(Z,x,y,z) kdelta(I,J) kdelta(U,X) cre(y) cre(z) des(Y) des(x) 
 (  -0.50000) v(x,y,Y,z) kdelta(I,J) kdelta(U,X) cre(Z) cre(z) des(x) des(y) 
 (   0.50000) v(x,y,Y,z) kdelta(I,J) kdelta(X,Z) cre(U) cre(z) des(x) des(y) 
 (   0.50000) kdelta(I,J) v(U,x,y,z) cre(Z) cre(y) cre(z) des(X) des(Y) des(x) 
 (  -0.50000) kdelta(I,J) v(Z,x,y,z) cre(U) cre(y) cre(z) des(X) des(Y) des(x) 
 (   0.50000) kdelta(I,J) v(x,y,Y,z) cre(U) cre(Z) cre(z) des(X) des(x) des(y) 

Total terms : 33
SQA automation time :  0.639 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('UX, IJ, ZY->IXJYZU', h_aa_so, np.identity(ncore_so), rdm_ca_so, optimize = True)
temp += np.einsum('XZ, IJ, UY->IXJYZU', h_aa_so, np.identity(ncore_so), rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, UZXx, xY->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, iXiU, ZY->IXJYZU', np.identity(ncore_so), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, iXiZ, UY->IXJYZU', np.identity(ncore_so), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('J, IJ, UX, ZY->IXJYZU', e_core_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('J, IJ, XZ, UY->IXJYZU', e_core_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('Ux, IJ, XZ, xY->IXJYZU', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('Yx, IJ, UX, Zx->IXJYZU', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('Yx, IJ, XZ, Ux->IXJYZU', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('Zx, IJ, UX, xY->IXJYZU', h_aa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('iYix, IJ, UX, Zx->IXJYZU', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('iYix, IJ, XZ, Ux->IXJYZU', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('ixiU, IJ, XZ, xY->IXJYZU', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp -= np.einsum('ixiZ, IJ, UX, xY->IXJYZU', v_caca_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ca_so, optimize = True)
temp += np.einsum('J, IJ, UZXY->IXJYZU', e_core_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Ux, IJ, ZxXY->IXJYZU', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp += np.einsum('Yx, IJ, UZXx->IXJYZU', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Zx, IJ, UxXY->IXJYZU', h_aa_so, np.identity(ncore_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, UZxy, xyXY->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, UxXy, ZyYx->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, iYix, UZXx->IXJYZU', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, ZxXy, UyYx->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('IJ, xyXY, UZxy->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, ixiU, ZxXY->IXJYZU', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, ixiZ, UxXY->IXJYZU', np.identity(ncore_so), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('Uxyz, IJ, XZ, yzYx->IXJYZU', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('Zxyz, IJ, UX, yzYx->IXJYZU', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xyYz, IJ, UX, Zzxy->IXJYZU', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xyYz, IJ, XZ, Uzxy->IXJYZU', v_aaaa_so, np.identity(ncore_so), np.identity(ncas_so), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('IJ, Uxyz, ZyzXYx->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, Zxyz, UyzXYx->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.5 * np.einsum('IJ, xyYz, UZzXxy->IXJYZU', np.identity(ncore_so), v_aaaa_so, rdm_cccaaa_so, optimize = True)
