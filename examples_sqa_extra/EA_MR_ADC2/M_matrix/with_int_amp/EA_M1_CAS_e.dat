
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) h(x,B) cre(x) 
 (   1.00000) v(i,x,i,B) cre(x) 
 (   1.00000) e(B) t1(x,B) cre(x) 
 (  -1.00000) h(x,y) t1(x,B) cre(y) 
 (  -1.00000) t1(x,B) v(i,y,i,x) cre(y) 
 (  -0.50000) v(y,z,x,B) cre(y) cre(z) des(x) 
 (   0.50000) e(B) t1(x,y,B,z) cre(x) cre(y) des(z) 
 (  -1.00000) h(x,y) t1(x,z,B,w) cre(y) cre(z) des(w) 
 (   0.50000) h(x,y) t1(z,w,B,x) cre(z) cre(w) des(y) 
 (  -0.50000) t1(x,B) v(x,y,z,w) cre(z) cre(w) des(y) 
 (  -0.25000) t1(x,y,B,z) v(x,y,w,u) cre(w) cre(u) des(z) 
 (   0.50000) t1(x,y,B,z) v(i,z,i,w) cre(x) cre(y) des(w) 
 (   1.00000) t1(x,y,B,z) v(i,w,i,x) cre(y) cre(w) des(z) 
 (  -0.50000) t1(x,y,B,z) v(x,w,u,v) cre(y) cre(u) cre(v) des(z) des(w) 
 (  -0.25000) t1(x,y,B,z) v(w,u,z,v) cre(x) cre(y) cre(v) des(w) des(u) 

Total terms : 15
SQA automation time :  0.035 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
M[s_casci:f_casci, s_e:f_e] =  np.einsum('xB, Ix->IB', h_ae_so, trdm_c_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] += np.einsum('ixiB, Ix->IB', v_cace_so, trdm_c_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] += np.einsum('B, xB, Ix->IB', e_extern_so, t1_ae, trdm_c_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= np.einsum('xy, xB, Iy->IB', h_aa_so, t1_ae, trdm_c_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= np.einsum('xB, iyix, Iy->IB', t1_ae, v_caca_so, trdm_c_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= 0.5 * np.einsum('yzxB, Iyzx->IB', v_aaae_so, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] += 0.5 * np.einsum('B, xyBz, Ixyz->IB', e_extern_so, t1_aaea, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= np.einsum('xy, xzBw, Iyzw->IB', h_aa_so, t1_aaea, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] += 0.5 * np.einsum('xy, zwBx, Izwy->IB', h_aa_so, t1_aaea, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= 0.5 * np.einsum('xB, xyzw, Izwy->IB', t1_ae, v_aaaa_so, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= 0.25 * np.einsum('xyBz, xywu, Iwuz->IB', t1_aaea, v_aaaa_so, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] += 0.5 * np.einsum('xyBz, iziw, Ixyw->IB', t1_aaea, v_caca_so, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] += np.einsum('xyBz, iwix, Iywz->IB', t1_aaea, v_caca_so, trdm_cca_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= 0.5 * np.einsum('xyBz, xwuv, Iyuvzw->IB', t1_aaea, v_aaaa_so, trdm_cccaa_so, optimize = True)
M[s_casci:f_casci, s_e:f_e] -= 0.25 * np.einsum('xyBz, wuzv, Ixyvwu->IB', t1_aaea, v_aaaa_so, trdm_cccaa_so, optimize = True)
