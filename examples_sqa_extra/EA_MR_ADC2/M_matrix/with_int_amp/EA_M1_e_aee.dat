
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) v(x,A,C,D) cre(x) des(W) 
 (   1.00000) h(x,C) kdelta(A,D) cre(x) des(W) 
 (  -1.00000) h(x,D) kdelta(A,C) cre(x) des(W) 
 (  -1.00000) kdelta(A,C) v(i,x,i,D) cre(x) des(W) 
 (   1.00000) kdelta(A,D) v(i,x,i,C) cre(x) des(W) 
 (   1.00000) e(C) kdelta(A,D) t1(x,C) cre(x) des(W) 
 (  -1.00000) e(D) kdelta(A,C) t1(x,D) cre(x) des(W) 
 (   1.00000) h(x,y) kdelta(A,C) t1(x,D) cre(y) des(W) 
 (  -1.00000) h(x,y) kdelta(A,D) t1(x,C) cre(y) des(W) 
 (   1.00000) kdelta(A,C) t1(x,D) v(i,y,i,x) cre(y) des(W) 
 (  -1.00000) kdelta(A,D) t1(x,C) v(i,y,i,x) cre(y) des(W) 
 (  -0.50000) kdelta(A,C) v(y,z,x,D) cre(y) cre(z) des(W) des(x) 
 (   0.50000) kdelta(A,D) v(y,z,x,C) cre(y) cre(z) des(W) des(x) 
 (  -0.50000) e(C) kdelta(A,D) t1(x,y,C,z) cre(x) cre(y) des(W) des(z) 
 (   0.50000) e(D) kdelta(A,C) t1(x,y,D,z) cre(x) cre(y) des(W) des(z) 
 (  -1.00000) h(x,y) kdelta(A,C) t1(x,z,D,w) cre(y) cre(z) des(W) des(w) 
 (   0.50000) h(x,y) kdelta(A,C) t1(z,w,D,x) cre(z) cre(w) des(W) des(y) 
 (   1.00000) h(x,y) kdelta(A,D) t1(x,z,C,w) cre(y) cre(z) des(W) des(w) 
 (  -0.50000) h(x,y) kdelta(A,D) t1(z,w,C,x) cre(z) cre(w) des(W) des(y) 
 (  -0.50000) kdelta(A,C) t1(x,D) v(x,y,z,w) cre(z) cre(w) des(W) des(y) 
 (  -0.25000) kdelta(A,C) t1(x,y,D,z) v(x,y,w,u) cre(w) cre(u) des(W) des(z) 
 (   0.50000) kdelta(A,C) t1(x,y,D,z) v(i,z,i,w) cre(x) cre(y) des(W) des(w) 
 (   1.00000) kdelta(A,C) t1(x,y,D,z) v(i,w,i,x) cre(y) cre(w) des(W) des(z) 
 (   0.50000) kdelta(A,D) t1(x,C) v(x,y,z,w) cre(z) cre(w) des(W) des(y) 
 (   0.25000) kdelta(A,D) t1(x,y,C,z) v(x,y,w,u) cre(w) cre(u) des(W) des(z) 
 (  -0.50000) kdelta(A,D) t1(x,y,C,z) v(i,z,i,w) cre(x) cre(y) des(W) des(w) 
 (  -1.00000) kdelta(A,D) t1(x,y,C,z) v(i,w,i,x) cre(y) cre(w) des(W) des(z) 
 (   0.50000) kdelta(A,C) t1(x,y,D,z) v(x,w,u,v) cre(y) cre(u) cre(v) des(W) des(z) des(w) 
 (   0.25000) kdelta(A,C) t1(x,y,D,z) v(w,u,z,v) cre(x) cre(y) cre(v) des(W) des(w) des(u) 
 (  -0.50000) kdelta(A,D) t1(x,y,C,z) v(x,w,u,v) cre(y) cre(u) cre(v) des(W) des(z) des(w) 
 (  -0.25000) kdelta(A,D) t1(x,y,C,z) v(w,u,z,v) cre(x) cre(y) cre(v) des(W) des(w) des(u) 

Total terms : 31
SQA automation time :  0.338 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('xACD, xW->AWCD', v_aeee_so, rdm_ca_so, optimize = True)
temp += np.einsum('xC, AD, xW->AWCD', h_ae_so, np.identity(nextern), rdm_ca_so, optimize = True)
temp -= np.einsum('xD, AC, xW->AWCD', h_ae_so, np.identity(nextern), rdm_ca_so, optimize = True)
temp -= np.einsum('AC, ixiD, xW->AWCD', np.identity(nextern), v_cace_so, rdm_ca_so, optimize = True)
temp += np.einsum('AD, ixiC, xW->AWCD', np.identity(nextern), v_cace_so, rdm_ca_so, optimize = True)
temp += np.einsum('C, AD, xC, xW->AWCD', e_extern_so, np.identity(nextern), t1_ae, rdm_ca_so, optimize = True)
temp -= np.einsum('D, AC, xD, xW->AWCD', e_extern_so, np.identity(nextern), t1_ae, rdm_ca_so, optimize = True)
temp += np.einsum('xy, AC, xD, yW->AWCD', h_aa_so, np.identity(nextern), t1_ae, rdm_ca_so, optimize = True)
temp -= np.einsum('xy, AD, xC, yW->AWCD', h_aa_so, np.identity(nextern), t1_ae, rdm_ca_so, optimize = True)
temp += np.einsum('AC, xD, iyix, yW->AWCD', np.identity(nextern), t1_ae, v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('AD, xC, iyix, yW->AWCD', np.identity(nextern), t1_ae, v_caca_so, rdm_ca_so, optimize = True)
temp -= 0.5 * np.einsum('AC, yzxD, yzWx->AWCD', np.identity(nextern), v_aaae_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('AD, yzxC, yzWx->AWCD', np.identity(nextern), v_aaae_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('C, AD, xyCz, xyWz->AWCD', e_extern_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('D, AC, xyDz, xyWz->AWCD', e_extern_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
temp -= np.einsum('xy, AC, xzDw, yzWw->AWCD', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('xy, AC, zwDx, zwWy->AWCD', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
temp += np.einsum('xy, AD, xzCw, yzWw->AWCD', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('xy, AD, zwCx, zwWy->AWCD', h_aa_so, np.identity(nextern), t1_aaea, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('AC, xD, xyzw, zwWy->AWCD', np.identity(nextern), t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.25 * np.einsum('AC, xyDz, xywu, wuWz->AWCD', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('AC, xyDz, iziw, xyWw->AWCD', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('AC, xyDz, iwix, ywWz->AWCD', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('AD, xC, xyzw, zwWy->AWCD', np.identity(nextern), t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += 0.25 * np.einsum('AD, xyCz, xywu, wuWz->AWCD', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('AD, xyCz, iziw, xyWw->AWCD', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('AD, xyCz, iwix, ywWz->AWCD', np.identity(nextern), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('AC, xyDz, xwuv, yuvWzw->AWCD', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp += 0.25 * np.einsum('AC, xyDz, wuzv, xyvWwu->AWCD', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('AD, xyCz, xwuv, yuvWzw->AWCD', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.25 * np.einsum('AD, xyCz, wuzv, xyvWwu->AWCD', np.identity(nextern), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
