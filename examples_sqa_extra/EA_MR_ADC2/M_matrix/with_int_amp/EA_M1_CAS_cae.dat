
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------
First Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) h(J,C) cre(W) 
 (   1.00000) v(J,x,W,C) cre(x) 
 (   1.00000) v(J,i,i,C) cre(W) 
 (  -1.00000) e(C) t1(J,C) cre(W) 
 (  -1.00000) e(C) t1(J,x,C,W) cre(x) 
 (   1.00000) e(J) t1(J,C) cre(W) 
 (   1.00000) e(J) t1(J,x,C,W) cre(x) 
 (  -1.00000) h(W,x) t1(J,y,C,x) cre(y) 
 (   1.00000) h(x,y) t1(J,x,C,W) cre(y) 
 (   1.00000) t1(J,x,C,W) v(i,y,i,x) cre(y) 
 (  -1.00000) t1(J,x,C,y) v(i,y,i,W) cre(x) 
 (   1.00000) v(J,y,x,C) cre(W) cre(y) des(x) 
 (  -1.00000) e(C) t1(J,x,C,y) cre(W) cre(x) des(y) 
 (   1.00000) e(J) t1(J,x,C,y) cre(W) cre(x) des(y) 
 (   1.00000) h(x,y) t1(J,x,C,z) cre(W) cre(y) des(z) 
 (  -1.00000) h(x,y) t1(J,z,C,x) cre(W) cre(z) des(y) 
 (   0.50000) t1(J,x,C,W) v(x,y,z,w) cre(z) cre(w) des(y) 
 (   0.50000) t1(J,x,C,y) v(W,x,z,w) cre(z) cre(w) des(y) 
 (  -1.00000) t1(J,x,C,y) v(W,z,y,w) cre(x) cre(w) des(z) 
 (  -1.00000) t1(J,x,C,y) v(i,y,i,z) cre(W) cre(x) des(z) 
 (   1.00000) t1(J,x,C,y) v(i,z,i,x) cre(W) cre(z) des(y) 
 (  -0.50000) t1(J,x,C,y) v(x,z,w,u) cre(W) cre(w) cre(u) des(y) des(z) 
 (   0.50000) t1(J,x,C,y) v(z,w,y,u) cre(W) cre(x) cre(u) des(z) des(w) 

Total terms : 23
SQA automation time :  0.157 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =- np.einsum('JC, IW->IJWC', h_ce_so, trdm_c_so, optimize = True)
temp += np.einsum('JxWC, Ix->IJWC', v_caae_so, trdm_c_so, optimize = True)
temp += np.einsum('JiiC, IW->IJWC', v_ccce_so, trdm_c_so, optimize = True)
temp -= np.einsum('C, JC, IW->IJWC', e_extern_so, t1_ce, trdm_c_so, optimize = True)
temp -= np.einsum('C, JxCW, Ix->IJWC', e_extern_so, t1_caea, trdm_c_so, optimize = True)
temp += np.einsum('J, JC, IW->IJWC', e_core_so, t1_ce, trdm_c_so, optimize = True)
temp += np.einsum('J, JxCW, Ix->IJWC', e_core_so, t1_caea, trdm_c_so, optimize = True)
temp -= np.einsum('Wx, JyCx, Iy->IJWC', h_aa_so, t1_caea, trdm_c_so, optimize = True)
temp += np.einsum('xy, JxCW, Iy->IJWC', h_aa_so, t1_caea, trdm_c_so, optimize = True)
temp += np.einsum('JxCW, iyix, Iy->IJWC', t1_caea, v_caca_so, trdm_c_so, optimize = True)
temp -= np.einsum('JxCy, iyiW, Ix->IJWC', t1_caea, v_caca_so, trdm_c_so, optimize = True)
temp += np.einsum('JyxC, IWyx->IJWC', v_caae_so, trdm_cca_so, optimize = True)
temp -= np.einsum('C, JxCy, IWxy->IJWC', e_extern_so, t1_caea, trdm_cca_so, optimize = True)
temp += np.einsum('J, JxCy, IWxy->IJWC', e_core_so, t1_caea, trdm_cca_so, optimize = True)
temp += np.einsum('xy, JxCz, IWyz->IJWC', h_aa_so, t1_caea, trdm_cca_so, optimize = True)
temp -= np.einsum('xy, JzCx, IWzy->IJWC', h_aa_so, t1_caea, trdm_cca_so, optimize = True)
temp += 0.5 * np.einsum('JxCW, xyzw, Izwy->IJWC', t1_caea, v_aaaa_so, trdm_cca_so, optimize = True)
temp += 0.5 * np.einsum('JxCy, Wxzw, Izwy->IJWC', t1_caea, v_aaaa_so, trdm_cca_so, optimize = True)
temp -= np.einsum('JxCy, Wzyw, Ixwz->IJWC', t1_caea, v_aaaa_so, trdm_cca_so, optimize = True)
temp -= np.einsum('JxCy, iyiz, IWxz->IJWC', t1_caea, v_caca_so, trdm_cca_so, optimize = True)
temp += np.einsum('JxCy, izix, IWzy->IJWC', t1_caea, v_caca_so, trdm_cca_so, optimize = True)
temp -= 0.5 * np.einsum('JxCy, xzwu, IWwuyz->IJWC', t1_caea, v_aaaa_so, trdm_cccaa_so, optimize = True)
temp += 0.5 * np.einsum('JxCy, zwyu, IWxuzw->IJWC', t1_caea, v_aaaa_so, trdm_cccaa_so, optimize = True)
