
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(0) ----------------------
Done ...
--------------------------------------------------------------
First Commutator
Second Commutator

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) kdelta(I,J) v(W,Z,X,Y) 
 (   1.00000) h(W,X) kdelta(I,J) kdelta(Y,Z) 
 (  -1.00000) h(W,Y) kdelta(I,J) kdelta(X,Z) 
 (  -1.00000) h(X,Z) kdelta(I,J) kdelta(W,Y) 
 (   1.00000) h(Y,Z) kdelta(I,J) kdelta(W,X) 
 (   1.00000) v(i,X,i,W) kdelta(I,J) kdelta(Y,Z) 
 (  -1.00000) v(i,X,i,Z) kdelta(I,J) kdelta(W,Y) 
 (  -1.00000) v(i,Y,i,W) kdelta(I,J) kdelta(X,Z) 
 (   1.00000) v(i,Y,i,Z) kdelta(I,J) kdelta(W,X) 
 (  -1.00000) e(J) kdelta(I,J) kdelta(W,X) kdelta(Y,Z) 
 (   1.00000) e(J) kdelta(I,J) kdelta(W,Y) kdelta(X,Z) 
 (  -1.00000) h(W,X) kdelta(I,J) cre(Z) des(Y) 
 (   1.00000) h(W,Y) kdelta(I,J) cre(Z) des(X) 
 (   1.00000) h(X,Z) kdelta(I,J) cre(W) des(Y) 
 (  -1.00000) h(Y,Z) kdelta(I,J) cre(W) des(X) 
 (  -1.00000) kdelta(I,J) v(W,Z,X,x) cre(x) des(Y) 
 (   1.00000) kdelta(I,J) v(W,Z,Y,x) cre(x) des(X) 
 (  -1.00000) kdelta(I,J) v(W,x,X,Y) cre(Z) des(x) 
 (  -1.00000) kdelta(I,J) v(i,X,i,W) cre(Z) des(Y) 
 (   1.00000) kdelta(I,J) v(i,X,i,Z) cre(W) des(Y) 
 (   1.00000) kdelta(I,J) v(i,Y,i,W) cre(Z) des(X) 
 (  -1.00000) kdelta(I,J) v(i,Y,i,Z) cre(W) des(X) 
 (   1.00000) kdelta(I,J) v(Z,x,X,Y) cre(W) des(x) 
 (   1.00000) e(J) kdelta(I,J) kdelta(W,X) cre(Z) des(Y) 
 (  -1.00000) e(J) kdelta(I,J) kdelta(W,Y) cre(Z) des(X) 
 (  -1.00000) e(J) kdelta(I,J) kdelta(X,Z) cre(W) des(Y) 
 (   1.00000) e(J) kdelta(I,J) kdelta(Y,Z) cre(W) des(X) 
 (   1.00000) h(W,x) kdelta(I,J) kdelta(X,Z) cre(x) des(Y) 
 (  -1.00000) h(W,x) kdelta(I,J) kdelta(Y,Z) cre(x) des(X) 
 (  -1.00000) h(Z,x) kdelta(I,J) kdelta(W,X) cre(x) des(Y) 
 (   1.00000) h(Z,x) kdelta(I,J) kdelta(W,Y) cre(x) des(X) 
 (   1.00000) v(W,x,X,y) kdelta(I,J) kdelta(Y,Z) cre(y) des(x) 
 (  -1.00000) v(W,x,Y,y) kdelta(I,J) kdelta(X,Z) cre(y) des(x) 
 (  -1.00000) v(Z,x,X,y) kdelta(I,J) kdelta(W,Y) cre(y) des(x) 
 (   1.00000) v(Z,x,Y,y) kdelta(I,J) kdelta(W,X) cre(y) des(x) 
 (   1.00000) v(i,x,i,W) kdelta(I,J) kdelta(X,Z) cre(x) des(Y) 
 (  -1.00000) v(i,x,i,W) kdelta(I,J) kdelta(Y,Z) cre(x) des(X) 
 (  -1.00000) v(i,x,i,Z) kdelta(I,J) kdelta(W,X) cre(x) des(Y) 
 (   1.00000) v(i,x,i,Z) kdelta(I,J) kdelta(W,Y) cre(x) des(X) 
 (   1.00000) e(J) kdelta(I,J) cre(W) cre(Z) des(X) des(Y) 
 (   1.00000) h(W,x) kdelta(I,J) cre(Z) cre(x) des(X) des(Y) 
 (  -1.00000) h(Z,x) kdelta(I,J) cre(W) cre(x) des(X) des(Y) 
 (  -0.50000) kdelta(I,J) v(W,Z,x,y) cre(x) cre(y) des(X) des(Y) 
 (   1.00000) kdelta(I,J) v(W,x,X,y) cre(Z) cre(y) des(Y) des(x) 
 (  -1.00000) kdelta(I,J) v(W,x,Y,y) cre(Z) cre(y) des(X) des(x) 
 (  -1.00000) kdelta(I,J) v(Z,x,X,y) cre(W) cre(y) des(Y) des(x) 
 (   1.00000) kdelta(I,J) v(Z,x,Y,y) cre(W) cre(y) des(X) des(x) 
 (   1.00000) kdelta(I,J) v(i,x,i,W) cre(Z) cre(x) des(X) des(Y) 
 (  -1.00000) kdelta(I,J) v(i,x,i,Z) cre(W) cre(x) des(X) des(Y) 
 (  -0.50000) v(W,x,y,z) kdelta(I,J) kdelta(X,Z) cre(y) cre(z) des(Y) des(x) 
 (   0.50000) v(W,x,y,z) kdelta(I,J) kdelta(Y,Z) cre(y) cre(z) des(X) des(x) 
 (   0.50000) v(Z,x,y,z) kdelta(I,J) kdelta(W,X) cre(y) cre(z) des(Y) des(x) 
 (  -0.50000) v(Z,x,y,z) kdelta(I,J) kdelta(W,Y) cre(y) cre(z) des(X) des(x) 
 (   0.50000) kdelta(I,J) v(W,x,y,z) cre(Z) cre(y) cre(z) des(X) des(Y) des(x) 
 (  -0.50000) kdelta(I,J) v(Z,x,y,z) cre(W) cre(y) cre(z) des(X) des(Y) des(x) 

Total terms : 55
SQA automation time :  0.654 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('IJ, WZXY->IXYJWZ', np.identity(ncore), v_aaaa_so, optimize = True)
temp += np.einsum('WX, IJ, YZ->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp -= np.einsum('WY, IJ, XZ->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp -= np.einsum('XZ, IJ, WY->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp += np.einsum('YZ, IJ, WX->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp += np.einsum('iXiW, IJ, YZ->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp -= np.einsum('iXiZ, IJ, WY->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp -= np.einsum('iYiW, IJ, XZ->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp += np.einsum('iYiZ, IJ, WX->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), optimize = True)
temp -= np.einsum('J, IJ, WX, YZ->IXYJWZ', e_core_so, np.identity(ncore), np.identity(ncas), np.identity(ncas), optimize = True)
temp += np.einsum('J, IJ, WY, XZ->IXYJWZ', e_core_so, np.identity(ncore), np.identity(ncas), np.identity(ncas), optimize = True)
temp -= np.einsum('WX, IJ, ZY->IXYJWZ', h_aa_so, np.identity(ncore), rdm_ca_so, optimize = True)
temp += np.einsum('WY, IJ, ZX->IXYJWZ', h_aa_so, np.identity(ncore), rdm_ca_so, optimize = True)
temp += np.einsum('XZ, IJ, WY->IXYJWZ', h_aa_so, np.identity(ncore), rdm_ca_so, optimize = True)
temp -= np.einsum('YZ, IJ, WX->IXYJWZ', h_aa_so, np.identity(ncore), rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, WZXx, xY->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, WZYx, xX->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, WxXY, Zx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, iXiW, ZY->IXYJWZ', np.identity(ncore), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, iXiZ, WY->IXYJWZ', np.identity(ncore), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, iYiW, ZX->IXYJWZ', np.identity(ncore), v_caca_so, rdm_ca_so, optimize = True)
temp -= np.einsum('IJ, iYiZ, WX->IXYJWZ', np.identity(ncore), v_caca_so, rdm_ca_so, optimize = True)
temp += np.einsum('IJ, ZxXY, Wx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ca_so, optimize = True)
temp += np.einsum('J, IJ, WX, ZY->IXYJWZ', e_core_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('J, IJ, WY, ZX->IXYJWZ', e_core_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('J, IJ, XZ, WY->IXYJWZ', e_core_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('J, IJ, YZ, WX->IXYJWZ', e_core_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('Wx, IJ, XZ, xY->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('Wx, IJ, YZ, xX->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('Zx, IJ, WX, xY->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('Zx, IJ, WY, xX->IXYJWZ', h_aa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('WxXy, IJ, YZ, yx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('WxYy, IJ, XZ, yx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('ZxXy, IJ, WY, yx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('ZxYy, IJ, WX, yx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('ixiW, IJ, XZ, xY->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('ixiW, IJ, YZ, xX->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp -= np.einsum('ixiZ, IJ, WX, xY->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('ixiZ, IJ, WY, xX->IXYJWZ', v_caca_so, np.identity(ncore), np.identity(ncas), rdm_ca_so, optimize = True)
temp += np.einsum('J, IJ, WZXY->IXYJWZ', e_core_so, np.identity(ncore), rdm_ccaa_so, optimize = True)
temp += np.einsum('Wx, IJ, ZxXY->IXYJWZ', h_aa_so, np.identity(ncore), rdm_ccaa_so, optimize = True)
temp -= np.einsum('Zx, IJ, WxXY->IXYJWZ', h_aa_so, np.identity(ncore), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, WZxy, xyXY->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, WxXy, ZyYx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, WxYy, ZyXx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, ZxXy, WyYx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, ZxYy, WyXx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_ccaa_so, optimize = True)
temp += np.einsum('IJ, ixiW, ZxXY->IXYJWZ', np.identity(ncore), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= np.einsum('IJ, ixiZ, WxXY->IXYJWZ', np.identity(ncore), v_caca_so, rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('Wxyz, IJ, XZ, yzYx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('Wxyz, IJ, YZ, yzXx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('Zxyz, IJ, WX, yzYx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ccaa_so, optimize = True)
temp -= 0.5 * np.einsum('Zxyz, IJ, WY, yzXx->IXYJWZ', v_aaaa_so, np.identity(ncore), np.identity(ncas), rdm_ccaa_so, optimize = True)
temp += 0.5 * np.einsum('IJ, Wxyz, ZyzXYx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_cccaaa_so, optimize = True)
temp -= 0.5 * np.einsum('IJ, Zxyz, WyzXYx->IXYJWZ', np.identity(ncore), v_aaaa_so, rdm_cccaaa_so, optimize = True)
