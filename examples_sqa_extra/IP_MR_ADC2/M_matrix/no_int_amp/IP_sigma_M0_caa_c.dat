
--------------------------------------------------------------
 Effective Hamiltonian: Construct effective Hamiltonian ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)
 --------------------------------------------------------------

 (   1.00000) E_fc 
 (  -1.00000) e(c0) des(c0) cre(c0) 
 (   1.00000) e(v0) cre(v0) des(v0) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a1,c1,a0,c1) cre(a0) des(a1) 
 (   0.25000) v(a2,a3,a0,a1) cre(a0) cre(a1) des(a3) des(a2) 
First Commutator

Combining like terms:
Converting 15 terms to canonical form...
     0   (   1.00000) E_fc X(i) cre(i) 
     1   (  -1.00000) E_fc X(i) cre(i) 
     2   (  -1.00000) e(c0) X(i) cre(c0) cre(i) des(c0) 
     3   (  -1.00000) e(c0) X(i) cre(i) 
     4   (   1.00000) e(i) X(i) cre(i) 
     5   (   1.00000) X(i) e(c0) cre(c0) cre(i) des(c0) 
     6   (   1.00000) X(i) e(c0) cre(i) 
     7   (   1.00000) e(v0) X(i) cre(i) cre(v0) des(v0) 
     8   (  -1.00000) X(i) cre(i) e(v0) cre(v0) des(v0) 
     9   (  -1.00000) h(a1,a0) X(i) cre(a0) cre(i) des(a1) 
    10   (  -1.00000) X(i) cre(i) h(a1,a0) cre(a0) des(a1) 
    11   (  -1.00000) v(a1,c1,a0,c1) X(i) cre(a0) cre(i) des(a1) 
    12   (  -1.00000) X(i) cre(i) v(a1,c1,a0,c1) cre(a0) des(a1) 
    13   (  -0.25000) v(a2,a3,a0,a1) X(i) cre(a0) cre(a1) cre(i) des(a2) des(a3) 
    14   (  -0.25000) X(i) cre(i) v(a2,a3,a0,a1) cre(a0) cre(a1) des(a3) des(a2) 
Finished combining terms in 0.007 seconds

 (   1.00000) X(a) e(a) cre(a) 
Second Commutator
 (   1.00000) X(a) e(a) cre(a) cre(Z) des(W) des(K) 
 (   1.00000) cre(Z) des(W) des(K) X(a) e(a) cre(a) 

################ Addon ################

--------------------------------------------------------------
    SQA_extra: Code geneator for quasi-particle systems.
    author:  Koushik Chatterjee
    date:  August 31, 2018

    Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

    This program is distributed in the hope that it will
    be useful, but WITHOUT ANY WARRANTY; without even the
    implied warranty of MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE. See the GNU General Public License
    for more details.
--------------------------------------------------------------


Expectation value: Filter zero terms wrt virtual:=>
 (   1.00000) X(a) e(a) cre(a) cre(Z) des(W) des(K) 
 (  -1.00000) X(a) e(a) cre(Z) cre(a) des(K) des(W) 
 (  -1.00000) X(a) e(a) kdelta(W,a) cre(Z) des(K) 
 (   1.00000) X(a) e(a) kdelta(K,a) cre(Z) des(W) 

Normal ordering with respect to core:=>
Term=  (   1.00000) X(a) e(a) cre(a) cre(Z) des(W) des(K) 
Terms after normal ordering:
 (  -1.00000) X(a) e(a) des(K) cre(Z) des(W) cre(a) 
 (   1.00000) X(a) e(a) kdelta(a,W) des(K) cre(Z) 
 (   1.00000) X(a) e(a) kdelta(a,K) cre(Z) des(W) 
 (   1.00000) X(a) e(a) kdelta(Z,K) des(W) cre(a) 
 (  -1.00000) X(a) e(a) kdelta(a,W) kdelta(Z,K) 

Normal ordering with respect to core:=>
Term=  (  -1.00000) X(a) e(a) cre(Z) cre(a) des(K) des(W) 
Terms after normal ordering:
 (   1.00000) X(a) e(a) des(K) cre(Z) des(W) cre(a) 
 (  -1.00000) X(a) e(a) kdelta(Z,K) des(W) cre(a) 
 (  -1.00000) X(a) e(a) kdelta(a,K) cre(Z) des(W) 
 (  -1.00000) X(a) e(a) kdelta(a,W) des(K) cre(Z) 
 (   1.00000) X(a) e(a) kdelta(Z,K) kdelta(a,W) 

Normal ordering with respect to core:=>
Term=  (  -1.00000) X(a) e(a) kdelta(W,a) cre(Z) des(K) 
Terms after normal ordering:
 (   1.00000) X(a) e(a) kdelta(W,a) des(K) cre(Z) 
 (  -1.00000) X(a) e(a) kdelta(W,a) kdelta(Z,K) 

Normal ordering with respect to core:=>
Term=  (   1.00000) X(a) e(a) kdelta(K,a) cre(Z) des(W) 
Terms after normal ordering:
 (   1.00000) X(a) e(a) kdelta(K,a) cre(Z) des(W) 

Expectation value: Filter zero terms wrt core:=>
 (   0.00000) X(a) e(a) des(K) cre(Z) des(W) cre(a) 
 (   0.00000) X(a) e(a) kdelta(a,W) des(K) cre(Z) 
 (   1.00000) X(K) e(K) cre(Z) des(W) 
 (   0.00000) X(a) e(a) kdelta(Z,K) des(W) cre(a) 
 (   0.00000) X(a) e(a) kdelta(a,W) kdelta(Z,K) 
 (   0.00000) X(a) e(a) des(K) cre(Z) des(W) cre(a) 
 (   0.00000) X(a) e(a) kdelta(Z,K) des(W) cre(a) 
 (  -1.00000) X(K) e(K) cre(Z) des(W) 
 (   0.00000) X(a) e(a) kdelta(a,W) des(K) cre(Z) 
 (   0.00000) X(a) e(a) kdelta(Z,K) kdelta(a,W) 
 (   0.00000) X(a) e(a) kdelta(W,a) des(K) cre(Z) 
 (   0.00000) X(a) e(a) kdelta(W,a) kdelta(Z,K) 
 (   1.00000) X(K) e(K) cre(Z) des(W) 

Combining like terms:
Converting 3 terms to canonical form...
     0   (   1.00000) X(K) e(K) cre(Z) des(W) 
     1   (  -1.00000) X(K) e(K) cre(Z) des(W) 
     2   (   1.00000) X(K) e(K) cre(Z) des(W) 
Finished combining terms in 0.000 seconds

Dummy indices label update:=>
 (   1.00000) X(K) e(K) cre(Z) des(W) 

####### Final results:#######
 (   1.00000) X(K) e(K) cre(Z) des(W) 


--------------------------------------------------------------
 VERSION : 1
 Einsum generator: Transform into einsum ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)


 For Help :: help = True
 --------------------------------------------------------------
temp =  np.einsum('K, K, ZW->KWZ', X, e_core_so, rdm_ca_so, optimize = True)
