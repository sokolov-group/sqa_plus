
Combining like terms:
Converting 14 terms to canonical form...
     0   (  -1.00000) cre(C) cre(D) cre(X) cre(Y) des(A) des(B) des(W) des(Z) 
     1   (   1.00000) kdelta(B,C) cre(D) cre(X) cre(Y) des(A) des(W) des(Z) 
     2   (  -1.00000) kdelta(B,D) cre(C) cre(X) cre(Y) des(A) des(W) des(Z) 
     3   (  -1.00000) kdelta(A,C) cre(D) cre(X) cre(Y) des(B) des(W) des(Z) 
     4   (   1.00000) kdelta(A,D) cre(C) cre(X) cre(Y) des(B) des(W) des(Z) 
     5   (  -1.00000) kdelta(B,C) kdelta(A,D) cre(X) cre(Y) des(W) des(Z) 
     6   (   1.00000) kdelta(B,D) kdelta(A,C) cre(X) cre(Y) des(W) des(Z) 
     7   (   1.00000) cre(C) cre(D) cre(X) cre(Y) des(A) des(B) des(W) des(Z) 
     8   (   1.00000) kdelta(W,X) cre(C) cre(D) cre(Y) des(A) des(B) des(Z) 
     9   (  -1.00000) kdelta(W,Y) cre(C) cre(D) cre(X) des(A) des(B) des(Z) 
    10   (  -1.00000) kdelta(Z,X) cre(C) cre(D) cre(Y) des(A) des(B) des(W) 
    11   (   1.00000) kdelta(Z,Y) cre(C) cre(D) cre(X) des(A) des(B) des(W) 
    12   (  -1.00000) kdelta(W,X) kdelta(Z,Y) cre(C) cre(D) des(A) des(B) 
    13   (   1.00000) kdelta(W,Y) kdelta(Z,X) cre(C) cre(D) des(A) des(B) 
Finished combining terms in 0.016 seconds


------------------------- SQA Addon --------------------------

--------------------------------------------------------------
    SQA_extra: Code geneator for quasi-particle systems.
    author:  Koushik Chatterjee
    date:  August 31, 2018

    Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

    This program is distributed in the hope that it will
    be useful, but WITHOUT ANY WARRANTY; without even the
    implied warranty of MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE. See the GNU General Public License
    for more details.
--------------------------------------------------------------


Expectation value: Filter zero terms wrt virtual:=>
 (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 
 (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 
 (   0.00000) kdelta(W,X) kdelta(Y,Z) cre(C) cre(D) des(A) des(B) 
 (   0.00000) kdelta(W,Y) kdelta(X,Z) cre(C) cre(D) des(A) des(B) 
 (   0.00000) kdelta(A,C) cre(D) cre(X) cre(Y) des(B) des(W) des(Z) 
 (   0.00000) kdelta(A,D) cre(C) cre(X) cre(Y) des(B) des(W) des(Z) 
 (   0.00000) kdelta(B,C) cre(D) cre(X) cre(Y) des(A) des(W) des(Z) 
 (   0.00000) kdelta(B,D) cre(C) cre(X) cre(Y) des(A) des(W) des(Z) 
 (   0.00000) kdelta(W,X) cre(C) cre(D) cre(Y) des(A) des(B) des(Z) 
 (   0.00000) kdelta(W,Y) cre(C) cre(D) cre(X) des(A) des(B) des(Z) 
 (   0.00000) kdelta(X,Z) cre(C) cre(D) cre(Y) des(A) des(B) des(W) 
 (   0.00000) kdelta(Y,Z) cre(C) cre(D) cre(X) des(A) des(B) des(W) 

Normal ordering with respect to core:=>
Term=  (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 
Terms after normal ordering:
 (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 

Normal ordering with respect to core:=>
Term=  (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 
Terms after normal ordering:
 (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 

Expectation value: Filter zero terms wrt core:=>
 (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 
 (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 

Combining like terms:
Converting 2 terms to canonical form...
     0   (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 
     1   (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 
Finished combining terms in 0.003 seconds

Dummy indices label update:=>
 (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 
 (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 

Reorder tensor indices according to (Core < Active < Virtual): =>

----------------------- Final results ------------------------
 (   1.00000) kdelta(A,C) kdelta(B,D) cre(X) cre(Y) des(W) des(Z) 
 (  -1.00000) kdelta(A,D) kdelta(B,C) cre(X) cre(Y) des(W) des(Z) 


----------------------- SQA EINSUM ---------------------------
 VERSION : 1
 Einsum generator: Transform into einsum ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)


 For Help :: help = True
--------------------------------------------------------------
temp =  np.einsum('AC, BD, XYWZ->XYABZWCD', np.identity(nextern), np.identity(nextern), rdm_ccaa_so, optimize = True)
temp -= np.einsum('AD, BC, XYWZ->XYABZWCD', np.identity(nextern), np.identity(nextern), rdm_ccaa_so, optimize = True)
