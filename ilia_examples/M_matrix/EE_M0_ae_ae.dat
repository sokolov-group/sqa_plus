
--------------------------------------------------------------
 Effective Hamiltonian: Construct effective Hamiltonian ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)
 --------------------------------------------------------------

 (   1.00000) E_fc 
 (  -1.00000) e(c0) des(c0) cre(c0) 
 (   1.00000) e(v0) cre(v0) des(v0) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a1,c1,a0,c1) cre(a0) des(a1) 
 (   0.25000) v(a2,a3,a0,a1) cre(a0) cre(a1) des(a3) des(a2) 
First Commutator

Combining like terms:
Converting 19 terms to canonical form...
     0   (   1.00000) E_fc cre(Y) des(J) 
     1   (  -1.00000) E_fc cre(Y) des(J) 
     2   (  -1.00000) e(c0) cre(Y) cre(c0) des(J) des(c0) 
     3   (  -1.00000) e(c0) cre(Y) des(J) 
     4   (   1.00000) e(c0) cre(Y) cre(c0) des(J) des(c0) 
     5   (   1.00000) e(c0) cre(Y) des(J) 
     6   (  -1.00000) e(v0) cre(Y) cre(v0) des(J) des(v0) 
     7   (   1.00000) e(Y) cre(Y) des(J) 
     8   (   1.00000) e(v0) cre(Y) cre(v0) des(J) des(v0) 
     9   (  -1.00000) h(a1,a0) cre(Y) cre(a0) des(J) des(a1) 
    10   (   1.00000) h(a1,a0) cre(Y) cre(a0) des(J) des(a1) 
    11   (  -1.00000) h(a1,J) cre(Y) des(a1) 
    12   (  -1.00000) v(a1,c1,a0,c1) cre(Y) cre(a0) des(J) des(a1) 
    13   (   1.00000) v(a1,c1,a0,c1) cre(Y) cre(a0) des(J) des(a1) 
    14   (  -1.00000) v(a1,c1,J,c1) cre(Y) des(a1) 
    15   (  -0.25000) v(a2,a3,a0,a1) cre(Y) cre(a0) cre(a1) des(J) des(a2) des(a3) 
    16   (   0.25000) v(a2,a3,a0,a1) cre(Y) cre(a0) cre(a1) des(J) des(a2) des(a3) 
    17   (   0.25000) v(a2,a3,J,a1) cre(Y) cre(a1) des(a2) des(a3) 
    18   (  -0.25000) v(a2,a3,a0,J) cre(Y) cre(a0) des(a2) des(a3) 
Finished combining terms in 0.014 seconds

 (   1.00000) e(Y) cre(Y) des(J) 
 (  -1.00000) h(J,a) cre(Y) des(a) 
 (   1.00000) v(a,b,J,a) cre(Y) des(b) 
 (   0.50000) v(a,b,J,c) cre(Y) cre(c) des(a) des(b) 

Combining like terms:
Converting 17 terms to canonical form...
     0   (   1.00000) e(Y) cre(I) cre(Y) des(J) des(X) 
     1   (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
     2   (  -1.00000) e(Y) cre(I) cre(Y) des(J) des(X) 
     3   (  -1.00000) e(Y) kdelta(J,I) cre(Y) des(X) 
     4   (   1.00000) h(J,a) cre(I) cre(Y) des(X) des(a) 
     5   (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 
     6   (  -1.00000) h(J,a) cre(I) cre(Y) des(X) des(a) 
     7   (   1.00000) h(J,I) cre(Y) des(X) 
     8   (  -1.00000) v(a,b,J,a) cre(I) cre(Y) des(X) des(b) 
     9   (   1.00000) v(a,b,J,a) kdelta(X,Y) cre(I) des(b) 
    10   (   1.00000) v(a,b,J,a) cre(I) cre(Y) des(X) des(b) 
    11   (  -1.00000) v(a,I,J,a) cre(Y) des(X) 
    12   (   0.50000) v(a,b,J,c) cre(I) cre(Y) cre(c) des(X) des(a) des(b) 
    13   (   0.50000) v(a,b,J,c) kdelta(X,Y) cre(I) cre(c) des(a) des(b) 
    14   (  -0.50000) v(a,b,J,c) cre(I) cre(Y) cre(c) des(X) des(a) des(b) 
    15   (  -0.50000) v(I,b,J,c) cre(Y) cre(c) des(X) des(b) 
    16   (   0.50000) v(a,I,J,c) cre(Y) cre(c) des(X) des(a) 
Finished combining terms in 0.012 seconds

 (   1.00000) h(I,J) cre(Y) des(X) 
 (   1.00000) v(I,a,J,a) cre(Y) des(X) 
 (  -1.00000) e(Y) kdelta(I,J) cre(Y) des(X) 
 (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
 (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 
 (   1.00000) kdelta(X,Y) v(a,b,J,a) cre(I) des(b) 
 (  -1.00000) v(I,a,J,b) cre(Y) cre(b) des(X) des(a) 
 (   0.50000) kdelta(X,Y) v(a,b,J,c) cre(I) cre(c) des(a) des(b) 

------------------------- SQA Addon --------------------------

--------------------------------------------------------------
    SQA_extra: Code geneator for quasi-particle systems.
    author:  Koushik Chatterjee
    date:  August 31, 2018

    Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

    This program is distributed in the hope that it will
    be useful, but WITHOUT ANY WARRANTY; without even the
    implied warranty of MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE. See the GNU General Public License
    for more details.
--------------------------------------------------------------


Expectation value: Filter zero terms wrt virtual:=>
 (   0.00000) h(I,J) cre(Y) des(X) 
 (   0.00000) v(I,a,J,a) cre(Y) des(X) 
 (   0.00000) e(Y) kdelta(I,J) cre(Y) des(X) 
 (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
 (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 
 (   1.00000) kdelta(X,Y) v(a,b,J,a) cre(I) des(b) 
 (   0.00000) v(I,a,J,b) cre(Y) cre(b) des(X) des(a) 
 (   0.50000) kdelta(X,Y) v(a,b,J,c) cre(I) cre(c) des(a) des(b) 

Normal ordering with respect to core:=>
Term=  (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
Terms after normal ordering:
 (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 

Normal ordering with respect to core:=>
Term=  (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 
Terms after normal ordering:
 (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 

Normal ordering with respect to core:=>
Term=  (   1.00000) kdelta(X,Y) v(a,b,J,a) cre(I) des(b) 
Terms after normal ordering:
 (   1.00000) kdelta(X,Y) v(a,b,J,a) cre(I) des(b) 

Normal ordering with respect to core:=>
Term=  (   0.50000) kdelta(X,Y) v(a,b,J,c) cre(I) cre(c) des(a) des(b) 
Terms after normal ordering:
 (   0.50000) kdelta(X,Y) v(a,b,J,c) cre(I) cre(c) des(a) des(b) 

Expectation value: Filter zero terms wrt core:=>
 (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
 (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 
 (   1.00000) kdelta(X,Y) v(a,b,J,a) cre(I) des(b) 
 (   0.50000) kdelta(X,Y) v(a,b,J,c) cre(I) cre(c) des(a) des(b) 

Combining like terms:
Converting 4 terms to canonical form...
     0   (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
     1   (  -1.00000) h(J,a) kdelta(X,Y) cre(I) des(a) 
     2   (   1.00000) kdelta(X,Y) v(a,b,J,a) cre(I) des(b) 
     3   (   0.50000) kdelta(X,Y) v(a,b,J,c) cre(I) cre(c) des(a) des(b) 
Finished combining terms in 0.004 seconds

Dummy indices label update:=>
 (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
 (  -1.00000) h(J,x) kdelta(X,Y) cre(I) des(x) 
 (   1.00000) kdelta(X,Y) v(i,x,J,i) cre(I) des(x) 
 (   0.50000) kdelta(X,Y) v(x,y,J,z) cre(I) cre(z) des(x) des(y) 

Reorder tensor indices according to (Core < Active < Virtual): =>
---------
 (   1.00000) kdelta(X,Y) v(i,x,J,i) cre(I) des(x) 
v(i,x,J,i)     --->    v(i,x,i,J) (factor = -1)

----------------------- Final results ------------------------
 (   1.00000) e(Y) kdelta(X,Y) cre(I) des(J) 
 (  -1.00000) h(J,x) kdelta(X,Y) cre(I) des(x) 
 (  -1.00000) kdelta(X,Y) v(i,x,i,J) cre(I) des(x) 
 (   0.50000) kdelta(X,Y) v(x,y,J,z) cre(I) cre(z) des(x) des(y) 


--------------------------------------------------------------
 VERSION : 1
 Einsum generator: Transform into einsum ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)


 For Help :: help = True
 --------------------------------------------------------------
M[s_ae:f_ae, s_ae:f_ae] =  np.einsum('Y, XY, IJ->XAYB', e_extern_so, np.identity(nextern), rdm_ca_so, optimize = True)
M[s_ae:f_ae, s_ae:f_ae] -= np.einsum('Jx, XY, Ix->XAYB', h_aa_so, np.identity(nextern), rdm_ca_so, optimize = True)
M[s_ae:f_ae, s_ae:f_ae] -= np.einsum('XY, ixiJ, Ix->XAYB', np.identity(nextern), v_caca_so, rdm_ca_so, optimize = True)
M[s_ae:f_ae, s_ae:f_ae] += 0.5 * np.einsum('XY, xyJz, Izxy->XAYB', np.identity(nextern), v_aaaa_so, rdm_ccaa_so, optimize = True)
