
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) kdelta(I,J) v(K,X,Y,A) 
 (  -1.00000) kdelta(I,K) v(J,X,Y,A) 
 (   1.00000) kdelta(X,Y) v(J,K,I,A) 
 (  -1.00000) e(A) kdelta(I,J) t1(K,X,A,Y) 
 (   1.00000) e(A) kdelta(I,K) t1(J,X,A,Y) 
 (  -1.00000) e(J) kdelta(I,K) t1(J,X,A,Y) 
 (   1.00000) e(K) kdelta(I,J) t1(K,X,A,Y) 
 (   1.00000) h(X,x) kdelta(I,J) t1(K,x,A,Y) 
 (  -1.00000) h(X,x) kdelta(I,K) t1(J,x,A,Y) 
 (  -1.00000) h(Y,x) kdelta(I,J) t1(K,X,A,x) 
 (   1.00000) h(Y,x) kdelta(I,K) t1(J,X,A,x) 
 (  -1.00000) kdelta(I,J) t1(K,X,A,x) v(i,Y,i,x) 
 (   1.00000) kdelta(I,J) t1(K,x,A,Y) v(i,x,i,X) 
 (   1.00000) kdelta(I,K) t1(J,X,A,x) v(i,Y,i,x) 
 (  -1.00000) kdelta(I,K) t1(J,x,A,Y) v(i,x,i,X) 
 (  -1.00000) v(J,K,I,A) cre(X) des(Y) 
 (  -1.00000) kdelta(I,J) v(K,X,x,A) cre(x) des(Y) 
 (   1.00000) kdelta(I,K) v(J,X,x,A) cre(x) des(Y) 
 (   1.00000) e(A) kdelta(I,J) t1(K,X,A,x) cre(x) des(Y) 
 (  -1.00000) e(A) kdelta(I,K) t1(J,X,A,x) cre(x) des(Y) 
 (   1.00000) e(J) kdelta(I,K) t1(J,X,A,x) cre(x) des(Y) 
 (  -1.00000) e(K) kdelta(I,J) t1(K,X,A,x) cre(x) des(Y) 
 (  -1.00000) h(X,x) kdelta(I,J) t1(K,x,A,y) cre(y) des(Y) 
 (   1.00000) h(X,x) kdelta(I,K) t1(J,x,A,y) cre(y) des(Y) 
 (   1.00000) h(x,y) kdelta(I,J) t1(K,X,A,x) cre(y) des(Y) 
 (  -1.00000) h(x,y) kdelta(I,K) t1(J,X,A,x) cre(y) des(Y) 
 (  -1.00000) kdelta(I,J) t1(K,X,A,x) v(x,y,Y,z) cre(z) des(y) 
 (   1.00000) kdelta(I,J) t1(K,X,A,x) v(i,y,i,x) cre(y) des(Y) 
 (   1.00000) kdelta(I,J) t1(K,x,A,Y) v(X,y,x,z) cre(z) des(y) 
 (  -1.00000) kdelta(I,J) t1(K,x,A,y) v(X,y,Y,z) cre(z) des(x) 
 (   1.00000) kdelta(I,J) t1(K,x,A,y) v(X,z,Y,x) cre(y) des(z) 
 (  -1.00000) kdelta(I,J) t1(K,x,A,y) v(i,x,i,X) cre(y) des(Y) 
 (   1.00000) kdelta(I,K) t1(J,X,A,x) v(x,y,Y,z) cre(z) des(y) 
 (  -1.00000) kdelta(I,K) t1(J,X,A,x) v(i,y,i,x) cre(y) des(Y) 
 (  -1.00000) kdelta(I,K) t1(J,x,A,Y) v(X,y,x,z) cre(z) des(y) 
 (   1.00000) kdelta(I,K) t1(J,x,A,y) v(X,y,Y,z) cre(z) des(x) 
 (  -1.00000) kdelta(I,K) t1(J,x,A,y) v(X,z,Y,x) cre(y) des(z) 
 (   1.00000) kdelta(I,K) t1(J,x,A,y) v(i,x,i,X) cre(y) des(Y) 
 (  -0.50000) kdelta(I,J) t1(K,X,A,x) v(x,y,z,w) cre(z) cre(w) des(Y) des(y) 
 (  -0.50000) kdelta(I,J) t1(K,x,A,y) v(X,y,z,w) cre(z) cre(w) des(Y) des(x) 
 (   1.00000) kdelta(I,J) t1(K,x,A,y) v(X,z,x,w) cre(y) cre(w) des(Y) des(z) 
 (   0.50000) kdelta(I,K) t1(J,X,A,x) v(x,y,z,w) cre(z) cre(w) des(Y) des(y) 
 (   0.50000) kdelta(I,K) t1(J,x,A,y) v(X,y,z,w) cre(z) cre(w) des(Y) des(x) 
 (  -1.00000) kdelta(I,K) t1(J,x,A,y) v(X,z,x,w) cre(y) cre(w) des(Y) des(z) 

Total terms : 44
SQA automation time :  0.970 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('IJ, KXYA->JKAYIX', np.identity(ncore), v_caae_so, optimize = True)
    temp -= np.einsum('IK, JXYA->JKAYIX', np.identity(ncore), v_caae_so, optimize = True)
    temp += np.einsum('XY, JKIA->JKAYIX', np.identity(ncas), v_ccce_so, optimize = True)
    temp -= np.einsum('A, IJ, KXAY->JKAYIX', e_extern_so, np.identity(ncore), t1_caea, optimize = True)
    temp += np.einsum('A, IK, JXAY->JKAYIX', e_extern_so, np.identity(ncore), t1_caea, optimize = True)
    temp -= np.einsum('J, IK, JXAY->JKAYIX', e_core_so, np.identity(ncore), t1_caea, optimize = True)
    temp += np.einsum('K, IJ, KXAY->JKAYIX', e_core_so, np.identity(ncore), t1_caea, optimize = True)
    temp += np.einsum('Xx, IJ, KxAY->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, optimize = True)
    temp -= np.einsum('Xx, IK, JxAY->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, optimize = True)
    temp -= np.einsum('Yx, IJ, KXAx->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, optimize = True)
    temp += np.einsum('Yx, IK, JXAx->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, optimize = True)
    temp -= np.einsum('IJ, KXAx, iYix->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, optimize = True)
    temp += np.einsum('IJ, KxAY, ixiX->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, optimize = True)
    temp += np.einsum('IK, JXAx, iYix->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, optimize = True)
    temp -= np.einsum('IK, JxAY, ixiX->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, optimize = True)
    temp -= np.einsum('JKIA, XY->JKAYIX', v_ccce_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, KXxA, xY->JKAYIX', np.identity(ncore), v_caae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IK, JXxA, xY->JKAYIX', np.identity(ncore), v_caae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('A, IJ, KXAx, xY->JKAYIX', e_extern_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('A, IK, JXAx, xY->JKAYIX', e_extern_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('J, IK, JXAx, xY->JKAYIX', e_core_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('K, IJ, KXAx, xY->JKAYIX', e_core_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Xx, IJ, KxAy, yY->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('Xx, IK, JxAy, yY->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('xy, IJ, KXAx, yY->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xy, IK, JXAx, yY->JKAYIX', h_aa_so, np.identity(ncore), t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, KXAx, xyYz, zy->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IJ, KXAx, iyix, yY->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IJ, KxAY, Xyxz, zy->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, KxAy, XyYz, zx->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IJ, KxAy, XzYx, yz->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, KxAy, ixiX, yY->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IK, JXAx, xyYz, zy->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IK, JXAx, iyix, yY->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IK, JxAY, Xyxz, zy->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IK, JxAy, XyYz, zx->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IK, JxAy, XzYx, yz->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IK, JxAy, ixiX, yY->JKAYIX', np.identity(ncore), t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('IJ, KXAx, xyzw, zwYy->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IJ, KxAy, Xyzw, zwYx->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, KxAy, Xzxw, ywYz->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IK, JXAx, xyzw, zwYy->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IK, JxAy, Xyzw, zwYx->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('IK, JxAy, Xzxw, ywYz->JKAYIX', np.identity(ncore), t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
