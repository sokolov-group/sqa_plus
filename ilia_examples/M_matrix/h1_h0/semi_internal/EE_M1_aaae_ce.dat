
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) v(I,B,x,A) cre(X) cre(Y) des(Z) des(x) 
 (  -1.00000) h(I,x) kdelta(A,B) cre(X) cre(Y) des(Z) des(x) 
 (   0.50000) kdelta(A,B) v(I,Z,x,y) cre(X) cre(Y) des(x) des(y) 
 (   1.00000) kdelta(A,B) v(I,i,i,x) cre(X) cre(Y) des(Z) des(x) 
 (  -0.50000) e(I) kdelta(A,B) t1(I,Z,x,y) cre(X) cre(Y) des(x) des(y) 
 (   1.00000) e(I) kdelta(A,B) t1(I,x) cre(X) cre(Y) des(Z) des(x) 
 (  -0.50000) h(Z,x) kdelta(A,B) t1(I,x,y,z) cre(X) cre(Y) des(y) des(z) 
 (   1.00000) h(x,y) kdelta(A,B) t1(I,Z,x,z) cre(X) cre(Y) des(y) des(z) 
 (  -1.00000) h(x,y) kdelta(A,B) t1(I,x) cre(X) cre(Y) des(Z) des(y) 
 (  -1.00000) kdelta(A,B) t1(I,Z,x,y) v(i,x,i,z) cre(X) cre(Y) des(y) des(z) 
 (   0.25000) kdelta(A,B) t1(I,Z,x,y) v(z,w,x,y) cre(X) cre(Y) des(z) des(w) 
 (  -1.00000) kdelta(A,B) t1(I,x) v(i,x,i,y) cre(X) cre(Y) des(Z) des(y) 
 (  -0.50000) kdelta(A,B) t1(I,x) v(y,z,Z,x) cre(X) cre(Y) des(y) des(z) 
 (  -0.50000) kdelta(A,B) t1(I,x,y,z) v(i,Z,i,x) cre(X) cre(Y) des(y) des(z) 
 (  -0.50000) kdelta(A,B) v(I,z,x,y) cre(X) cre(Y) cre(z) des(Z) des(x) des(y) 
 (   0.50000) e(I) kdelta(A,B) t1(I,x,y,z) cre(X) cre(Y) cre(x) des(Z) des(y) des(z) 
 (   0.50000) h(x,y) kdelta(A,B) t1(I,x,z,w) cre(X) cre(Y) cre(y) des(Z) des(z) des(w) 
 (  -1.00000) h(x,y) kdelta(A,B) t1(I,z,x,w) cre(X) cre(Y) cre(z) des(Z) des(y) des(w) 
 (  -0.50000) kdelta(A,B) t1(I,Z,x,y) v(z,w,x,u) cre(X) cre(Y) cre(u) des(y) des(z) des(w) 
 (  -0.50000) kdelta(A,B) t1(I,x) v(y,z,x,w) cre(X) cre(Y) cre(w) des(Z) des(y) des(z) 
 (  -0.50000) kdelta(A,B) t1(I,x,y,z) v(x,w,Z,u) cre(X) cre(Y) cre(u) des(y) des(z) des(w) 
 (   1.00000) kdelta(A,B) t1(I,x,y,z) v(i,y,i,w) cre(X) cre(Y) cre(x) des(Z) des(z) des(w) 
 (  -0.50000) kdelta(A,B) t1(I,x,y,z) v(w,u,Z,y) cre(X) cre(Y) cre(x) des(z) des(w) des(u) 
 (  -0.25000) kdelta(A,B) t1(I,x,y,z) v(w,u,y,z) cre(X) cre(Y) cre(x) des(Z) des(w) des(u) 
 (   0.50000) kdelta(A,B) t1(I,x,y,z) v(i,w,i,x) cre(X) cre(Y) cre(w) des(Z) des(y) des(z) 
 (  -0.25000) kdelta(A,B) t1(I,x,y,z) v(x,w,u,v) cre(X) cre(Y) cre(u) cre(v) des(Z) des(y) des(z) des(w) 
 (  -0.50000) kdelta(A,B) t1(I,x,y,z) v(w,u,y,v) cre(X) cre(Y) cre(x) cre(v) des(Z) des(z) des(w) des(u) 

Total terms : 27
SQA automation time :  0.157 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('IBxA, XYZx->XYBZIA', v_ceae_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Ix, AB, XYZx->XYBZIA', h_ca_so, np.identity(nextern), rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, IZxy, XYxy->XYBZIA', np.identity(nextern), v_caaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('AB, Iiix, XYZx->XYBZIA', np.identity(nextern), v_ccca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('I, AB, IZxy, XYxy->XYBZIA', e_core_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('I, AB, Ix, XYZx->XYBZIA', e_core_so, np.identity(nextern), t1_ca, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Zx, AB, Ixyz, XYyz->XYBZIA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, AB, IZxz, XYyz->XYBZIA', h_aa_so, np.identity(nextern), t1_caaa, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, AB, Ix, XYZy->XYBZIA', h_aa_so, np.identity(nextern), t1_ca, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, IZxy, ixiz, XYyz->XYBZIA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('AB, IZxy, zwxy, XYzw->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('AB, Ix, ixiy, XYZy->XYBZIA', np.identity(nextern), t1_ca, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ix, yzZx, XYyz->XYBZIA', np.identity(nextern), t1_ca, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ixyz, iZix, XYyz->XYBZIA', np.identity(nextern), t1_caaa, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Izxy, XYzZxy->XYBZIA', np.identity(nextern), v_caaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('I, AB, Ixyz, XYxZyz->XYBZIA', e_core_so, np.identity(nextern), t1_caaa, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xy, AB, Ixzw, XYyZzw->XYBZIA', h_aa_so, np.identity(nextern), t1_caaa, rdm_cccaaa_so, optimize = True)
    temp -= np.einsum('xy, AB, Izxw, XYzZyw->XYBZIA', h_aa_so, np.identity(nextern), t1_caaa, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, IZxy, zwxu, XYuyzw->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ix, yzxw, XYwZyz->XYBZIA', np.identity(nextern), t1_ca, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ixyz, xwZu, XYuyzw->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('AB, Ixyz, iyiw, XYxZzw->XYBZIA', np.identity(nextern), t1_caaa, v_caca_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ixyz, wuZy, XYxzwu->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('AB, Ixyz, wuyz, XYxZwu->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('AB, Ixyz, iwix, XYwZyz->XYBZIA', np.identity(nextern), t1_caaa, v_caca_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('AB, Ixyz, xwuv, XYuvZyzw->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('AB, Ixyz, wuyv, XYxvZzwu->XYBZIA', np.identity(nextern), t1_caaa, v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
