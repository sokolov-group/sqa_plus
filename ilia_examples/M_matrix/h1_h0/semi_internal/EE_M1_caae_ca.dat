
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) v(J,X,I,A) cre(Y) des(Z) 
 (   1.00000) h(X,A) kdelta(I,J) cre(Y) des(Z) 
 (  -1.00000) kdelta(I,J) v(X,x,Z,A) cre(Y) des(x) 
 (   1.00000) kdelta(I,J) v(i,X,i,A) cre(Y) des(Z) 
 (   1.00000) kdelta(X,Z) v(J,x,I,A) cre(Y) des(x) 
 (   1.00000) e(A) kdelta(I,J) t1(X,A) cre(Y) des(Z) 
 (   1.00000) e(A) kdelta(I,J) t1(X,x,A,Z) cre(Y) des(x) 
 (  -1.00000) h(X,x) kdelta(I,J) t1(x,A) cre(Y) des(Z) 
 (  -1.00000) h(X,x) kdelta(I,J) t1(x,y,A,Z) cre(Y) des(y) 
 (   1.00000) h(Z,x) kdelta(I,J) t1(X,y,A,x) cre(Y) des(y) 
 (  -1.00000) h(x,y) kdelta(I,J) t1(X,x,A,Z) cre(Y) des(y) 
 (   1.00000) kdelta(I,J) t1(x,A) v(X,y,Z,x) cre(Y) des(y) 
 (  -1.00000) kdelta(I,J) t1(x,A) v(i,x,i,X) cre(Y) des(Z) 
 (  -1.00000) kdelta(I,J) t1(X,x,A,Z) v(i,x,i,y) cre(Y) des(y) 
 (   1.00000) kdelta(I,J) t1(X,x,A,y) v(i,Z,i,y) cre(Y) des(x) 
 (  -0.50000) kdelta(I,J) t1(x,y,A,Z) v(X,z,x,y) cre(Y) des(z) 
 (  -1.00000) kdelta(I,J) t1(x,y,A,Z) v(i,x,i,X) cre(Y) des(y) 
 (   1.00000) v(J,x,I,A) cre(X) cre(Y) des(Z) des(x) 
 (   1.00000) kdelta(I,J) v(X,x,y,A) cre(Y) cre(y) des(Z) des(x) 
 (  -1.00000) e(A) kdelta(I,J) t1(X,x,A,y) cre(Y) cre(y) des(Z) des(x) 
 (   1.00000) h(X,x) kdelta(I,J) t1(x,y,A,z) cre(Y) cre(z) des(Z) des(y) 
 (   1.00000) h(x,y) kdelta(I,J) t1(X,x,A,z) cre(Y) cre(z) des(Z) des(y) 
 (  -1.00000) h(x,y) kdelta(I,J) t1(X,z,A,x) cre(Y) cre(y) des(Z) des(z) 
 (   1.00000) kdelta(I,J) t1(x,A) v(X,y,x,z) cre(Y) cre(z) des(Z) des(y) 
 (   0.50000) kdelta(I,J) t1(X,x,A,Z) v(y,z,x,w) cre(Y) cre(w) des(y) des(z) 
 (   1.00000) kdelta(I,J) t1(X,x,A,y) v(i,x,i,z) cre(Y) cre(y) des(Z) des(z) 
 (  -1.00000) kdelta(I,J) t1(X,x,A,y) v(y,z,Z,w) cre(Y) cre(w) des(x) des(z) 
 (   0.50000) kdelta(I,J) t1(X,x,A,y) v(z,w,Z,x) cre(Y) cre(y) des(z) des(w) 
 (  -1.00000) kdelta(I,J) t1(X,x,A,y) v(i,z,i,y) cre(Y) cre(z) des(Z) des(x) 
 (   1.00000) kdelta(I,J) t1(x,y,A,Z) v(X,z,x,w) cre(Y) cre(w) des(y) des(z) 
 (   0.50000) kdelta(I,J) t1(x,y,A,z) v(X,z,Z,w) cre(Y) cre(w) des(x) des(y) 
 (   1.00000) kdelta(I,J) t1(x,y,A,z) v(X,w,Z,x) cre(Y) cre(z) des(y) des(w) 
 (   0.50000) kdelta(I,J) t1(x,y,A,z) v(X,w,x,y) cre(Y) cre(z) des(Z) des(w) 
 (   1.00000) kdelta(I,J) t1(x,y,A,z) v(i,x,i,X) cre(Y) cre(z) des(Z) des(y) 
 (  -0.50000) kdelta(I,J) t1(X,x,A,y) v(y,z,w,u) cre(Y) cre(w) cre(u) des(Z) des(x) des(z) 
 (   0.50000) kdelta(I,J) t1(X,x,A,y) v(z,w,x,u) cre(Y) cre(y) cre(u) des(Z) des(z) des(w) 
 (   0.25000) kdelta(I,J) t1(x,y,A,z) v(X,z,w,u) cre(Y) cre(w) cre(u) des(Z) des(x) des(y) 
 (   1.00000) kdelta(I,J) t1(x,y,A,z) v(X,w,x,u) cre(Y) cre(z) cre(u) des(Z) des(y) des(w) 

Total terms : 38
SQA automation time :  0.784 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('JXIA, YZ->JYAZIX', v_cace_so, rdm_ca_so, optimize = True)
    temp += np.einsum('XA, IJ, YZ->JYAZIX', h_ae_so, np.identity(ncore), rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, XxZA, Yx->JYAZIX', np.identity(ncore), v_aaae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IJ, iXiA, YZ->JYAZIX', np.identity(ncore), v_cace_so, rdm_ca_so, optimize = True)
    temp += np.einsum('XZ, JxIA, Yx->JYAZIX', np.identity(ncas), v_cace_so, rdm_ca_so, optimize = True)
    temp += np.einsum('A, IJ, XA, YZ->JYAZIX', e_extern_so, np.identity(ncore), t1_ae, rdm_ca_so, optimize = True)
    temp += np.einsum('A, IJ, XxAZ, Yx->JYAZIX', e_extern_so, np.identity(ncore), t1_aaea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Xx, IJ, xA, YZ->JYAZIX', h_aa_so, np.identity(ncore), t1_ae, rdm_ca_so, optimize = True)
    temp -= np.einsum('Xx, IJ, xyAZ, Yy->JYAZIX', h_aa_so, np.identity(ncore), t1_aaea, rdm_ca_so, optimize = True)
    temp += np.einsum('Zx, IJ, XyAx, Yy->JYAZIX', h_aa_so, np.identity(ncore), t1_aaea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xy, IJ, XxAZ, Yy->JYAZIX', h_aa_so, np.identity(ncore), t1_aaea, rdm_ca_so, optimize = True)
    temp += np.einsum('IJ, xA, XyZx, Yy->JYAZIX', np.identity(ncore), t1_ae, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, xA, ixiX, YZ->JYAZIX', np.identity(ncore), t1_ae, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, XxAZ, ixiy, Yy->JYAZIX', np.identity(ncore), t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IJ, XxAy, iZiy, Yx->JYAZIX', np.identity(ncore), t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('IJ, xyAZ, Xzxy, Yz->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('IJ, xyAZ, ixiX, Yy->JYAZIX', np.identity(ncore), t1_aaea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('JxIA, XYZx->JYAZIX', v_cace_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, XxyA, YyZx->JYAZIX', np.identity(ncore), v_aaae_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('A, IJ, XxAy, YyZx->JYAZIX', e_extern_so, np.identity(ncore), t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Xx, IJ, xyAz, YzZy->JYAZIX', h_aa_so, np.identity(ncore), t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, IJ, XxAz, YzZy->JYAZIX', h_aa_so, np.identity(ncore), t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, IJ, XzAx, YyZz->JYAZIX', h_aa_so, np.identity(ncore), t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, xA, Xyxz, YzZy->JYAZIX', np.identity(ncore), t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IJ, XxAZ, yzxw, Ywyz->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, XxAy, ixiz, YyZz->JYAZIX', np.identity(ncore), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('IJ, XxAy, yzZw, Ywxz->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IJ, XxAy, zwZx, Yyzw->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('IJ, XxAy, iziy, YzZx->JYAZIX', np.identity(ncore), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, xyAZ, Xzxw, Ywyz->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IJ, xyAz, XzZw, Ywxy->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, xyAz, XwZx, Yzyw->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IJ, xyAz, Xwxy, YzZw->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IJ, xyAz, ixiX, YzZy->JYAZIX', np.identity(ncore), t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IJ, XxAy, yzwu, YwuZxz->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('IJ, XxAy, zwxu, YyuZzw->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('IJ, xyAz, Xzwu, YwuZxy->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += np.einsum('IJ, xyAz, Xwxu, YzuZyw->JYAZIX', np.identity(ncore), t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
