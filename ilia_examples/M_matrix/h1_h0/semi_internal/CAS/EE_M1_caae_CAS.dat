
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) h(J,A) cre(X) des(Y) 
 (  -1.00000) v(J,x,Y,A) cre(X) des(x) 
 (  -1.00000) v(J,i,i,A) cre(X) des(Y) 
 (   1.00000) e(A) t1(J,A) cre(X) des(Y) 
 (   1.00000) e(A) t1(J,x,A,Y) cre(X) des(x) 
 (  -1.00000) e(J) t1(J,A) cre(X) des(Y) 
 (  -1.00000) e(J) t1(J,x,A,Y) cre(X) des(x) 
 (   1.00000) h(Y,x) t1(J,y,A,x) cre(X) des(y) 
 (  -1.00000) h(x,y) t1(J,x,A,Y) cre(X) des(y) 
 (  -1.00000) t1(J,x,A,Y) v(i,x,i,y) cre(X) des(y) 
 (   1.00000) t1(J,x,A,y) v(i,Y,i,y) cre(X) des(x) 
 (   1.00000) v(J,x,y,A) cre(X) cre(y) des(Y) des(x) 
 (  -1.00000) e(A) t1(J,x,A,y) cre(X) cre(y) des(Y) des(x) 
 (   1.00000) e(J) t1(J,x,A,y) cre(X) cre(y) des(Y) des(x) 
 (   1.00000) h(x,y) t1(J,x,A,z) cre(X) cre(z) des(Y) des(y) 
 (  -1.00000) h(x,y) t1(J,z,A,x) cre(X) cre(y) des(Y) des(z) 
 (   0.50000) t1(J,x,A,Y) v(y,z,x,w) cre(X) cre(w) des(y) des(z) 
 (   1.00000) t1(J,x,A,y) v(i,x,i,z) cre(X) cre(y) des(Y) des(z) 
 (  -1.00000) t1(J,x,A,y) v(y,z,Y,w) cre(X) cre(w) des(x) des(z) 
 (   0.50000) t1(J,x,A,y) v(z,w,Y,x) cre(X) cre(y) des(z) des(w) 
 (  -1.00000) t1(J,x,A,y) v(i,z,i,y) cre(X) cre(z) des(Y) des(x) 
 (  -0.50000) t1(J,x,A,y) v(y,z,w,u) cre(X) cre(w) cre(u) des(Y) des(x) des(z) 
 (   0.50000) t1(J,x,A,y) v(z,w,x,u) cre(X) cre(y) cre(u) des(Y) des(z) des(w) 

Total terms : 23
SQA automation time :  0.598 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('JA, IXY->JXAYI', h_ce_so, trdm_ca_so, optimize = True)
    temp -= np.einsum('JxYA, IXx->JXAYI', v_caae_so, trdm_ca_so, optimize = True)
    temp -= np.einsum('JiiA, IXY->JXAYI', v_ccce_so, trdm_ca_so, optimize = True)
    temp += np.einsum('A, JA, IXY->JXAYI', e_extern_so, t1_ce, trdm_ca_so, optimize = True)
    temp += np.einsum('A, JxAY, IXx->JXAYI', e_extern_so, t1_caea, trdm_ca_so, optimize = True)
    temp -= np.einsum('J, JA, IXY->JXAYI', e_core_so, t1_ce, trdm_ca_so, optimize = True)
    temp -= np.einsum('J, JxAY, IXx->JXAYI', e_core_so, t1_caea, trdm_ca_so, optimize = True)
    temp += np.einsum('Yx, JyAx, IXy->JXAYI', h_aa_so, t1_caea, trdm_ca_so, optimize = True)
    temp -= np.einsum('xy, JxAY, IXy->JXAYI', h_aa_so, t1_caea, trdm_ca_so, optimize = True)
    temp -= np.einsum('JxAY, ixiy, IXy->JXAYI', t1_caea, v_caca_so, trdm_ca_so, optimize = True)
    temp += np.einsum('JxAy, iYiy, IXx->JXAYI', t1_caea, v_caca_so, trdm_ca_so, optimize = True)
    temp += np.einsum('JxyA, IXyYx->JXAYI', v_caae_so, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('A, JxAy, IXyYx->JXAYI', e_extern_so, t1_caea, trdm_ccaa_so, optimize = True)
    temp += np.einsum('J, JxAy, IXyYx->JXAYI', e_core_so, t1_caea, trdm_ccaa_so, optimize = True)
    temp += np.einsum('xy, JxAz, IXzYy->JXAYI', h_aa_so, t1_caea, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('xy, JzAx, IXyYz->JXAYI', h_aa_so, t1_caea, trdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('JxAY, yzxw, IXwyz->JXAYI', t1_caea, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp += np.einsum('JxAy, ixiz, IXyYz->JXAYI', t1_caea, v_caca_so, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('JxAy, yzYw, IXwxz->JXAYI', t1_caea, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('JxAy, zwYx, IXyzw->JXAYI', t1_caea, v_aaaa_so, trdm_ccaa_so, optimize = True)
    temp -= np.einsum('JxAy, iziy, IXzYx->JXAYI', t1_caea, v_caca_so, trdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('JxAy, yzwu, IXwuYxz->JXAYI', t1_caea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('JxAy, zwxu, IXyuYzw->JXAYI', t1_caea, v_aaaa_so, trdm_cccaaa_so, optimize = True)
