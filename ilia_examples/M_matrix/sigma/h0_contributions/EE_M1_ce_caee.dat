
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(I,x,A,a) h(y,a) cre(y) des(x) 
 (   1.00000) X(I,x,A,a) v(i,y,i,a) cre(y) des(x) 
 (  -0.50000) X(I,x,a,b) v(y,A,a,b) cre(y) des(x) 
 (  -1.00000) X(i,x,A,a) v(i,y,I,a) cre(y) des(x) 
 (   1.00000) X(I,x,A,a) e(a) t1(y,a) cre(y) des(x) 
 (  -1.00000) X(I,x,A,a) h(y,z) t1(y,a) cre(z) des(x) 
 (  -1.00000) X(I,x,A,a) t1(y,a) v(i,z,i,y) cre(z) des(x) 
 (   0.50000) X(I,x,A,a) v(z,w,y,a) cre(z) cre(w) des(x) des(y) 
 (  -0.50000) X(I,x,A,a) e(a) t1(y,z,a,w) cre(y) cre(z) des(x) des(w) 
 (   1.00000) X(I,x,A,a) h(y,z) t1(y,w,a,u) cre(z) cre(w) des(x) des(u) 
 (  -0.50000) X(I,x,A,a) h(y,z) t1(w,u,a,y) cre(w) cre(u) des(x) des(z) 
 (   0.50000) X(I,x,A,a) t1(y,a) v(y,z,w,u) cre(w) cre(u) des(x) des(z) 
 (   0.25000) X(I,x,A,a) t1(y,z,a,w) v(y,z,u,v) cre(u) cre(v) des(x) des(w) 
 (  -0.50000) X(I,x,A,a) t1(y,z,a,w) v(i,w,i,u) cre(y) cre(z) des(x) des(u) 
 (  -1.00000) X(I,x,A,a) t1(y,z,a,w) v(i,u,i,y) cre(z) cre(u) des(x) des(w) 
 (  -0.50000) X(I,x,A,a) t1(y,z,a,w) v(y,u,v,s) cre(z) cre(v) cre(s) des(x) des(w) des(u) 
 (  -0.25000) X(I,x,A,a) t1(y,z,a,w) v(u,v,w,s) cre(y) cre(z) cre(s) des(x) des(u) des(v) 

Total terms : 17
SQA automation time :  0.193 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('IxAa, ya, yx->IA', X, h_ae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IxAa, iyia, yx->IA', X, v_cace_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('Ixab, yAab, yx->IA', X, v_aeee_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('ixAa, iyIa, yx->IA', X, v_cace_so, rdm_ca_so, optimize = True)
    temp += np.einsum('IxAa, a, ya, yx->IA', X, e_extern_so, t1_ae, rdm_ca_so, optimize = True)
    temp -= np.einsum('IxAa, yz, ya, zx->IA', X, h_aa_so, t1_ae, rdm_ca_so, optimize = True)
    temp -= np.einsum('IxAa, ya, iziy, zx->IA', X, t1_ae, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('IxAa, zwya, zwxy->IA', X, v_aaae_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IxAa, a, yzaw, yzxw->IA', X, e_extern_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += np.einsum('IxAa, yz, ywau, zwxu->IA', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IxAa, yz, wuay, wuxz->IA', X, h_aa_so, t1_aaea, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('IxAa, ya, yzwu, wuxz->IA', X, t1_ae, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('IxAa, yzaw, yzuv, uvxw->IA', X, t1_aaea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IxAa, yzaw, iwiu, yzxu->IA', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('IxAa, yzaw, iuiy, zuxw->IA', X, t1_aaea, v_caca_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('IxAa, yzaw, yuvs, zvsxwu->IA', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('IxAa, yzaw, uvws, yzsxuv->IA', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
