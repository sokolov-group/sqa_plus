
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -0.50000) X(x,y,A,a) h(z,a) cre(X) cre(z) des(x) des(y) 
 (  -0.50000) X(x,y,A,a) v(i,z,i,a) cre(X) cre(z) des(x) des(y) 
 (   0.25000) X(x,y,a,b) v(z,A,a,b) cre(X) cre(z) des(x) des(y) 
 (  -0.50000) X(x,y,A,a) e(a) t1(z,a) cre(X) cre(z) des(x) des(y) 
 (   0.50000) X(x,y,A,a) h(z,w) t1(z,a) cre(X) cre(w) des(x) des(y) 
 (   0.50000) X(x,y,A,a) t1(z,a) v(i,w,i,z) cre(X) cre(w) des(x) des(y) 
 (   0.25000) X(x,y,A,a) v(w,u,z,a) cre(X) cre(w) cre(u) des(x) des(y) des(z) 
 (  -0.25000) X(x,y,A,a) e(a) t1(z,w,a,u) cre(X) cre(z) cre(w) des(x) des(y) des(u) 
 (   0.50000) X(x,y,A,a) h(z,w) t1(z,u,a,v) cre(X) cre(w) cre(u) des(x) des(y) des(v) 
 (  -0.25000) X(x,y,A,a) h(z,w) t1(u,v,a,z) cre(X) cre(u) cre(v) des(x) des(y) des(w) 
 (   0.25000) X(x,y,A,a) t1(z,a) v(z,w,u,v) cre(X) cre(u) cre(v) des(x) des(y) des(w) 
 (   0.12500) X(x,y,A,a) t1(z,w,a,u) v(z,w,v,s) cre(X) cre(v) cre(s) des(x) des(y) des(u) 
 (  -0.25000) X(x,y,A,a) t1(z,w,a,u) v(i,u,i,v) cre(X) cre(z) cre(w) des(x) des(y) des(v) 
 (  -0.50000) X(x,y,A,a) t1(z,w,a,u) v(i,v,i,z) cre(X) cre(w) cre(v) des(x) des(y) des(u) 
 (   0.25000) X(x,y,A,a) t1(z,w,a,u) v(z,v,s,t) cre(X) cre(w) cre(s) cre(t) des(x) des(y) des(u) des(v) 
 (   0.12500) X(x,y,A,a) t1(z,w,a,u) v(v,s,u,t) cre(X) cre(z) cre(w) cre(t) des(x) des(y) des(v) des(s) 

Total terms : 16
SQA automation time :  0.196 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp = -0.5 * np.einsum('xyAa, za, Xzxy->XA', X, h_ae_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAa, izia, Xzxy->XA', X, v_cace_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('xyab, zAab, Xzxy->XA', X, v_aeee_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAa, a, za, Xzxy->XA', X, e_extern_so, t1_ae, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyAa, zw, za, Xwxy->XA', X, h_aa_so, t1_ae, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyAa, za, iwiz, Xwxy->XA', X, t1_ae, v_caca_so, rdm_ccaa_so, optimize = True)
    temp += 0.25 * np.einsum('xyAa, wuza, Xwuxyz->XA', X, v_aaae_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAa, a, zwau, Xzwxyu->XA', X, e_extern_so, t1_aaea, rdm_cccaaa_so, optimize = True)
    temp += 0.5 * np.einsum('xyAa, zw, zuav, Xwuxyv->XA', X, h_aa_so, t1_aaea, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAa, zw, uvaz, Xuvxyw->XA', X, h_aa_so, t1_aaea, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('xyAa, za, zwuv, Xuvxyw->XA', X, t1_ae, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp += 0.125 * np.einsum('xyAa, zwau, zwvs, Xvsxyu->XA', X, t1_aaea, v_aaaa_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.25 * np.einsum('xyAa, zwau, iuiv, Xzwxyv->XA', X, t1_aaea, v_caca_so, rdm_cccaaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xyAa, zwau, iviz, Xwvxyu->XA', X, t1_aaea, v_caca_so, rdm_cccaaa_so, optimize = True)
    temp += 0.25 * np.einsum('xyAa, zwau, zvst, Xwstxyuv->XA', X, t1_aaea, v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
    temp += 0.125 * np.einsum('xyAa, zwau, vsut, Xzwtxyvs->XA', X, t1_aaea, v_aaaa_so, rdm_ccccaaaa_so, optimize = True)
