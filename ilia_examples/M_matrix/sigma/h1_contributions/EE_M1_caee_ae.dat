
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (  -1.00000) X(x,A) v(I,y,x,B) cre(X) des(y) 
 (   1.00000) X(x,B) v(I,y,x,A) cre(X) des(y) 
 (   1.00000) X(x,a) v(I,a,A,B) cre(X) des(x) 
 (   1.00000) X(x,A) e(B) t1(I,y,B,x) cre(X) des(y) 
 (  -1.00000) X(x,A) e(I) t1(I,y,B,x) cre(X) des(y) 
 (  -1.00000) X(x,B) e(A) t1(I,y,A,x) cre(X) des(y) 
 (   1.00000) X(x,B) e(I) t1(I,y,A,x) cre(X) des(y) 
 (   1.00000) X(x,A) h(x,y) t1(I,z,B,y) cre(X) des(z) 
 (  -1.00000) X(x,A) h(y,z) t1(I,y,B,x) cre(X) des(z) 
 (  -1.00000) X(x,B) h(x,y) t1(I,z,A,y) cre(X) des(z) 
 (   1.00000) X(x,B) h(y,z) t1(I,y,A,x) cre(X) des(z) 
 (  -1.00000) X(x,A) t1(I,y,B,x) v(i,y,i,z) cre(X) des(z) 
 (   1.00000) X(x,A) t1(I,y,B,z) v(i,x,i,z) cre(X) des(y) 
 (   1.00000) X(x,B) t1(I,y,A,x) v(i,y,i,z) cre(X) des(z) 
 (  -1.00000) X(x,B) t1(I,y,A,z) v(i,x,i,z) cre(X) des(y) 
 (   0.50000) X(x,A) t1(I,y,B,x) v(z,w,y,u) cre(X) cre(u) des(z) des(w) 
 (  -1.00000) X(x,A) t1(I,y,B,z) v(z,w,x,u) cre(X) cre(u) des(y) des(w) 
 (   0.50000) X(x,A) t1(I,y,B,z) v(w,u,x,y) cre(X) cre(z) des(w) des(u) 
 (  -0.50000) X(x,B) t1(I,y,A,x) v(z,w,y,u) cre(X) cre(u) des(z) des(w) 
 (   1.00000) X(x,B) t1(I,y,A,z) v(z,w,x,u) cre(X) cre(u) des(y) des(w) 
 (  -0.50000) X(x,B) t1(I,y,A,z) v(w,u,x,y) cre(X) cre(z) des(w) des(u) 

Total terms : 21
SQA automation time :  0.068 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =- np.einsum('xA, IyxB, Xy->IXAB', X, v_caae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xB, IyxA, Xy->IXAB', X, v_caae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xa, IaAB, Xx->IXAB', X, v_ceee_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, B, IyBx, Xy->IXAB', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, I, IyBx, Xy->IXAB', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xB, A, IyAx, Xy->IXAB', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('xB, I, IyAx, Xy->IXAB', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, xy, IzBy, Xz->IXAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, yz, IyBx, Xz->IXAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xB, xy, IzAy, Xz->IXAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('xB, yz, IyAx, Xz->IXAB', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('xA, IyBx, iyiz, Xz->IXAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xA, IyBz, ixiz, Xy->IXAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('xB, IyAx, iyiz, Xz->IXAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('xB, IyAz, ixiz, Xy->IXAB', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += 0.5 * np.einsum('xA, IyBx, zwyu, Xuzw->IXAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('xA, IyBz, zwxu, Xuyw->IXAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('xA, IyBz, wuxy, Xzwu->IXAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xB, IyAx, zwyu, Xuzw->IXAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('xB, IyAz, zwxu, Xuyw->IXAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('xB, IyAz, wuxy, Xzwu->IXAB', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
