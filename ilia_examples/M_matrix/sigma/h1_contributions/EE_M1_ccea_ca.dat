
    _____ ____    ___ 
   / ___// __ \  /   |SQA Code geneator for quasi-particle systems (Extention).
   \__ \/ / / / / /| |author:  Koushik Chatterjee
  ___/ / /_/ / / ___ |date:  August 31, 2018
 /____/\___\_\/_/  |_|Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)
                      
 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
--------------------------------------------------------------
------------------------ Hamiltonian(1) ----------------------
Perturbation(V) type = All 
Done ...
Commutation: Done ...
Done ...
--------------------------------------------------------------

------------------------ SQA Automation ----------------------

Computing expectation value with respect to virtual:=>
Done ...
--------------------------------------------------------------
Normal ordering with respect to core:=>
Done ...
--------------------------------------------------------------
Computing expectation value with respect to core:=>
Done ...
--------------------------------------------------------------
Contract delta function for non-dummy indices: =>
Done ...
--------------------------------------------------------------
Dummy indices relabelling:=>
Done ...
--------------------------------------------------------------
Reorder tensor indices according to (Core < Active < Virtual): =>
Done ...
--------------------------------------------------------------

----------------------- Final results ------------------------
 (   1.00000) X(I,x) v(J,x,X,A) 
 (  -1.00000) X(J,x) v(I,x,X,A) 
 (   1.00000) X(i,X) v(I,J,i,A) 
 (  -1.00000) X(I,x) e(A) t1(J,x,A,X) 
 (   1.00000) X(I,x) e(J) t1(J,x,A,X) 
 (   1.00000) X(J,x) e(A) t1(I,x,A,X) 
 (  -1.00000) X(J,x) e(I) t1(I,x,A,X) 
 (  -1.00000) X(I,x) h(X,y) t1(J,x,A,y) 
 (   1.00000) X(I,x) h(x,y) t1(J,y,A,X) 
 (   1.00000) X(J,x) h(X,y) t1(I,x,A,y) 
 (  -1.00000) X(J,x) h(x,y) t1(I,y,A,X) 
 (  -1.00000) X(I,x) t1(J,x,A,y) v(i,X,i,y) 
 (   1.00000) X(I,x) t1(J,y,A,X) v(i,y,i,x) 
 (   1.00000) X(J,x) t1(I,x,A,y) v(i,X,i,y) 
 (  -1.00000) X(J,x) t1(I,y,A,X) v(i,y,i,x) 
 (  -1.00000) X(I,x) v(J,x,y,A) cre(y) des(X) 
 (   1.00000) X(J,x) v(I,x,y,A) cre(y) des(X) 
 (  -1.00000) X(i,x) v(I,J,i,A) cre(x) des(X) 
 (   1.00000) X(I,x) e(A) t1(J,x,A,y) cre(y) des(X) 
 (  -1.00000) X(I,x) e(J) t1(J,x,A,y) cre(y) des(X) 
 (  -1.00000) X(J,x) e(A) t1(I,x,A,y) cre(y) des(X) 
 (   1.00000) X(J,x) e(I) t1(I,x,A,y) cre(y) des(X) 
 (  -1.00000) X(I,x) h(x,y) t1(J,y,A,z) cre(z) des(X) 
 (   1.00000) X(I,x) h(y,z) t1(J,x,A,y) cre(z) des(X) 
 (   1.00000) X(J,x) h(x,y) t1(I,y,A,z) cre(z) des(X) 
 (  -1.00000) X(J,x) h(y,z) t1(I,x,A,y) cre(z) des(X) 
 (  -1.00000) X(I,x) t1(J,x,A,y) v(y,z,X,w) cre(w) des(z) 
 (   1.00000) X(I,x) t1(J,x,A,y) v(i,z,i,y) cre(z) des(X) 
 (   1.00000) X(I,x) t1(J,y,A,X) v(x,z,y,w) cre(w) des(z) 
 (  -1.00000) X(I,x) t1(J,y,A,z) v(x,z,X,w) cre(w) des(y) 
 (   1.00000) X(I,x) t1(J,y,A,z) v(x,w,X,y) cre(z) des(w) 
 (  -1.00000) X(I,x) t1(J,y,A,z) v(i,y,i,x) cre(z) des(X) 
 (   1.00000) X(J,x) t1(I,x,A,y) v(y,z,X,w) cre(w) des(z) 
 (  -1.00000) X(J,x) t1(I,x,A,y) v(i,z,i,y) cre(z) des(X) 
 (  -1.00000) X(J,x) t1(I,y,A,X) v(x,z,y,w) cre(w) des(z) 
 (   1.00000) X(J,x) t1(I,y,A,z) v(x,z,X,w) cre(w) des(y) 
 (  -1.00000) X(J,x) t1(I,y,A,z) v(x,w,X,y) cre(z) des(w) 
 (   1.00000) X(J,x) t1(I,y,A,z) v(i,y,i,x) cre(z) des(X) 
 (  -0.50000) X(I,x) t1(J,x,A,y) v(y,z,w,u) cre(w) cre(u) des(X) des(z) 
 (  -0.50000) X(I,x) t1(J,y,A,z) v(x,z,w,u) cre(w) cre(u) des(X) des(y) 
 (   1.00000) X(I,x) t1(J,y,A,z) v(x,w,y,u) cre(z) cre(u) des(X) des(w) 
 (   0.50000) X(J,x) t1(I,x,A,y) v(y,z,w,u) cre(w) cre(u) des(X) des(z) 
 (   0.50000) X(J,x) t1(I,y,A,z) v(x,z,w,u) cre(w) cre(u) des(X) des(y) 
 (  -1.00000) X(J,x) t1(I,y,A,z) v(x,w,y,u) cre(z) cre(u) des(X) des(w) 

Total terms : 44
SQA automation time :  0.427 seconds

----------------------- SQA EINSUM ---------------------------
  ___  _  _  _  __  _ _  _   _ 
 | __|| || \| |/ _|| | || \_/ | Einsum generator: Transform into einsum.
 | _| | || \  |\_ \| U || \_/ | author:  Koushik Chatterjee
 |___||_||_|\_||__/|___||_| |_| date:  August 31, 2018
                                VERSION : 1
 Copywight (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

 For Help :: help = True
--------------------------------------------------------------
    temp =  np.einsum('Ix, JxXA->IJAX', X, v_caae_so, optimize = True)
    temp -= np.einsum('Jx, IxXA->IJAX', X, v_caae_so, optimize = True)
    temp += np.einsum('iX, IJiA->IJAX', X, v_ccce_so, optimize = True)
    temp -= np.einsum('Ix, A, JxAX->IJAX', X, e_extern_so, t1_caea, optimize = True)
    temp += np.einsum('Ix, J, JxAX->IJAX', X, e_core_so, t1_caea, optimize = True)
    temp += np.einsum('Jx, A, IxAX->IJAX', X, e_extern_so, t1_caea, optimize = True)
    temp -= np.einsum('Jx, I, IxAX->IJAX', X, e_core_so, t1_caea, optimize = True)
    temp -= np.einsum('Ix, Xy, JxAy->IJAX', X, h_aa_so, t1_caea, optimize = True)
    temp += np.einsum('Ix, xy, JyAX->IJAX', X, h_aa_so, t1_caea, optimize = True)
    temp += np.einsum('Jx, Xy, IxAy->IJAX', X, h_aa_so, t1_caea, optimize = True)
    temp -= np.einsum('Jx, xy, IyAX->IJAX', X, h_aa_so, t1_caea, optimize = True)
    temp -= np.einsum('Ix, JxAy, iXiy->IJAX', X, t1_caea, v_caca_so, optimize = True)
    temp += np.einsum('Ix, JyAX, iyix->IJAX', X, t1_caea, v_caca_so, optimize = True)
    temp += np.einsum('Jx, IxAy, iXiy->IJAX', X, t1_caea, v_caca_so, optimize = True)
    temp -= np.einsum('Jx, IyAX, iyix->IJAX', X, t1_caea, v_caca_so, optimize = True)
    temp -= np.einsum('Ix, JxyA, yX->IJAX', X, v_caae_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, IxyA, yX->IJAX', X, v_caae_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('ix, IJiA, xX->IJAX', X, v_ccce_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, A, JxAy, yX->IJAX', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, J, JxAy, yX->IJAX', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Jx, A, IxAy, yX->IJAX', X, e_extern_so, t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, I, IxAy, yX->IJAX', X, e_core_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, xy, JyAz, zX->IJAX', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, yz, JxAy, zX->IJAX', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, xy, IyAz, zX->IJAX', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Jx, yz, IxAy, zX->IJAX', X, h_aa_so, t1_caea, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, JxAy, yzXw, wz->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, JxAy, iziy, zX->IJAX', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, JyAX, xzyw, wz->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, JyAz, xzXw, wy->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Ix, JyAz, xwXy, zw->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Ix, JyAz, iyix, zX->IJAX', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, IxAy, yzXw, wz->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Jx, IxAy, iziy, zX->IJAX', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Jx, IyAX, xzyw, wz->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, IyAz, xzXw, wy->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp -= np.einsum('Jx, IyAz, xwXy, zw->IJAX', X, t1_caea, v_aaaa_so, rdm_ca_so, optimize = True)
    temp += np.einsum('Jx, IyAz, iyix, zX->IJAX', X, t1_caea, v_caca_so, rdm_ca_so, optimize = True)
    temp -= 0.5 * np.einsum('Ix, JxAy, yzwu, wuXz->IJAX', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= 0.5 * np.einsum('Ix, JyAz, xzwu, wuXy->IJAX', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += np.einsum('Ix, JyAz, xwyu, zuXw->IJAX', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Jx, IxAy, yzwu, wuXz->IJAX', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp += 0.5 * np.einsum('Jx, IyAz, xzwu, wuXy->IJAX', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
    temp -= np.einsum('Jx, IyAz, xwyu, zuXw->IJAX', X, t1_caea, v_aaaa_so, rdm_ccaa_so, optimize = True)
