
--------------------------------------------------------------
 Effective Hamiltonian: Construct effective Hamiltonian ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)
 --------------------------------------------------------------

 (   1.00000) E_fc 
 (  -1.00000) e(c0) des(c0) cre(c0) 
 (   1.00000) e(v0) cre(v0) des(v0) 
 (   1.00000) h(a1,a0) cre(a0) des(a1) 
 (   1.00000) v(a1,c1,a0,c1) cre(a0) des(a1) 
 (   0.25000) v(a2,a3,a0,a1) cre(a0) cre(a1) des(a3) des(a2) 
First Commutator

Combining like terms:
Converting 16 terms to canonical form...
     0   (   1.00000) E_fc cre(B) des(J) 
     1   (  -1.00000) E_fc cre(B) des(J) 
     2   (  -1.00000) e(c0) cre(B) cre(c0) des(J) des(c0) 
     3   (  -1.00000) e(c0) cre(B) des(J) 
     4   (   1.00000) e(c0) cre(B) cre(c0) des(J) des(c0) 
     5   (  -1.00000) e(J) cre(B) des(J) 
     6   (   1.00000) e(c0) cre(B) des(J) 
     7   (  -1.00000) e(v0) cre(B) cre(v0) des(J) des(v0) 
     8   (   1.00000) e(B) cre(B) des(J) 
     9   (   1.00000) e(v0) cre(B) cre(v0) des(J) des(v0) 
    10   (  -1.00000) h(a1,a0) cre(B) cre(a0) des(J) des(a1) 
    11   (   1.00000) h(a1,a0) cre(B) cre(a0) des(J) des(a1) 
    12   (  -1.00000) v(a1,c1,a0,c1) cre(B) cre(a0) des(J) des(a1) 
    13   (   1.00000) v(a1,c1,a0,c1) cre(B) cre(a0) des(J) des(a1) 
    14   (  -0.25000) v(a2,a3,a0,a1) cre(B) cre(a0) cre(a1) des(J) des(a2) des(a3) 
    15   (   0.25000) v(a2,a3,a0,a1) cre(B) cre(a0) cre(a1) des(J) des(a2) des(a3) 
Finished combining terms in 0.010 seconds

 (   1.00000) e(B) cre(B) des(J) 
 (  -1.00000) e(J) cre(B) des(J) 

Combining like terms:
Converting 8 terms to canonical form...
     0   (   1.00000) e(B) cre(B) cre(I) des(A) des(J) 
     1   (   1.00000) e(B) kdelta(A,B) cre(I) des(J) 
     2   (  -1.00000) e(B) cre(B) cre(I) des(A) des(J) 
     3   (  -1.00000) e(B) kdelta(J,I) cre(B) des(A) 
     4   (  -1.00000) e(J) cre(B) cre(I) des(A) des(J) 
     5   (  -1.00000) e(J) kdelta(A,B) cre(I) des(J) 
     6   (   1.00000) e(J) cre(B) cre(I) des(A) des(J) 
     7   (   1.00000) e(J) kdelta(J,I) cre(B) des(A) 
Finished combining terms in 0.002 seconds

 (   1.00000) e(B) kdelta(A,B) cre(I) des(J) 
 (  -1.00000) e(B) kdelta(I,J) cre(B) des(A) 
 (  -1.00000) e(J) kdelta(A,B) cre(I) des(J) 
 (   1.00000) e(J) kdelta(I,J) cre(B) des(A) 

------------------------- SQA Addon --------------------------

--------------------------------------------------------------
    SQA_extra: Code geneator for quasi-particle systems.
    author:  Koushik Chatterjee
    date:  August 31, 2018

    Copyright (C) 2018-2019  Koushik Chatterjee (koushikchatterjee7@gmail.com)

    This program is distributed in the hope that it will
    be useful, but WITHOUT ANY WARRANTY; without even the
    implied warranty of MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE. See the GNU General Public License
    for more details.
--------------------------------------------------------------


Expectation value: Filter zero terms wrt virtual:=>
 (   1.00000) e(B) kdelta(A,B) cre(I) des(J) 
 (   0.00000) e(B) kdelta(I,J) cre(B) des(A) 
 (  -1.00000) e(J) kdelta(A,B) cre(I) des(J) 
 (   0.00000) e(J) kdelta(I,J) cre(B) des(A) 

Normal ordering with respect to core:=>
Term=  (   1.00000) e(B) kdelta(A,B) cre(I) des(J) 
Terms after normal ordering:
 (  -1.00000) e(B) kdelta(A,B) des(J) cre(I) 
 (   1.00000) e(B) kdelta(A,B) kdelta(I,J) 

Normal ordering with respect to core:=>
Term=  (  -1.00000) e(J) kdelta(A,B) cre(I) des(J) 
Terms after normal ordering:
 (   1.00000) e(J) kdelta(A,B) des(J) cre(I) 
 (  -1.00000) e(J) kdelta(A,B) kdelta(I,J) 

Expectation value: Filter zero terms wrt core:=>
 (   0.00000) e(B) kdelta(A,B) des(J) cre(I) 
 (   1.00000) e(B) kdelta(A,B) kdelta(I,J) 
 (   0.00000) e(J) kdelta(A,B) des(J) cre(I) 
 (  -1.00000) e(J) kdelta(A,B) kdelta(I,J) 

Combining like terms:
Converting 2 terms to canonical form...
     0   (   1.00000) e(B) kdelta(A,B) kdelta(I,J) 
     1   (  -1.00000) e(J) kdelta(A,B) kdelta(I,J) 
Finished combining terms in 0.001 seconds

Dummy indices label update:=>
 (   1.00000) e(B) kdelta(A,B) kdelta(I,J) 
 (  -1.00000) e(J) kdelta(A,B) kdelta(I,J) 

Reorder tensor indices according to (Core < Active < Virtual): =>

----------------------- Final results ------------------------
 (   1.00000) e(B) kdelta(A,B) kdelta(I,J) 
 (  -1.00000) e(J) kdelta(A,B) kdelta(I,J) 


--------------------------------------------------------------
 VERSION : 1
 Einsum generator: Transform into einsum ...
 author:  Koushik Chatterjee
 date:  August 31, 2018

 Copyright (C) 2018  Koushik Chatterjee (koushikchatterjee7@gmail.com)


 For Help :: help = True
 --------------------------------------------------------------
M[s_ce:f_ce, s_ce:f_ce] =  np.einsum('B, AB, IJ->IAJB', e_extern_so, np.identity(nextern), np.identity(ncore), optimize = True)
M[s_ce:f_ce, s_ce:f_ce] -= np.einsum('J, AB, IJ->IAJB', e_core_so, np.identity(nextern), np.identity(ncore), optimize = True)
